<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React | JSX 及全面 SPA 單頁應用筆記</title>
    <url>/post/react-dev-spa-notes.html</url>
    <content><![CDATA[<div class="note info simple"><p>這篇是我邊學 React 邊寫的筆記，筆記最初是很散亂的，但經過我的一番調整後，部分的筆記內容已被擴展。筆記內容不排除是有錯漏的，所以只供參考，如筆記內容有錯漏，請於下方的留言區告知有關錯處，當我知悉時，便會在有空時作修改。</p>
</div>

<p>當你想編寫集中處理 UI 形式的介面設計及邏輯，你可以嘗嘗 React 這個框架，React 是一個編寫靜態網頁的前端框架，但有別於 HTML，React 可以<strong>單方面嵌入 React 元件到既有的 HTML 檔案</strong>，不影響整個網站之外，亦可以嘗試一下 React 元件的功能，當你慢慢熟練了 React 怎樣用，就可以開始「砍掉重練」，由零開始全面編寫一個使用 React 框架的前端靜態網頁。</p>
<p>React 的特點如下：</p>
<ol>
<li>使用<strong>單頁應用</strong>模式運行網頁，單頁應用 (Single Page Application，簡稱 SPA) 是一個不需要頻繁向伺服器獲取及載入網頁資源，因為單頁應用<strong>只會在第一次向伺服器請求獲取網頁資源</strong>，其後再次載入網頁就<strong>不會再向伺服器獲取，而是經過路由獲取資源</strong>，所以載入需時極短，有效提升用戶體驗。所以你在 React 網頁在導向不同頁面時，<strong>鮮少會看到會有瀏覽器的載入條顯示</strong>。<br>與它相反的就是絕大多數都使用的<strong>多頁應用</strong> (Multiple Page Application，簡稱 MPA) 模式，例如通用的 HTML 網頁開發，在導向不同頁面時，<strong>每次都需要向伺服器請求資源</strong>，重新加載。</li>
<li>不需要學習其他的程式語言，使用<strong>原生的 JavaScript</strong> 及額外增設的 <strong>JSX 語法</strong>編寫 React 網頁，使得熟悉 HTML 網頁前端編寫員可以輕易導入並初嘗 React 框架。</li>
<li>虛擬 DOM 處理，React 實際管理的是一個實際 DOM 的抽象物件，使用虛擬 DOM 來追蹤狀態變化，並在需要更新實際 DOM 時<strong>進行最小化的操作</strong>。當應用程序的狀態發生變化時，React 會在虛擬 DOM 中進行更新，然後計算出實際 DOM 中需要修改的部分，並<strong>只更新這些部分，而不是整個 DOM 樹</strong>。<strong>直接操作實際 DOM 是非常耗費資源</strong>的，所以虛擬 DOM 機制提高了應用程序的效能。</li>
<li>使用元件組合機制，每一個介面都擁有<strong>許多獨立編寫的元件</strong>，進而可以透過<strong>併併湊湊</strong>，隨時把適用的元件組合、嵌入到相應頁面，這點亦可提高程式碼複用率。另外：每個組件都該有以下特性：<ul>
<li>可重用：每個組件都具有獨立功能，可被應用於不同的 UI 介面</li>
<li>可組合：每個組件都可與其他組件一起使用，不會發生衝突，或是嵌入於其他組件之內</li>
<li>可維護：每個組件具有其邏輯，更容易理解、除錯及維護</li>
</ul>
</li>
</ol>
<hr>
<h1 id="嵌入-React-元件到既有-HTML-檔案"><a href="#嵌入-React-元件到既有-HTML-檔案" class="headerlink" title="嵌入 React 元件到既有 HTML 檔案"></a>嵌入 React 元件到既有 HTML 檔案</h1><p>React 是具有彈性的，為了能讓初學者可以慢慢學習 React，我們不需要因為網站是使用 HTML 編寫而重寫網站一遍，在這個方案下，我們會把<strong>網頁部分內容交託予 React 管理</strong>，簡單來說，就是像一些 React 元件嵌入至 HTML 網頁。</p>
<p>在 HTML 匯入 React 函式庫 <code>react</code> 及 <code>react-dom</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react-dom.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="note info simple"><p><code>react</code> 是整個 React 框架最核心的套件，不過，在使用 React 的時候，都需要把 <code>react-dom</code> 匯入，因為 <code>react-dom</code> 是負責瀏覽器及 DOM 渲染的操作，簡單來說， <strong><code>react-dom</code> 是針對編寫網頁 (Web) 而使用的</strong> 。 </p>
</div>

<blockquote>
<p>個人認為既然 <code>react</code> 是核心套件，應該名為類似 <code>react-core</code> 這些名稱會較為適合，至少不會把它們彼此混淆吧。</p>
</blockquote>
<p>另外，有一點在編寫 React 的時候要注意的，編寫 React <strong>雖然看似都是使用 JavaScript 語法</strong>，但實際上是一個 JSX (全稱為 JavaScript XML) 語法，這個語法是用來渲染 React 元件及其相關程式邏輯，而<strong>一般的 JavaScript 是不支援 React 使用的語法的</strong>。</p>
<p>同時，<strong>瀏覽器只懂得 JavaScript 語言</strong>，所以在這一方面我們需要把 JavaScript 轉譯為 JSX 語法，我們可以使用 <a href="https://babeljs.io/setup#installation">Babel</a> 函式庫進行轉譯。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="編寫-JSX-語法至-HTML-網頁-lt-script-gt-標記"><a href="#編寫-JSX-語法至-HTML-網頁-lt-script-gt-標記" class="headerlink" title="編寫 JSX 語法至 HTML 網頁 &lt;script&gt; 標記"></a>編寫 JSX 語法至 HTML 網頁 <code>&lt;script&gt;</code> 標記</h2><p>預設的 <code>&lt;script&gt;</code> 是註明以一般的 JavaScript 語言來編寫，但現在要編寫 JSX 語法，我們就要<strong>特別註明手稿是將會被 Babel 轉譯</strong>，在 React，當然就是把編寫的 JavaScript 轉譯為 JSX 語法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦加上了 <code>text/babel</code> 語法註明，就可以開始寫 JSX，把 React 元件顯示到 HTML 網頁上。</p>
<p>首先，我們會在 HTML 定義一個作為 React 容器的 <code>&lt;div&gt;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;script&gt;</code> 裏，我們可以宣告一個名為 <code>Root</code> 的函式型元件 (純粹對應 HTML 的容器 ID 名稱)，這元件返回的就會是 JSX 語法的 React 佈局。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Root</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>/&gt;</span></span>,                            <span class="comment">// 要渲染的獨立元件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)     <span class="comment">// 獨立元件渲染的目標</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>然後使用 <code>ReactDOM</code> 把獨立元件 <code>Root</code> 渲染到指定 ID 為 <code>root</code> 的函式型元件。</p>
<hr>
<h1 id="編寫-JSX-語法要注意的要點"><a href="#編寫-JSX-語法要注意的要點" class="headerlink" title="編寫 JSX 語法要注意的要點"></a>編寫 JSX 語法要注意的要點</h1><p>因為這個是 JSX，<strong>不是普通 JavaScript，裏面寫的亦不完全是 HTML</strong>，所以你需要注意一下編寫 JSX 要注意的地方。</p>
<ol>
<li>返回的<strong>只能是單一的根元件</strong>，不能返回多個根元件，比如：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>                   &#123;/* 第一個根元件為 div */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am an error<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    &#123;<span class="comment">/* 第二個根元件為 p */</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
這樣的方式是錯的，因為它返回了多個根元件。</li>
<li>加入 CSS 類別 <code>class</code> <strong>應使用 <code>className</code></strong> ，這個可以有點斟酌，因為單純嵌入 React 元件至 HTML 網頁的話，使用 <code>class</code> 是沒有問題的，但當你要全面使用 React 的時候，仍然使用 <code>class</code> 就會報錯，所以強烈建議養成習慣，在 React 改用 <code>className</code>。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;p class=&quot;test&quot;&gt;Test&lt;/p&gt;</span></span><br><span class="line"><span class="addition">+ &lt;p className=&quot;test&quot;&gt;Test&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>React 的 JSX 語法作用區域，在 <strong><code>return</code> 之前的代碼會被視為 JavaScript 語法</strong>，<strong>其後則被視為 HTML 語法</strong>，如果要在元件內執行 JavaScript，就需要用 <code>&#123; &#125;</code> 直接執行，而定義註解 (comment)，可以用一組 <code>&#123;/* */&#125;</code> 定義註解<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 目前是 JavaScript 語法部分</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123; /* 目前是 HTML 語法部分 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;str.toUpperCase()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果你只是想簡單把 React 元件嵌入至 HTML 網頁的話，你現在應該掌握這技巧了，現在就會記錄全面使用 React 框架。</p>
<hr>
<h1 id="配置-React-環境及項目"><a href="#配置-React-環境及項目" class="headerlink" title="配置 React 環境及項目"></a>配置 React 環境及項目</h1><p>當你決定好要把 <strong>網頁全部內容都交託予 React 管理</strong> 時，就可以安裝 React 了，不過，在配置 React 之前，<strong>你要確保已經安裝了 Node.js</strong>，因為 React 是屬於 Node.js 的 NPM 套件，所以你需要確保 Node.js 順利運行，才能夠安裝接下來的 React 框架。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="/post/web-dev-nodejs-express-notes">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Node.js 環境配置</div>
            <div class="tag-link-sitename"> 可以看看這篇文章瞭解怎樣配置 Node.js 環境</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p><strong>我們不會匯入 HTML 形式的 JS 函式庫</strong>，而是直接安裝 NPM 相關套件，同樣都是 <code>react</code> 及 <code>react-dom</code> 套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure>

<p>因為全面的 React 項目需要一定的檔案和格式，而且人手創建 React 項目是很愚蠢的一件事，因為需要的檔案都蠻多的。。。反正你就不會想手動創建就是了。</p>
<p>我們會使用 <code>create-react-app</code> 套件快速建立 React 起始項目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app 項目名稱</span><br><span class="line"><span class="built_in">cd</span> 項目名稱</span><br></pre></td></tr></table></figure>

<p>想立即看看這個模板項目是怎麼的樣子，可以運行看看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p><img src="/post/react-dev-spa-notes/img1.png" alt="create-react-app 模板"></p>
<div class="note info simple"><p><code>public</code> 資料夾內的 <code>robots.txt</code> 是<strong>用來管理 SEO 搜尋</strong>，你可以在這檔案訂立規則。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://www.robotstxt.org/robotstxt.html</span></span><br><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Disallow:</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="深入編寫-JSX-及使用-React-框架"><a href="#深入編寫-JSX-及使用-React-框架" class="headerlink" title="深入編寫 JSX 及使用 React 框架"></a>深入編寫 JSX 及使用 React 框架</h1><p>現在就會深入編寫更多 JSX 及使用 React 框架不同工具。</p>
<h2 id="匯入-CSS-樣式"><a href="#匯入-CSS-樣式" class="headerlink" title="匯入 CSS 樣式"></a>匯入 CSS 樣式</h2><p>先來說說講求美觀的 CSS 要怎樣應用於 React，原來可以有幾種不同方式匯入 CSS 樣式的。</p>
<ol>
<li>單行 CSS：<strong>編寫的是 JavaScript 的 CSS 屬性</strong>，不能以原本的 CSS 語音編寫，在加入 JavaScript 的 CSS 屬性前，你需要加上一對 <code>&#123;&#123; &#125;&#125; </code>。<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;p style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;<span class="title class_">Hello</span> <span class="title class_">World</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>
至於「轉換」方式不需要特別牢記，反正 <strong>大部分都是把蛇形表示式 (<code>snake-case</code>) 改成小駝峰型表示式 (<code>lowerCamelCase</code>)</strong> 比如 <code>background-color</code> -&gt; <code>backgroundColor</code>，只有少數不是這樣，有需要的就看總表參閱對照：<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="http://www.sitestepper.be/en/css-properties-to-javascript-properties-reference-list.htm">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">CSS 屬性與 JavaScript CSS 屬性對照</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></li>
<li>匯入 CSS：匯入外部的 CSS 檔案，所以會以原來 CSS 語法編寫。<strong>不過這個做法不建議大型項目使用</strong>。首先匯入需要用的 CSS 檔案：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br></pre></td></tr></table></figure>
假如你有一個 <code>.container &#123; &#125;</code> 樣式，然後用的時候就，比如：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=&#123;container&#125;&gt;</span><br></pre></td></tr></table></figure></li>
<li>匯入 CSS Modules：同樣都是匯入外部 CSS 檔案，不過我們可以確保單個組件（元件）的所有樣式集中在同一個地方、<strong>確保元件樣式只應用於該組件</strong>以及解決 CSS 全局作用域的問題。剛剛說為什麼<strong>不建議第 2 種方法應用於大型項目</strong>，主要是<strong>因為較容易重複樣式 <code>className</code> 名稱</strong>。<br>假設你有一個獨立元件檔案 <code>Hello.js</code>，然後建立一個名為 <code>Hello.module.css</code> 檔案，匯入：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./Hello.module.css&#x27;</span></span><br></pre></td></tr></table></figure>
假如你有一個 <code>.container &#123; &#125;</code> 樣式：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=&#123;styles.<span class="property">container</span>&#125;&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用路由導向不同頁面"><a href="#使用路由導向不同頁面" class="headerlink" title="使用路由導向不同頁面"></a>使用路由導向不同頁面</h2><p>一個多頁網站最基本能做到的就是有多個頁面，在 React，使用<strong>單頁應用模式建立多頁</strong>是很一件很簡單的事，與此同時都是<strong>很適合的事</strong>，因為剛才都說過單頁應用模式只會在第一次向伺服器獲取資源，所以在單頁模式下實現許多頁面，都不會影響對伺服器的負荷。</p>
<p>我們會使用 <a href="https://reactrouter.com/en/main">React Router</a> 工具建立頁面路由系統，需要安裝 <code>react-router-dom</code> 套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom</span><br></pre></td></tr></table></figure>

<p>現在就建立不同頁面的獨立元件檔案，例如：<code>Home.js</code>、<code>About.js</code>、<code>Contact.js</code> 及 <code>Error404.js</code>，<code>Error404.js</code> 的頁面是用來顯示「找不到網頁」的訊息的。</p>
<div class="tabs" id="code_router"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_router-1">Home.js</button><button type="button" class="tab " data-href="code_router-2">About.js</button><button type="button" class="tab " data-href="code_router-3">Contact.js</button><button type="button" class="tab " data-href="code_router-4">Error404.js</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_router-1"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello World</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_router-2"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_router-3"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Contact</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>聯絡我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_router-4"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Error404</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404 錯誤 - 找不到頁面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p>例如在 <code>App.js</code> 匯入需要用到的常用物件 <code>BrowserRouter</code>、<code>Routes</code>、<code>Route</code> 及 <code>Link</code>，當然，還有要用的頁面：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Contact</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Contact&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Error404</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Error404&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>BrowserRouter</code>：<strong>通常都會被定義為根元素</strong>，是一個管理路由及 URL 變化的「容器」，裏面裝載的就<code>Routes</code> 容器。</li>
<li><code>Routes</code>：用於定義應用程序的路由配置，定義不同的 <code>Route</code> 元件，即<strong>定義不同路徑</strong>，繼而可以將 URL 和相應的組件進行映射。</li>
<li><code>Route</code>：定義單個路由，通常接受兩個參數，第一個參數是<strong>路徑</strong>，第二個參數是<strong>要渲染的元件</strong>。</li>
<li><code>Link</code>：用於生成應用程序中的連結。它接受一個 <code>to</code> 屬性，指定要<strong>導航到的 URL</strong>。當用戶點擊這個連結時，React 路由庫將處理 URL 的變化，並渲染相應的組件。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/contact&#x27;</span>&gt;</span>聯絡我們<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/contact&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Contact</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Error404</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>React 原意是想使用 SPA 框架，所以提供了 <code>Link</code> 元件，如果不使用 <code>Link</code> 元件，<strong>使用了 HTML 的 <code>&lt;a&gt;</code> 標記的話</strong>，的確可以導向頁面，不過， <strong><code>&lt;a&gt;</code> 會向伺服器發出請求</strong>，而不是從路由獲取頁面資源，那就有違了 SPA 的原則，亦都導致你的網頁變得不倫不類。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;a href=&#x27;/about&#x27;&gt;Go to About&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+ &lt;Link to=&#x27;/about&#x27;&gt;Go to About&lt;/Link&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="賦予參數傳遞至路由"><a href="#賦予參數傳遞至路由" class="headerlink" title="賦予參數傳遞至路由"></a>賦予參數傳遞至路由</h3><p>當你想編寫不同的動態頁面內容，你可以試試傳遞參數，例如傳遞一個獨一無二的 ID 作為參數，再傳遞至路由，從而根據所獲取的 ID 而顯示相應的資料內容。</p>
<p>假如，現在有一個 <code>CountPage.js</code>，用來根據路由參數的輸入，來「觀察」所傳遞的參數。我們會使用到 <code>useParams</code> 工具把參數傳遞至路由。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">CountPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> params = <span class="title function_">useParams</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Number &#123;params.id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後在 <code>App.js</code> 作一些變更，假如現在我們想傳遞 <code>id</code> 為路由查詢參數，那就在子 <code>Route</code> 的 <code>path</code> 屬性設置為 <code>:id</code>，記住需要加上冒號 <code>:</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/countpage&#x27;</span>&gt;</span>CountPage<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/countpage&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">CountPage</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">CountPage</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>當你在瀏覽器點擊 <code>CountPage</code> 的 <code>Link</code> 導向 CountPage 頁面後，再加上參數，如 <code>/100</code>：<code>localhost:3000/countpage/100</code>，網頁內容會顯示「Number 100」。</p>
<h2 id="可重複使用的元件"><a href="#可重複使用的元件" class="headerlink" title="可重複使用的元件"></a>可重複使用的元件</h2><p>我們可以編寫可重複使用的元件，例如使用一致樣式的元件，但不同文本內容及顏色，可以使用 <code>props</code> 來把屬性設定。</p>
<p>為了方便管理可重用元件，可以建立一個名為 <code>component</code> 資料夾，新建 <code>Title.js</code>，<code>Title()</code> 要傳一個 <code>props</code> 參數。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Title</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color:</span> <span class="attr">props.color</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;&gt;</span>&#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要使用的時候，就像一個「自訂屬性」的形式定義：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Title</span> text=<span class="string">&quot;首頁&quot;</span> color=<span class="string">&quot;green&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>這個 <code>text</code> 及 <code>color</code> 屬性均會被傳入到 <code>Title()</code> 元件的 <code>props</code> 參數，就可以利用 <code>props.text</code> 及 <code>props.color</code> 獲取對應的值。</p>
<div class="note info simple"><p>你亦可選擇把 <code>props</code> 參數解構賦值 (destructuring)，那就不需要用 <code>props.</code> 作前綴：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Title</span>(<span class="params">&#123;text, color&#125;</span>) &#123; <span class="comment">// 解構賦值</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color:</span> <span class="attr">color</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;&gt;</span>&#123;text&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p class="p center logo large">以下筆記內容尚未完成整理</p>

<p class="p center logo small">這個部分的內容暫時略寫，待有空再處理。</p>

<details class="folding-tag"><summary> 瀏覽未完成內容 </summary>
              <div class="content">
              <h2 id="元件類別"><a href="#元件類別" class="headerlink" title="元件類別"></a>元件類別</h2><p>類別式元件 (Class-based)：咸豐年代時 React 定義元件的方式，需要另外 <code>extends</code> 一個 <code>React.Component</code>，然後要用 <code>render()</code> 方法把元件渲染出來。現在幾乎一一都取代為使用函式型元件。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函式型元件 (Functional)：</p><div class="tabs" id="code_func_comp"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_func_comp-1">獨立元件檔案</button><button type="button" class="tab " data-href="code_func_comp-2">簡短簡易</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_func_comp-1"><p>通常獨立元件檔案 e.g. <code>Greeting.js</code> 就會用這種。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_func_comp-2"><p>如果這些獨立元件是比較簡短的，不需要太多程式碼，可使用 ES6 箭頭函式。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="使用鉤子-Hooks"><a href="#使用鉤子-Hooks" class="headerlink" title="使用鉤子 (Hooks)"></a>使用鉤子 (Hooks)</h2><p>React 基本的鉤子有 3 個：</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a><code>useState</code></h3><p>…</p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><code>useEffect</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;, []) <span class="comment">// [] 是空的依賴陣列</span></span><br></pre></td></tr></table></figure><ol><li><strong>沒有提供</strong>第二個參數，這個參數是一個依賴陣列 (Dependency Array)，該元件會在網頁<strong>每次渲染時都會觸發</strong></li><li>當依賴陣列是<strong>空陣列</strong>，只會在網頁<strong>第一次渲染時觸發</strong></li><li>當依賴陣列 <strong>存有變量</strong>，會在<strong>網頁第一次渲染</strong>時，而且當<strong>指定變量有改變的時候會觸發</strong></li></ol><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a><code>useContext</code></h3><p>…</p><hr><h1 id="編寫-TypeScript-使用-React-框架"><a href="#編寫-TypeScript-使用-React-框架" class="headerlink" title="編寫 TypeScript 使用 React 框架"></a>編寫 TypeScript 使用 React 框架</h1><div class="note danger simple"><p>其實可能這部分內容會太長，會考慮以個別形式，另建新筆記文章集中記錄 React 在 JavaScript 遷移至 TypeScript 部分。</p></div><p>如果你不是編寫 JavaScript 或者已經改用了 TypeScript 的話，這裏都簡單記錄了怎樣編寫 TypeScript 使用 React 框架。</p><div class="note info simple"><p>使用 TypeScript 來寫 React 是更勝一籌的，因為 <strong>TypeScript 是有類型檢查功能</strong>，更容易處理類型相關的錯誤，而 JavaScript 是「後知後覺」的。</p></div><p>同樣都會使用 <code>create-react-app</code> 工具創建 React 項目，不過<strong>註明使用 TypeScript 模板</strong> (<code>--template typescript</code>)。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app 項目名稱 --template typescript</span><br><span class="line"><span class="built_in">cd</span> 項目名稱</span><br></pre></td></tr></table></figure><div class="note info simple"><p><strong>TypeScript 模板會自動安裝了以下套件</strong>，如果你想在既有項目加入 TypeScript 就要手動安裝：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save typescript @types/node @types/react @types/react-dom @types/jest</span><br></pre></td></tr></table></figure></div><div class="tabs" id="react_ts"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="react_ts-1">App.tsx</button><button type="button" class="tab " data-href="react_ts-2">MyComponent.tsx</button></ul><div class="tab-contents"><div class="tab-item-content active" id="react_ts-1"><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, TypeScript with React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">name</span>=<span class="string">&quot;John&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="react_ts-2"><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyComponentProps</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MyComponentProps</span>&gt; = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyComponent</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>
              </div>
            </details>]]></content>
      <categories>
        <category>React</category>
        <category>網頁開發</category>
        <category>前端開發</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>JSX</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
