<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>人工智能的圖像生成 - Stable Diffusion</title>
    <url>/post/ai-image-generation-stable-diffusion.html</url>
    <content><![CDATA[<p>在現今世代，人們除了善用 ChatGPT 的即時對話生成工具，還會藉著咒語 (Prompt) 生成圖像，，而要用到這個強大的圖像生成技術，便可使用 Stable Diffusion。</p>
<hr>
<h1 id="神奇的文轉圖黑魔法"><a href="#神奇的文轉圖黑魔法" class="headerlink" title="神奇的文轉圖黑魔法"></a>神奇的文轉圖黑魔法</h1><p>這個黑魔法就是剛才略略提及的 Stable Diffusion，它是一款深度學習文字到圖像的圖像生成模型，簡而言之，一個<strong>藉著所提供的文字敍述轉換所得的圖像</strong>，不但如此，它還支援進階特性操作，使其有別具一樹的實用價值。</p>
<hr>
<h1 id="黑魔法的秘笈"><a href="#黑魔法的秘笈" class="headerlink" title="黑魔法的秘笈"></a>黑魔法的秘笈</h1><h2 id="咒語-Prompt"><a href="#咒語-Prompt" class="headerlink" title="咒語 (Prompt)"></a>咒語 (Prompt)</h2><p>咒語 (Prompt) 就是你要透過文字的敍述，最後所得的圖像，要注意的是，<strong>不同模型所用的咒語都略有不同</strong>。關鍵是輸入關鍵字，如果該關鍵字支援目前所用的模型，便能夠得到預期效果，我個人喜歡使用 <a href="https://civitai.com/">Civitai</a> 來找找模型。</p>
<h3 id="使用咒語的撇步"><a href="#使用咒語的撇步" class="headerlink" title="使用咒語的撇步"></a>使用咒語的撇步</h3><ol>
<li>關鍵分割：利用 <code>,</code> 可以決定關鍵字的權重，優次為高至低，如 <code>girl, beautiful</code></li>
<li>通用的敍述格式：分為三個主要部分<br>  第一部分（前置設定）：說明使用的畫風、畫質、鏡頭、光照效果等圖像技術規格<br>  第二部分（主體設定）：說明人物、服裝、姿勢、道具等對該人員或對象的要求<br>  第三部分（後置設定）：說明人物置身的環境以及細節</li>
<li>調整權重：利用 <code>(</code> <code>)</code> 標點符號搭配 <code>xxx: 0.x</code> 語法可以為特定物件調整權重，如 <code>(details: 1.0)</code></li>
<li>選用 LoRA 或超網絡模型：透明 <code>&lt;</code> <code>&gt;</code> 標點符號, 語法分別為 <code>&lt;lora:xxx&gt;</code> 及 <code>&lt;hypernet:xxx&gt;</code>，選用合適的 LoRA 模型可以為圖像進行微調，好比一個小型的插件，通過<strong>交叉關注圖層</strong> (cross-attention layer) 從而影響最終的圖像生成結果，LoRA 模型可找找 <a href="https://civitai.com/">Civitai</a>。</li>
</ol>
<h3 id="優質的咒語"><a href="#優質的咒語" class="headerlink" title="優質的咒語"></a>優質的咒語</h3><h4 id="提高圖像質素的咒語"><a href="#提高圖像質素的咒語" class="headerlink" title="提高圖像質素的咒語"></a>提高圖像質素的咒語</h4><table>
<thead>
<tr>
<th>咒語</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>HDR, UHD, 4K, 8K</td>
<td>不同的解像度說明</td>
</tr>
<tr>
<td>best quality</td>
<td>最佳的質素</td>
</tr>
<tr>
<td>masterpiece</td>
<td>傑作</td>
</tr>
<tr>
<td>highly detailed</td>
<td>繪製更多細節</td>
</tr>
<tr>
<td>studio lighting</td>
<td>加入演播室的燈光效果，為圖像加入漂亮的紋理</td>
</tr>
<tr>
<td>ultra-fine painting</td>
<td>超精細的繪圖</td>
</tr>
<tr>
<td>sharp focus</td>
<td>聚焦清晰</td>
</tr>
<tr>
<td>physically-based rendering</td>
<td>基於物理渲染</td>
</tr>
<tr>
<td>extreme detail description</td>
<td>極度詳細的刻劃</td>
</tr>
<tr>
<td>Professional</td>
<td>改善圖像的色彩對比及細節</td>
</tr>
<tr>
<td>Vivid Colors</td>
<td>加入鮮艷的顏色，增添活力的色彩</td>
</tr>
<tr>
<td>Bokeh</td>
<td>虛化模糊背景，從而突出主體或人物</td>
</tr>
<tr>
<td>(EOS R8, 50mm, F1.2, 8K, RAW photo:1.2)</td>
<td>攝影師對圖像的攝像機的攝製規格</td>
</tr>
</tbody></table>
<h4 id="選用不同藝術風格的咒語"><a href="#選用不同藝術風格的咒語" class="headerlink" title="選用不同藝術風格的咒語"></a>選用不同藝術風格的咒語</h4><table>
<thead>
<tr>
<th>咒語</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Portraits</td>
<td>肖像畫</td>
</tr>
<tr>
<td>Landscape</td>
<td>風景畫</td>
</tr>
<tr>
<td>Horror</td>
<td>恐怖畫</td>
</tr>
<tr>
<td>Anime</td>
<td>動漫畫</td>
</tr>
<tr>
<td>Sci-fi</td>
<td>科幻畫</td>
</tr>
<tr>
<td>Photography</td>
<td>攝影畫</td>
</tr>
<tr>
<td>Concept artists (video game)</td>
<td>概念藝術（電玩及遊戲）</td>
</tr>
</tbody></table>
<h2 id="負面咒語-Negative-Prompt"><a href="#負面咒語-Negative-Prompt" class="headerlink" title="負面咒語 (Negative Prompt)"></a>負面咒語 (Negative Prompt)</h2><p><strong>負面咒語</strong> (Negative Prompt)，當中的 <code>Negative</code>，顧名思義就是負面的意思，所以負面咒語是用來<strong>避免或阻止圖像所得的元素及特性</strong>。</p>
<p>常用的負面咒語如下：</p>
<table>
<thead>
<tr>
<th>負面咒語</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>mutated hands and fingers</td>
<td>變異的手和手指</td>
</tr>
<tr>
<td>deformed</td>
<td>畸形的</td>
</tr>
<tr>
<td>bad anatomy</td>
<td>人體解剖不良</td>
</tr>
<tr>
<td>disfigured</td>
<td>毁容的</td>
</tr>
<tr>
<td>poorly drawn face</td>
<td>臉部繪製不良</td>
</tr>
<tr>
<td>mutated</td>
<td>變異的</td>
</tr>
<tr>
<td>extra limb</td>
<td>多餘的肢體</td>
</tr>
<tr>
<td>ugly</td>
<td>醜陋</td>
</tr>
<tr>
<td>poorly drawn hands</td>
<td>手部繪製不良</td>
</tr>
<tr>
<td>missing limb</td>
<td>缺少的肢體</td>
</tr>
<tr>
<td>floating limbs</td>
<td>漂浮的肢體</td>
</tr>
<tr>
<td>disconnected limbs</td>
<td>肢體不連貫</td>
</tr>
<tr>
<td>malformed hands</td>
<td>畸形的手</td>
</tr>
<tr>
<td>out of focus</td>
<td>脫離焦點</td>
</tr>
<tr>
<td>long neck</td>
<td>長頸</td>
</tr>
<tr>
<td>long body</td>
<td>長的身軀</td>
</tr>
</tbody></table>
<p>這個是我在用的負面咒語，順便展示一下用法：</p>
<pre class="line-numbers language-none"><code class="language-none">(painting by bad-artist-anime:0.9), (painting by bad-artist:0.9), watermark, text, error, blurry, 
jpeg artifacts, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, 
watermark, username, artist name, (worst quality, low quality:1.4), bad anatomy</code></pre>

<details class="folding-tag"><summary> 讓我們來問 ChatGPT 解說這些負面咒語的作用。 </summary>
              <div class="content">
              <table><thead><tr><th>負面咒語</th><th>描述</th></tr></thead><tbody><tr><td><code>(painting by bad-artist-anime:0.9)</code></td><td>指的是由一位不太擅長繪畫的動漫畫家創作的畫作，故意將其評級為 <code>0.9</code> 以顯示其較差的質量水平。</td></tr><tr><td><code>(painting by bad-artist:0.9)</code></td><td>同樣是指由一位不太擅長繪畫的藝術家創作的畫作，同樣評級為 <code>0.9</code> 以表示其質量較差。</td></tr><tr><td><code>watermark</code></td><td></td></tr><tr><td><code>text</code></td><td>指的是圖像中的文字元素，這可能會干擾圖像的視覺效果或專注點。</td></tr><tr><td><code>error</code></td><td>指的是圖像中的錯誤或瑕疵，這可能會降低圖像的品質或可觀賞性。</td></tr><tr><td><code>blurry</code></td><td>指的是圖像模糊或不清晰，這可能會影響圖像的可見度或觀賞體驗。</td></tr><tr><td><code>jpeg artifacts</code></td><td>指的是由於壓縮導致的圖像失真或雜訊，這可能會影響圖像的細節或質量。</td></tr><tr><td><code>cropped</code></td><td>指的是圖像被裁剪過，這可能會使圖像缺乏完整性或導致重要元素缺失。</td></tr><tr><td><code>worst quality</code></td><td>指的是圖像的最差質量，暗示圖像可能存在嚴重的問題或瑕疵。</td></tr><tr><td><code>low quality</code></td><td>指的是圖像的低質量，暗示圖像可能存在一些問題或瑕疵。</td></tr><tr><td><code>normal quality</code></td><td>指的是圖像的正常質量，意味著圖像沒有明顯的問題或瑕疵。</td></tr><tr><td><code>signature</code></td><td>指的是圖像上的簽名，這可能會影響圖像的可觀賞性或專注點。</td></tr><tr><td><code>username</code></td><td>指的是圖像上的使用者名稱，這可能會影響圖像的視覺效果或專注點。</td></tr><tr><td><code>artist name</code></td><td>指的是圖像上的藝術家名稱，這可能會影響圖像的可觀賞性或專注點。</td></tr><tr><td><code>(worst quality, low quality:1.4)</code></td><td>指的是質量最差和低質量的圖像組合，以 <code>1.4</code> 倍的權重表示其質量較差。</td></tr><tr><td><code>bad anatomy</code></td><td>指的是圖像中的人體解剖不正確，這可能會影響圖像的真實感或質量。</td></tr></tbody></table>
              </div>
            </details>

<h2 id="取樣方法-Sampler"><a href="#取樣方法-Sampler" class="headerlink" title="取樣方法 (Sampler)"></a>取樣方法 (Sampler)</h2><p>取樣方法 (Sampler) 是 Stable Diffusion 通過內部的複雜數學及科學計算，從而讓圖像的最終生成結果有顯著的差異。</p>
<p>Stable Diffusion 常見的取樣方法有：</p>
<ul>
<li>DDIM</li>
<li>PNDM (PLMS)</li>
<li>Euler</li>
<li>Euler a</li>
<li>Heun</li>
<li>DPM2</li>
<li>DPM2 a</li>
<li>LMS</li>
<li>DPM++ 2M</li>
<li>DPM++ 2M Karras</li>
<li>DPM++ 2M SDE</li>
<li>DPM++ 2M SDE Karras</li>
<li>DPM++ SDE</li>
<li>LMS Karras</li>
</ul>
<p>我最常用的是 Euler 及 DPM2，但根據圖像而有所變動。</p>
<h2 id="隨機種子-Seed"><a href="#隨機種子-Seed" class="headerlink" title="隨機種子 (Seed)"></a>隨機種子 (Seed)</h2><p>隨機種子 (Seed) 是基於 Stable Diffusion 的擴散過程的生成，而為圖像設立的起始的狀態。種子碼是一個隨機數，<strong>不同的種子碼，都會顯著影響最終圖像生成的結果</strong>，即是說，<strong>如果所予的種子碼相同，便可重現特定圖像</strong>，從而藉咒語附加額外元素。</p>
<h2 id="縮放因子-CFG-scale"><a href="#縮放因子-CFG-scale" class="headerlink" title="縮放因子 (CFG scale)"></a>縮放因子 (CFG scale)</h2><p>縮放因子是對生成的圖像所要求的細節程度，縮放因子愈大，生成的圖像將具有更多咒語中描述關鍵字中的要求，從而愈細緻，而愈小只會生成較簡單的圖像。</p>
<h2 id="降噪強度-Denoising-strength"><a href="#降噪強度-Denoising-strength" class="headerlink" title="降噪強度 (Denoising strength)"></a>降噪強度 (Denoising strength)</h2><p>…</p>
<h2 id="進階操作使用"><a href="#進階操作使用" class="headerlink" title="進階操作使用"></a>進階操作使用</h2><p>雖然 Stable Diffusion 生成的圖像，或會滿足你的心意，但同是或會令你大失所望，主要是可能你所描述的咒語，不足夠概括想要的目的，以致生成的結果與預期不同。這個時候，便可藉著進階操作，嘗試彌補生成後圖像的缺失。</p>
<p>常見的進階操作如下：</p>
<ul>
<li>內補繪製 (Inpaint)：像是 AI 為你修圖，在圖片新增或去除物件。它是透過填充及選取遮罩 (mask) 區域，從而在遮罩部分新增或去除物件。</li>
<li>外補繪製 (Outpaint)</li>
</ul>
<h1 id="推薦使用的圖像生成工具"><a href="#推薦使用的圖像生成工具" class="headerlink" title="推薦使用的圖像生成工具"></a>推薦使用的圖像生成工具</h1><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://playgroundai.com/canvas/files">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Playground AI</div>
            <div class="tag-link-sitename"> 免費使用無限制</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://tensor.art/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">TensorArt</div>
            <div class="tag-link-sitename"> 每天可獲 100 能量點數，一般設定下，每生成一張圖片需要花費 1 點</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://pixai.art/submit">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">PixAI</div>
            <div class="tag-link-sitename"> 每天可獲 10000 點數，一般設定下，每生成一張圖片需要大概花費多於 1000 點</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
  </entry>
  <entry>
    <title>Android 開發入門基礎</title>
    <url>/post/android-dev-basic-tutorial.html</url>
    <content><![CDATA[<p>大家好，歡迎來到閱讀「Android 開發入門基礎」。在這裏，你將會學習 Android 開發的基礎入門知識。</p>
<hr>
<h1 id="基本概要"><a href="#基本概要" class="headerlink" title="基本概要"></a>基本概要</h1><h2 id="什麼是-Android-開發？"><a href="#什麼是-Android-開發？" class="headerlink" title="什麼是 Android 開發？"></a>什麼是 Android 開發？</h2><p>Android 開發是指開發應用程序或系統軟件，以運行在 Android 操作系統上的軟件開發過程。開發人員可以使用 Java、Kotlin 等高階程式語言，使用 Android 的<strong>軟體開發工具包</strong>（Software Development Kit，簡稱：SDK）以及其他開發工具，如 Android Studio 等，來建立 Android 應用程序。</p>
<p>Android 開發包括設計和開發用戶界面、編寫應用邏輯、使用 Android SDK 提供的 API 來實現<strong>功能、測試和調試</strong> (Debug) 應用程序，以及最終將應用程序部署到 Android 設備上。Android 開發人員需要了解 Android 操作系統的基礎知識和 API，以及最佳實踐，以創建優秀的 Android 應用程序如創建各種應用程序，包括遊戲、社交媒體應用程序、商業應用程序、生產力工具、健身和健康應用程序等等。由於 Android 設備的普及和開發彈性，Android 開發成為了一個非常熱門的軟件開發領域。</p>
<h2 id="什麼是-Android-Studio？"><a href="#什麼是-Android-Studio？" class="headerlink" title="什麼是 Android Studio？"></a>什麼是 Android Studio？</h2><p>Android Studio 是一個由 Google 開發的 Android 應用程序開發環境（Integrated Development Environment，簡稱：IDE），它是開發 Android 應用程序的主要工具之一。Android Studio 提供了一個統一的開發環境，可以讓開發人員在同一個地方進行編寫、調試和部署 Android 應用程序。</p>
<p>Android Studio 基於 <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> 開發，並且集成了 Android 開發所需的各種工具和功能，包括：</p>
<ol>
<li>Android SDK 管理器：用於下載和管理 Android SDK。</li>
<li>設計工具：包括布局編輯器，可以幫助開發人員創建用戶界面。</li>
<li>編輯器：提供了代碼編輯、語法高亮、代碼自動完成、代碼重構等功能。</li>
<li>調試器：可以幫助開發人員調試應用程序，包括如虛擬設備、物理設備等多種測試方式。</li>
<li>Gradle 建置系統：用於構建和管理 Android 應用程序的構建過程。</li>
<li>模擬器：可以模擬不同的 Android 設備，方便開發人員進行測試。</li>
</ol>
<h3 id="下載-Android-Studio"><a href="#下載-Android-Studio" class="headerlink" title="下載 Android Studio"></a>下載 Android Studio</h3><p>目前的最新穩定版本是由 2022 年推出的 Android Studio Flamingo。請按自己的電腦配置和需求進行下載。</p>
<div class="note warning simple"><p>目前我還在使用 2021 年推出的 Android Studio Dolphin。</p>
</div>

<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="/%5B%E6%8C%89%E9%88%95%E9%8F%88%E7%B5%90%5D(https:/developer.android.com/studio)">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">下載 Android Studio</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<details class="folding-tag"><summary> 我沒有電腦，沒有 Android Studio 怎麼辦？ </summary>
              <div class="content">
              <p>如果你沒有電腦和 Android Studio，但是你有手機，想接觸並嘗試簡單 Android 開發編程的話，你可以選擇使用以下的 Android 程式：</p><ul><li><a href="https://androidide.com/">AndroidIDE</a>：支援全面的 Gradle 建置系統，提供強大的編輯器功能、終端機及 AAB (Android App Bundle) 支援，可編寫大型的開發程序。</li><li><a href="https://play.google.com/store/apps/details?id=com.tyron.code">CodeAssist</a>：支援基本的函式庫和依賴 (dependencies) 匯入，但沒有完整的 Gradle 建置系統，適合編寫簡單的開發程序。</li><li><a href="https://play.google.com/store/apps/dev?id=4781469509290200915&hl=en_US&gl=US">Sketchware</a>：以拖曳編碼塊為編程的核心開發模式 - Block-based programming，可嵌入自訂 Java 代碼，並支援基本的函式庫和依賴 (dependencies) 匯入，但沒有完整的 Gradle 建置系統，適合編寫簡單的開發程序。</li></ul><div class="note warning simple"><p>但此文章教學主要圍繞 Android Studio 的使用，<strong>部分功能或許在上述提及的 Android 程式未能支援</strong>。</p></div>
              </div>
            </details>

<h2 id="什麼是-Android-SDK？"><a href="#什麼是-Android-SDK？" class="headerlink" title="什麼是 Android SDK？"></a>什麼是 Android SDK？</h2><p>Android SDK（Software Development Kit）是一個由Google提供的軟體開發工具包，開發人員可以使用該工具包來開發 Android 應用程式。 Android SDK 包含一系列的開發工具，例如 Android Studio 集成開發環境（IDE）、Android 調試橋 Debug Bridge（ADB）和 Android Emulator 等，同時也包含一個豐富的 API 庫，開發人員可以使用這些 API 來訪問設備的硬體和軟體功能，例如相機、存儲、網絡連接等。開發人員還可以使用 Android SDK 來創建自己的自定義組件和擴展，以滿足其應用程式的需求。 Android SDK 是Android 應用程式開發的重要工具，使得開發人員可以輕鬆地創建高品質的 Android 應用程式。</p>
<h3 id="安裝-Android-SDK"><a href="#安裝-Android-SDK" class="headerlink" title="安裝 Android SDK"></a>安裝 Android SDK</h3><p>啟動 Android Studio 後，您需要在 “Welcome to Android Studio” 窗口中選擇 “Configure”，然後選擇 “SDK Manager”。在 SDK Manager 中，您可以選擇要下載和安裝的 Android SDK 版本和其他必要的工具。</p>
<p>在 Android Studio 中，選擇 “Start a new Android Studio project”，然後按照向導的指示進行操作。在建立項目的過程中，您可以選擇要使用的 Android SDK 版本。</p>
<h3 id="認識-SDK-版本"><a href="#認識-SDK-版本" class="headerlink" title="認識 SDK 版本"></a>認識 SDK 版本</h3><p>Android SDK 版本是指 Android 操作系統的軟體開發工具包（SDK）的版本號。它確定了開發人員可以使用哪些 API 和功能，以及他們可以在哪些設備上運行應用程序。每個 Android 版本都有一個特定的SDK版本號。例如，Android 11 的SDK 版本號是 <code>30</code>，Android 10 的SDK版本號是 <code>29</code>，以此類推。開發人員在開發 Android 應用程序時需要選擇他們要針對的 SDK 版本，並使用該版本的 API 和功能進行開發。這有助於確保應用程序能夠在特定版本的 Android 操作系統上正常運行。</p>
<details class="folding-tag"><summary> 檢視圖像 </summary>
              <div class="content">
              <div class="note info simple"><p>左面，例如 <code>4.4</code> 是 Android 版本號；<br>接著旁邊的 <code>KitKat</code> 是 Android 版本名稱；<br>右面，例如 <code>19</code> 是 Android SDK 號</p></div><img width="100%" src="/post/android-dev-basic-tutorial/img1.png">
              </div>
            </details>

<hr>
<h1 id="正式開始"><a href="#正式開始" class="headerlink" title="正式開始"></a>正式開始</h1><h2 id="認識-build-gradle-檔案"><a href="#認識-build-gradle-檔案" class="headerlink" title="認識 build.gradle 檔案"></a>認識 <code>build.gradle</code> 檔案</h2><p><code>build.gradle</code> 是一個重要的檔案，它是使用 Gradle 自動化構建系統來構建、編譯和打包 Android 應用程式的腳本 (script) 檔案。一個 Android 項目通常會有多個 <code>build.gradle</code> 檔案，分別位於<strong>根目錄</strong>和<strong>模塊目錄</strong>下。</p>
<p>在<strong>根目錄</strong>下的 <code>build.gradle</code> 檔案用於<strong>配置整個項目的全局設置</strong>，例如 Gradle 版本、Android 插件版本、所有子模塊的共同依賴庫、簽名配置等等。</p>
<p>在每個<strong>模塊目錄</strong>下的 <code>build.gradle</code> 檔案則用於<strong>定義這個模塊的具體設置</strong>，例如應用程式的最小 SDK 版本、目標 SDK 版本、依賴庫、資源檔等等。在這個檔案中還可以定義自定義的 Gradle 任務，按照開發人員的需求來進行自動化處理。</p>
<p>它是 Android 開發中不可或缺的一部分，通過設置這個檔案，開發人員可以對 Android 項目進行高度的自定義和掌控。</p>
<div class="note info simple"><p>根目錄 <code>build.gradle</code> 是在你 Android 項目資料夾內的；而<br>模塊目錄 <code>build.gradle</code> 是在根目錄內的 <code>app</code> 資料夾內的。</p>
<p>以例子來說，假設你的 Android 項目名稱為 “DemoApp”：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">根目錄 build.gradle: DemoApp&#x2F;build.gradle
模塊目錄 build.gradle: DemoApp&#x2F;app&#x2F;build.gradle</code></pre>
</div>

<h3 id="暸解模塊目錄內-build-gradle"><a href="#暸解模塊目錄內-build-gradle" class="headerlink" title="暸解模塊目錄內 build.gradle"></a>暸解模塊目錄內 <code>build.gradle</code></h3><p>在這個基礎教學中，我們不太需要理會根目錄的 <code>build.gradle</code> 裏面的內容是什麼，反而更需要我們去知道的是模塊目錄內的 <code>build.gradle</code>。</p>
<p>當你創建項目後，通常都會自動生成了一個命名 <code>app</code> 的模塊目錄，這個目錄是應用程式的核心，因為它用來存放資源、佈局及功能代碼。</p>
<h4 id="plugins-區塊"><a href="#plugins-區塊" class="headerlink" title="plugins 區塊"></a><code>plugins</code> 區塊</h4><p>打開你的 <code>build.gradle</code>， 你會看到 <code>plugins</code> 區塊中有這樣的代碼：</p>
<pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">plugins &#123;
    id &#39;com.android.application&#39;
&#125;</code></pre>

<p>這個插件 <code>com.android.application</code> 是用來編寫 Android 程式的，如果沒有了這個插件，你的項目就不再被認定為一個 Android 程式項目。</p>
<details class="folding-tag"><summary> 更多資訊 </summary>
              <div class="content">
              <p>若是要編寫 Android 使用的依賴庫 (dependencies)，就要用 <code>com.android.library</code>，這個插件就是用來編寫依賴庫的。</p><div class="note warning simple"><p><code>com.android.application</code> 與 <code>com.android.library</code> 不能共存。</p></div><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">plugins &#123;
    id &#39;com.android.library&#39;
&#125;</code></pre>
              </div>
            </details>

<h4 id="android-區塊"><a href="#android-區塊" class="headerlink" title="android 區塊"></a><code>android</code> 區塊</h4><p>在你的 <code>build.gradle</code>，你大概會看到 <code>android</code> 區塊中有這樣的代碼：</p>
<pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">android &#123;
    namespace &#39;你的套件名稱&#39;
    compileSdk 33

    defaultConfig &#123;
        applicationId &quot;你的套件名稱&quot;
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName &quot;1.0&quot;

        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;
    &#125;

    buildTypes &#123;
        release &#123;
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;
        &#125;
    &#125;
    compileOptions &#123;
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    &#125;
&#125;</code></pre>

<p>有幾項我們需要留意：</p>
<ul>
<li><code>compileSdk</code>：是要編譯的 SDK 版本，這個 <code>compileSdk</code> 只會<strong>與編譯時有關</strong>，例如 Android 推出了新的 API 予最新版本的 SDK <code>33</code> (Android 13)，而我們想把這些功能能在項目上使用，就可以更新。</li>
</ul>
<div class="note info simple"><p>通常最理想的做法就是把 <code>compileSdk</code> 設置到最高版本，因為它不會影響 Android 程式的運作，只會更新編譯的「資料庫」，獲取更多最新的 API，而且可以避免使用了官方已棄用 (deprecated) 的 API。</p>
</div>

<ul>
<li><code>minSdk</code>：是要支援最低的 SDK 版本，這值必然是低於 <code>targetSdk</code> 或 <code>compileSdk</code> 的，當你設置了指定的 <code>minSdk</code> 後，你的應用程式就能兼容指定的最低版本，例如最低版本 <code>minSdk</code> 設置了 <code>23</code>，就代表你的應用程式可以在 Android 6.0 或以上的設備運作。</li>
</ul>
<details class="folding-tag"><summary> 對使用指定 SDK 版本進行判斷 </summary>
              <div class="content">
              <p>雖然設置 <code>minSdk</code> 能在指定的最低版本設備運行應用程式，但這不保證這會在其他程式的執行上出錯，因為始終是 API 兼容問題，可能會發生運行時錯誤 (Runtime error) 和閃退。</p><p>為此，我們可以為 SDK 版本進行判斷，為該 SDK 版本處理最適合的解決方案，從而為用戶獲得最佳使用體驗。</p><p>我們可以用 <code>Build.VERSION.SDK_INT</code> 常量來判斷該設備的 SDK 版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.KITKAT)
public static boolean isAtLeastSDK19() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.KITKAT;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.LOLLIPOP)
public static boolean isAtLeastSDK21() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.LOLLIPOP;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.LOLLIPOP_MR1)
public static boolean isAtLeastSDK22() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.LOLLIPOP_MR1;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.M)
public static boolean isAtLeastSDK23() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.M;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.N)
public static boolean isAtLeastSDK24() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.N;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.N_MR1)
public static boolean isAtLeastSDK25() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.N_MR1;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.O)
public static boolean isAtLeastSDK26() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.O_MR1)
public static boolean isAtLeastSDK27() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O_MR1;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.P)
public static boolean isAtLeastSDK28() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.P;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.Q)
public static boolean isAtLeastSDK29() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.Q;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.R)
public static boolean isAtLeastSDK30() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.R;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.S)
public static boolean isAtLeastSDK31() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.S;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.S_V2)
public static boolean isAtLeastSDK32() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.S_V2;
&#125;

@ChecksSdkIntAtLeast(api &#x3D; Build.VERSION_CODES.TIRAMISU)
public static boolean isAtLeastSDK33() &#123;
    return Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.TIRAMISU;
&#125;</code></pre>
              </div>
            </details>

<ul>
<li><code>targetSdk</code>：是目標支援的 SDK 版本，通常這 <code>targetSdk</code> 的值會跟 <code>compileSdk</code> 的值一樣，</li>
<li><code>versionCode</code>：是 Android 程式的版本號，通常只會在 <code>release</code> 構建方式後發佈至 Play 商店的情況，才會重點更新這個版本號。</li>
<li><code>versionName</code>：是 Android 程式的版本名稱。</li>
</ul>
<details class="folding-tag"><summary> 更多資訊 </summary>
              <div class="content">
              <ul><li><code>compileOptions</code>：有兩個設定 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code>。</li></ul><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">sourceCompatibility JavaVersion.VERSION_1_8
targetCompatibility JavaVersion.VERSION_1_8</code></pre><p>如果你想設置 JDK 11 (Java 11) 版本，就要更改為：<code>JavaVersion.VERSION_11</code></p><div class="note info simple"><p><code>sourceCompatibility</code> 是與編譯環境有關；而<br><code>targetCompatibility</code> 是與運行環境有關，這兩個設的值要一樣。</p></div>
              </div>
            </details>

<h4 id="dependencies-區塊"><a href="#dependencies-區塊" class="headerlink" title="dependencies 區塊"></a><code>dependencies</code> 區塊</h4><p>接著再看 <code>dependencies</code> 區塊，大概會有這樣的代碼：</p>
<pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;
    implementation &#39;androidx.appcompat:appcompat:1.6.1&#39;
    implementation &#39;com.google.android.material:material:1.8.0&#39;
    implementation &#39;androidx.constraintlayout:constraintlayout:2.1.4&#39;

    testImplementation &#39;junit:junit:4.13.2&#39;
    androidTestImplementation &#39;androidx.test.ext:junit:1.1.5&#39;
    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.5.1&#39;
&#125;</code></pre>

<ul>
<li><code>implementation</code>：這表示該依賴關係將被編譯並打包到應用程序中，但不會對應用程序的公共 API 可見。如果您正在開發應用程序，則建議使用此配置來減少應用程序的依賴性，因為這樣可以使應用程序更加輕量級，並且不會將庫的私有 API 暴露給其他開發人員。</li>
</ul>
<details class="folding-tag"><summary> 更多資訊 </summary>
              <div class="content">
              <ul><li><code>compile</code>：這是 Gradle 4.10 及以下版本中使用的關鍵字，它表示該依賴關係將被編譯並打包到應用程序中，並且可以在運行時使用。<strong>（不再建議使用，取而代之的是 <code>implementation</code>）</strong></li><li><code>api</code>：這是 Gradle 4.10 及以上版本中使用的關鍵字，它表示該依賴關係將對應用程序的公共 API 可見，並且會被編譯並打包到應用程序中與該 API 一起分發。如果您正在開發一個庫或模塊，則應使用此配置來公開您的API。</li><li><code>testImplementation</code>：這表示該依賴關係僅用於測試代碼，並且不會在應用程序運行時使用。</li><li><code>androidTestImplementation</code>：這表示該依賴關係僅用於 Android 儀器化測試代碼，並且不會在應用程序運行時使用。</li><li><code>annotationProcessor</code>：這是一個特殊的依賴關係配置，它表示該依賴關係是用於處理注解的。這些依賴關係在編譯時間使用，以生成代碼或其他資源。</li></ul>
              </div>
            </details>

<h2 id="認識-AndroidManifest-xml"><a href="#認識-AndroidManifest-xml" class="headerlink" title="認識 AndroidManifest.xml"></a>認識 <code>AndroidManifest.xml</code></h2><p><code>AndroidManifest.xml</code> 是 Android 應用程式中的一個重要檔案，它描述了應用程式的基本資訊，包括應用程式的套件名稱、版本號、應用程式圖示、應用程式的主要元件（如活動、服務、廣播接收器和內容提供者）以及這些元件與其他應用程式的互動方式等等。Android 系統會在安裝應用程式時解析這個檔案，以了解應用程式的基本資訊和元件，從而為應用程式提供必要的資源和權限。</p>
<p>在 <code>AndroidManifest.xml</code> 檔案中，還可以宣告應用程式需要的權限，以及應用程式在不同的設備上所需要的特定功能和硬體要求（例如相機、加速度計等）。此外，<code>AndroidManifest.xml</code> 檔案還可以定義應用程式的啟動方式和預設配置，以及其他與應用程式相關的元數據。</p>
<p>它提供了應用程式的基本資訊和元件，並為應用程式提供了必要的資源和權限。開發者需要充分理解和正確編寫 <code>AndroidManifest.xml</code> 檔案，以確保應用程式能夠正常運行並與其他應用程式正確互動。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;&gt;

    &lt;application
        android:allowBackup&#x3D;&quot;true&quot;
        android:dataExtractionRules&#x3D;&quot;@xml&#x2F;data_extraction_rules&quot;
        android:fullBackupContent&#x3D;&quot;@xml&#x2F;backup_rules&quot;
        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;
        android:label&#x3D;&quot;@string&#x2F;app_name&quot;
        android:supportsRtl&#x3D;&quot;true&quot;
        android:theme&#x3D;&quot;@style&#x2F;Theme.ChatGPT&quot;
        tools:targetApi&#x3D;&quot;31&quot;&gt;
        &lt;activity
            android:name&#x3D;&quot;MainActivity&quot;
            android:exported&#x3D;&quot;true&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;
                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;
            &lt;&#x2F;intent-filter&gt;

            &lt;meta-data
                android:name&#x3D;&quot;android.app.lib_name&quot;
                android:value&#x3D;&quot;&quot; &#x2F;&gt;
        &lt;&#x2F;activity&gt;
    &lt;&#x2F;application&gt;

&lt;&#x2F;manifest&gt;</code></pre>

<p>在這個 <code>AndroidManifest.xml</code> 檔案內容中，有幾個標示我們要注意：</p>
<ul>
<li><code>application</code>：是設置整個應用程式的設定</li>
</ul>
<div class="note info simple"><p>當中 <code>application</code> 預設有的設定：</p>
<ul>
<li><code>android:icon</code>：是設置應用程式使用的圖標</li>
<li><code>android:label</code>：是設置應用程式的標籤，這個標籤會以應用程式的名稱展示</li>
<li><code>android:theme</code>：是設置應用程式使用的主題配置</li>
</ul>
<details class="folding-tag"><summary> 更多資訊 </summary>
              <div class="content">
              <p>屬性的 <code>android</code> 前綴是來自 <code>manifest</code> 標示定義的，如果沒有了這個聲明，就不能使用 <code>android</code> 前綴的屬性。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</code></pre><p><code>tools:targetApi=&quot;31&quot;</code> 是一個用來指定應用程式所使用的目標 API 版本的屬性，例如這裏是使用 <code>31</code>，即是 Android 12。</p><h3 id="tools-targetApi-與-compileSdk-的分別"><a href="#tools-targetApi-與-compileSdk-的分別" class="headerlink" title="tools:targetApi 與 compileSdk 的分別"></a><code>tools:targetApi</code> 與 <code>compileSdk</code> 的分別</h3><p>其實，<code>tools:targetApi</code> 屬性和 <code>compileSdk</code> 版本在設定上有些微小的不同點，但兩者都是用來指定應用程式所使用的目標 API 版本，以確保應用程式能夠正常運作並使用最新的功能。</p><ol><li><code>tools:targetApi</code> 是在 <code>AndroidManifest.xml</code> 檔案中設定的，在應用程式的清單檔案中直接指定目標 API 版本，而 <code>compileSdk</code> 是在 <code>build.gradle</code> 檔案中設定的，在 Gradle 構建腳本中指定編譯時所使用的 API 版本。</li><li><code>tools:targetApi</code> 主要是用來控制報告非 API 行為所產生的警告，而 <code>compileSdk</code> 則是用來控制編譯時所使用的 API 版本。</li></ol>
              </div>
            </details>
</div>

<ul>
<li><code>activity</code>：是設置這個 <code>Activity</code> 的設定和屬性</li>
<li><code>intent-filter</code>：設置該 <code>Activity</code> 可接收的 <code>Intent</code> 類型</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</code></pre>

<p>定義了活動可以處理的 <code>android.intent.action.MAIN</code> <code>Intent</code>，這個 <code>Intent</code> 通常用於啟動應用程式的主要 UI。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</code></pre>

<p>定義了 <code>Intent</code> 的類別，也就是啟動器（Launcher）。<code>android.intent.category.LAUNCHER</code> 是一個標準的類別，它表示應用程式可以顯示在裝置的啟動器中。</p>
<h2 id="認識-activity-main-xml"><a href="#認識-activity-main-xml" class="headerlink" title="認識 activity_main.xml"></a>認識 <code>activity_main.xml</code></h2><p><code>activity_main.xml</code> 是 <code>res/layout</code> 目錄內的其中一個佈局文件，用於定義主活動（MainActivity）的佈局文件。它使用 XML 格式描述了在應用程序啟動時顯示的用戶界面元素，例如按鈕 <code>Button</code>、文本視圖 <code>TextView</code>、圖片 <code>ImageView</code> 和其他視圖組件。</p>
<p>在 Android 應用程序中，每個活動都需要一個佈局文件，以定義其用戶界面。這些佈局文件通常位於 <code>res/layout</code> 目錄下，並且可以使用 Android Studio 中的佈局編輯器進行視覺化設計。</p>
<p>在 <code>activity_main.xml</code> 中，您可以定義用戶界面元素的佈局、樣式、屬性和行為。這些元素可以使用 Android SDK 提供的預定義視圖組件，也可以使用自定義視圖組件來構建。通過設置元素的屬性和監聽器，您可以為應用程序創建交互式和響應式的用戶體驗。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;
    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;match_parent&quot;
    tools:context&#x3D;&quot;.MainActivity&quot;&gt;

    &lt;TextView
        android:layout_width&#x3D;&quot;wrap_content&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:text&#x3D;&quot;Hello World!&quot;
        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;
        app:layout_constraintEnd_toEndOf&#x3D;&quot;parent&quot;
        app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;
        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;

&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</code></pre>

<p>對於初學而言，<code>ConstraintLayout</code> 的功能比較繁複，我們先暫時學習使用比較簡單的 <code>LinearLayout</code> 學習基本的屬性設定操作，但是，亦歡迎使用 <code>ConstraintLayout</code>，以下是其優點。</p>
<div class="note info simple"><ul>
<li><p>靈活性：<code>ConstraintLayout</code> 允許您使用水平和垂直約束來對視圖進行定位，這使得它可以更靈活地定位和調整視圖位置和大小。</p>
</li>
<li><p>性能：相對於 <code>LinearLayout</code>，<code>ConstraintLayout</code> 可以更好地優化視圖的佈局和繪製，因為它可以減少不必要的視圖層次和計算。</p>
</li>
<li><p>適應性：<code>ConstraintLayout</code> 可以輕鬆地設計適應不同設備屏幕尺寸和方向的用戶界面。</p>
</li>
<li><p>交互性：<code>ConstraintLayout</code> 允許您簡單地添加動畫和過渡效果，以創建更具交互性和吸引力的用戶體驗。</p>
</li>
</ul>
</div>

<p>複製以下代碼並貼到你的項目上：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;
    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;match_parent&quot;
    tools:context&#x3D;&quot;.MainActivity&quot;&gt;

    &lt;TextView
        android:layout_width&#x3D;&quot;wrap_content&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:text&#x3D;&quot;Hello World!&quot; &#x2F;&gt;

&lt;&#x2F;LinearLayout&gt;</code></pre>

<h3 id="組件元素"><a href="#組件元素" class="headerlink" title="組件元素"></a>組件元素</h3><p><code>LinearLayout</code> 是一種 Android 布局 (layout) ，用於在屏幕上將視圖 (views) 水平或垂直排列。LinearLayout 將其子視圖 (views) 放置在一個線性方向上，可以是水平方向 (horizontal) 或垂直方向 (vertical)。它可以通過設置重量 (weight) 屬性來控制子視圖在佔用空間方面的比例。<code>LinearLayout</code> 是 Android 中最基本的布局之一，可以在設計 Android 應用程序時使用。</p>
<div class="note warning simple"><p>每個組件都一定要這兩個屬性！</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:layout_width&#x3D;&quot;...&quot;
android:layout_height&#x3D;&quot;...&quot;</code></pre></div>

<div class="note info simple"><p>LinearLayout 的 <code>orientation</code> 是用來設定佈局線性方向，如果你沒有特定設置，預設會是水平方向 (horizontal)。</p>
<p>所以，如果你要這個佈局是垂直方向 (vertical)，就要為 <code>LinearLayout</code> 設定：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">android:orientation&#x3D;&quot;vertical&quot;</code></pre>
</div>

<h4 id="layout-width-和-layout-height"><a href="#layout-width-和-layout-height" class="headerlink" title="layout_width 和 layout_height"></a><code>layout_width</code> 和 <code>layout_height</code></h4><p>顧名思義，<code>layout_width</code> 就是設定視圖的寬度，而 <code>layout_height</code> 則設定其高度，這兩個屬性接受的值類型是：</p>
<ul>
<li><code>wrap_content</code>：<code>wrap_content</code> 是一種 Android 布局 (layout) 屬性，用於將視圖 (views) 的大小設置為其內容所需的最小大小。當視圖的寬度或高度設置為 <code>wrap_content</code> 時，該視圖將根據其內容的大小自動調整大小，以便能夠完整顯示其內容。</li>
</ul>
<div class="note info simple"><p>例如，如果一個 <code>TextView</code> 的寬度設置為 <code>wrap_content</code>，那麼該 <code>TextView</code> 的寬度會根據其文本的長度自動調整大小，以便能夠完整顯示其文本內容。使用 <code>wrap_content</code> 屬性可以使視圖的大小根據其內容自動調整，從而避免了視圖過大或過小的問題，同時也可以提高應用程序的性能和效率。</p>
</div>

<ul>
<li><code>match_parent</code>：<code>match_parent</code> 是一種 Android 布局 (layout) 屬性，用於將視圖 (views) 的大小設置為其父視圖 (parent view) 的大小。它會將視圖的寬度或高度設置為與其父視圖相同的大小，具體取決於視圖在布局中的位置。</li>
</ul>
<div class="note info simple"><p>例如，如果一個視圖的寬度設置為 <code>match_parent</code>，那麼該視圖的寬度會填滿其父視圖的整個寬度，而不管父視圖的大小是多少。同樣，如果一個視圖的高度設置為 <code>match_parent</code>，那麼該視圖的高度會填滿其父視圖的整個高度。使用 <code>match_parent</code> 屬性可以讓視圖的大小根據其父視圖的大小自動調整，從而使應用程序的界面更加靈活和可擴展。</p>
</div>

<ul>
<li><code>dp</code> 值：dp (density-independent pixel) 是一種 Android 像素 (pixel) 單位，被用於定義應用程式中的元素尺寸和距離，以使這些元素在不同的設備上顯示相同的大小和比例。dp 是一種相對於屏幕密度的單位，因此不同密度的設備上，dp 會有不同的實際像素值。在 Android 中，不同的設備有不同的屏幕密度，因此使用像素作為尺寸和距離的單位會導致在不同設備上顯示的元素大小和比例不同。為了解決這個問題，Android 引入了 dp 單位，以便在不同密度的屏幕上顯示相同大小的元素。通常，Android 的設計指南建議使用 dp 來定義應用程式中的元素尺寸和距離，以確保在不同的設備上顯示一致的外觀和感覺。</li>
</ul>
<h2 id="建構第一個-“Hello-World”-程式"><a href="#建構第一個-“Hello-World”-程式" class="headerlink" title="建構第一個 “Hello World” 程式"></a>建構第一個 “Hello World” 程式</h2><p>我們這個 Hello World 程式不會複雜，只要做好以上說的配置，就可以開始寫佈局及邏輯。</p>
<h3 id="程式語言釐清"><a href="#程式語言釐清" class="headerlink" title="程式語言釐清"></a>程式語言釐清</h3><ul>
<li>XML：是用於編寫程式的可視化佈局，就是程式的最終外觀及排版。</li>
<li>Java：是用於編寫程式的業務邏輯。</li>
</ul>
<h3 id="程式釐清及設計"><a href="#程式釐清及設計" class="headerlink" title="程式釐清及設計"></a>程式釐清及設計</h3><p>這個 Hello World 程式將會有一個按鈕，當點擊該按鈕，便會彈出 Toast 訊息：”Hello World”。</p>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="為佈局加入按鈕"><a href="#為佈局加入按鈕" class="headerlink" title="為佈局加入按鈕"></a>為佈局加入按鈕</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;Button
    android:id&#x3D;&quot;@+id&#x2F;button1&quot;
    android:layout_width&#x3D;&quot;wrap_content&quot;
    android:layout_height&#x3D;&quot;wrap_content&quot;
    android:text&#x3D;&quot;Click me&quot; &#x2F;&gt;</code></pre>

<p>其中：</p>
<ul>
<li><code>android:id</code> 是用於宣告組件的可識別碼 (ID)，進而能在往後編寫業務邏輯，宣告 ID 必須要加上 <code>@+id/</code> 前綴。</li>
<li><code>android:text</code> 是設置按鈕顯示的文字</li>
</ul>
<h4 id="為按照加入點擊事件"><a href="#為按照加入點擊事件" class="headerlink" title="為按照加入點擊事件"></a>為按照加入點擊事件</h4><p>現在，你的 <code>MainActivity.java</code> 應該是這個樣子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MainActivity extends AppCompatActivity &#123;

    @Override
    protected void onCreate(Bundle savedInstanceState) &#123;
        super.onCreate();
        setContentView(R.layout.activity_main);

        &#x2F;&#x2F; ...
    &#125;

&#125;</code></pre>

<p>首先。我們必須要獲取 <code>button1</code> 按鈕的視圖。在 <code>...</code> 下方加上代碼。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">Button button1 &#x3D; (Button) findViewById(R.id.button1);</code></pre>

<p>其中：</p>
<ul>
<li><code>Button</code>：需要匯入套件 <code>android.widget.Button</code></li>
<li><code>(Button)</code>：是用於轉型別為 <code>Button</code> 類， <strong>通常都不需要加上 <code>(Button)</code></strong> 除非你在用一個，例 <code>MyCustomButton</code> 繼承了 <code>Button</code>，但想用 <code>Button</code> 獲取，就要轉型 (cast)<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyCustomButton extends Button &#123;
  &#x2F;&#x2F; ...
&#125;</code></pre></li>
<li><code>findViewById()</code>：是用於獲取視圖，例如現在要獲取 XML 佈局的 <code>button1</code> 按鈕，就會用 <code>findViewById(R.id.button1)</code>，要獲取視圖，需要 <code>R.id.</code> 前綴。</li>
</ul>
<p>獲取視圖後就可以寫點擊事件，彈出 Toast 訊息。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">button1.setOnClickListener(new View.OnClickListener() &#123;
    @Override
    public void onClick(View view) &#123;
        Toast.makeText(MainActivity.this, &quot;Hello World&quot;, Toast.LENGTH_SHORT).show();
    &#125;
&#125;);</code></pre>

<p>其中：</p>
<ul>
<li><code>setOnClickListener()</code>：設置按鈕的點擊監聽事件</li>
<li><code>Toast</code>：彈出訊息<ul>
<li><code>makeText()</code>：配合 <code>Toast</code> 使用的，用於設置彈出訊息的組態，當中有 3 個參數：<ul>
<li><code>MainActivity.this</code> 是目前的 <code>Context</code></li>
<li><code>&quot;Hello World&quot;</code> 是彈出訊息內容</li>
<li><code>Toast.LENGTH_SHORT</code> 是設置彈出的持續時間短暫，反之 <code>Toast.LENGTH_LONG</code> 就較長。</li>
</ul>
</li>
<li><code>show()</code>：用以彈出訊息</li>
</ul>
</li>
</ul>
<p>那就寫好了 Hello World 程式。</p>
<p>基本知識就說到這，重要是多看官方文案。</p>
]]></content>
      <categories>
        <category>程式編寫</category>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>XML</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Android CI 開源程式流程部署</title>
    <url>/post/android-dev-github-workflow-android-ci.html</url>
    <content><![CDATA[<p>大家好，有沒有想過在開源 Android 程式的時候，除了想開放源代碼供開發人員檢視，都想讓他們先睹為快，率先透過調試 (debug) 試用這個 Android 程式，再考慮進入發佈 (release) 階段。</p>
<p><font size="6"><strong>但原來，是真的可以做到，而且做法很簡單！</strong></font></p>
<p>我們會透過使用 Github 官方所開發的「工作流程系統」（即是 Workflow ）進行相關操作。</p>
<h1 id="什麼是-Github-Workflow？"><a href="#什麼是-Github-Workflow？" class="headerlink" title="什麼是 Github Workflow？"></a>什麼是 Github Workflow？</h1><p>GitHub Workflow 是一種<strong>自動化的工作流程</strong>，用於在 GitHub 上<strong>管理和執行代碼庫中的操作</strong>。它是基於 <strong>YAML 文件</strong>的，可以讓你定義一系列動作，例如<strong>構建、測試、發布、部署</strong>等等，以便在代碼庫中進行<strong>更高效的協作和開發</strong>。</p>
<p>可以在代碼庫中的不同事件發生時觸發，例如當代碼被推送到庫中、當 pull request 被打開或合併、當 issue 被關閉等等。當事件觸發時，GitHub workflow 會根據你定義的 YAML 文件中的步驟來執行相應的操作。這些步驟可以包括執行腳本、安裝依賴項、編譯代碼、運行測試、發布版本等等。</p>
<h1 id="加入-Actions-整合配置"><a href="#加入-Actions-整合配置" class="headerlink" title="加入 Actions 整合配置"></a>加入 Actions 整合配置</h1><div class="note warning simple"><p>要執行 Actions 和 Workflow 之前，你需要把你的 Android 項目上載到 Github，可以看看以下文章瀏覽相關做法：</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="/post/android_dev_push_project_to_github">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">看文章：如何把 Android Studio 項目上載至 GitHub</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
</div>

<p>在你的 Repository，點擊 Actions 分頁，會大概有這樣的界面：</p>
<p><img src="/post/android-dev-github-workflow-android-ci/img1.png" alt="img1"></p>
<p>它會要你選擇一個工作流程體系，而我們這回要做的是 Android 程式開發調試，所以我們會選擇使用「Android CI」。</p>
<p>決定好就按 Configure 會有這樣的模版代碼：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">name: Android CI

on:
  push:
    branches: [ &quot;master&quot; ]
  pull_request:
    branches: [ &quot;master&quot; ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions&#x2F;checkout@v3
    - name: set up JDK 11
      uses: actions&#x2F;setup-java@v3
      with:
        java-version: &#39;11&#39;
        distribution: &#39;temurin&#39;
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: .&#x2F;gradlew build</code></pre>
<p>我們暫不會深究當中代碼的意義。</p>
<details class="folding-tag"><summary> 簡單講解整個運作 </summary>
              <div class="content">
              <div class="note info simple"><p>當代碼被 push 到 master 分支時，GitHub workflow 會自動觸發，並執行 <code>jobs</code> 中的步驟。同時，當一個 pull request 被打開或合併到 master 分支時，GitHub workflow 也會自動觸發並執行相應的步驟。</p><p>在這個範例中，只有一個 job，名為 <code>build</code>，它運行在 ubuntu-latest 的環境中。當 GitHub workflow 被觸發時，GitHub 會先 checkout 代碼庫，然後設置 JDK 11，並為 Gradle 緩存依賴項。接著，GitHub workflow 會授予 <code>gradlew</code> 執行權限，最後使用 Gradle 來構建代碼庫。</p></div>
              </div>
            </details>

<h1 id="做到了，然後呢？"><a href="#做到了，然後呢？" class="headerlink" title="做到了，然後呢？"></a>做到了，然後呢？</h1><p>如果成功了，你會發現你 commit push 更新檔案的話，就會開始工作流程，但是…</p>
<p><img src="/post/android-dev-github-workflow-android-ci/img2.png" alt="img2"></p>
<p><font size="5"><strong>所說的調試使用呢？</strong></font><font size="6"><strong>在哪？</strong></font></p>
<p>原來，Android CI 預設的模板代碼是不提供這功能，但我們可以修改代碼附加額外的操作。</p>
<p>只要在 <code>jobs</code> &gt; <code>build</code> 部分加上代碼就可以了：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">- name: Upload artifact
  uses: actions&#x2F;upload-artifact@v3
  if: $&#123;&#123; !github.head_ref &#125;&#125;
  with:
    name: apk-debug
    path: app&#x2F;build&#x2F;outputs&#x2F;apk&#x2F;debug&#x2F;app-debug.apk</code></pre>

<p>現在你點擊個別流程，就會看到新加入的 Artifacts 部分，只要點擊那個 apk-debug 的文字就可以下載調試版的 Android 程式。</p>
<p><img src="/post/android-dev-github-workflow-android-ci/img3.png" alt="img3"></p>
<h1 id="完整-android-yml-代碼"><a href="#完整-android-yml-代碼" class="headerlink" title="完整 android.yml 代碼"></a>完整 <code>android.yml</code> 代碼</h1><p>啊！！！很複雜，不知道在說什麼，只想要代碼，對不？</p>
<p>複製貼上就可以了！</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">name: Android CI

on:
  push:
    branches: [ &quot;master&quot; ]
  pull_request:
    branches: [ &quot;master&quot; ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions&#x2F;checkout@v3
    - name: set up JDK 11
      uses: actions&#x2F;setup-java@v3
      with:
        java-version: &#39;11&#39;
        distribution: &#39;temurin&#39;
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: .&#x2F;gradlew build
      
    - name: Upload artifact
      uses: actions&#x2F;upload-artifact@v3
      if: $&#123;&#123; !github.head_ref &#125;&#125;
      with:
        name: apk-debug
        path: app&#x2F;build&#x2F;outputs&#x2F;apk&#x2F;debug&#x2F;app-debug.apk</code></pre>

<div class="note warning simple"><p>在編寫 Android CI 的 YAML 代碼時要注意縮進 (Indentation)，不然會報錯：</p>
<pre class="line-numbers language-none"><code class="language-none">bad indentation of a mapping entry</code></pre></div>

<h1 id="細項注意"><a href="#細項注意" class="headerlink" title="細項注意"></a>細項注意</h1><p>在使用 Android CI 的時候要留意配置和建構 Gradle 時的問題</p>
<p>例如我在 Java 代碼有這句：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">return Color.rgb(r, g, b);</code></pre>

<div class="note info simple"><p><code>Color</code> 是 SDK 26 新增的，而當前的 SDK 23 不支持這類。</p>
</div>

<p>你可能在 Android Studio 仍然可以順利編譯並執行，但是如果是 Github Android CI，會在執行 <code>Build with Gradle</code> 的時候報錯：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: Call requires API level 26 (current min is 23): android.graphics.Color#rgb [NewApi]</code></pre>

<p>這個情況，要留意處理 SDK 的相容方案。</p>
<div class="note warning simple"><p>所以務必先處理好 Android Studio 提示的警告 (warning) 或其他報錯再 commit。</p>
</div>]]></content>
      <categories>
        <category>程式編寫</category>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>編寫 OpenAIUtils 輕鬆使用 OpenAI API</title>
    <url>/post/android-dev-openai-utils.html</url>
    <content><![CDATA[<p>大家好，歡迎閱讀本篇文章：「編寫 <code>OpenAIUtils</code> 實用程式類」。今天會說一下如何編寫一個實用程式 (Utils)，進行往後簡易使用 OpenAI 所提供的 API (全稱：Application Programming Interface) 來實現和開發相關的另類學習程式。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://openai.com/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">OpenAI 官網</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<hr>
<h1 id="準備工作"><a href="#準備工作" class="headerlink" title="準備工作"></a>準備工作</h1><p>在急不及待編寫程式之前，我們需要準備一些東西。</p>
<h2 id="要求執行網絡作業"><a href="#要求執行網絡作業" class="headerlink" title="要求執行網絡作業"></a>要求執行網絡作業</h2><p>因為我們即將要使用 OpenAI 所提供的 API，而使用 API 的前提是，我們需要<strong>連線網絡的許可權</strong>，在 Android 開發中，我們可以在 <code>AndroidManifest.xml</code> 設置相關權限。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;
&lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot; &#x2F;&gt;</code></pre>

<h3 id="INTERNET-與-ACCESS-NETWORK-STATE-分別"><a href="#INTERNET-與-ACCESS-NETWORK-STATE-分別" class="headerlink" title="INTERNET 與 ACCESS_NETWORK_STATE 分別"></a><code>INTERNET</code> 與 <code>ACCESS_NETWORK_STATE</code> 分別</h3><ul>
<li><code>INTERNET</code>: 為應用程式啟用網絡插槽 (Network Socket)，簡而言之就是用於連接網絡。</li>
<li><code>ACCESS_NETWORK_STATE</code>: 為應用程式執行相關網絡作業，如經網絡獲取資訊等。</li>
</ul>
<p>實際上，在絕大多數的情況下，只需要啟用 <code>INTERNET</code> 權限便可以。</p>
<div class="note info simple"><p><code>INTERNET</code> 和 <code>ACCESS_NETWORK_STATE</code> 權限都是一般權限，代表系統會在安裝時授予權限，因此不需要在執行階段請求授予。</p>
</div>

<h3 id="判斷已經連線網絡"><a href="#判斷已經連線網絡" class="headerlink" title="判斷已經連線網絡"></a>判斷已經連線網絡</h3><p>因為我們即將寫的程式，基本上其處理和輸出是依賴網絡的，如果你想判斷目前該設備是否已經啟用網絡，可以編寫一個簡單的模塊，例傳回布爾值的 <code>isNetworkAvailable()</code>。</p>
<details class="folding-tag"><summary> 檢視代碼: <code>isNetworkAvailable()</code> </summary>
              <div class="content">
              <pre class="line-numbers language-java" data-language="java"><code class="language-java">import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

private boolean isNetworkAvailable(Context context) &#123;
    ConnectivityManager connectivityManager &#x3D; (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);

    if (connectivityManager !&#x3D; null) &#123;
        NetworkInfo activeNetwork &#x3D; connectivityManager.getActiveNetworkInfo();
        return (activeNetwork !&#x3D; null &amp;&amp; activeNetwork.isConnectedOrConnecting());
    &#125; else return false;
&#125;</code></pre>
              </div>
            </details>

<h2 id="匯入-Okhttp-依賴"><a href="#匯入-Okhttp-依賴" class="headerlink" title="匯入 Okhttp 依賴"></a>匯入 Okhttp 依賴</h2><p>什麼是依賴 (Dependency) ？，其實就是相當於函式庫 (Library)，我們可以在 <code>build.gradle</code> 文件中手動匯入依賴。</p>
<div class="note info simple"><p>這個 <code>build.gradle</code> 檔案是 <code>app/</code> 目錄那一個，你會找到有 <code>dependencies</code> 那部分，就是加入依賴的。</p>
</div>

<pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">implementation &#39;com.squareup.okhttp3:okhttp:4.10.0&#39;</code></pre>

<h3 id="什麼是-Okhttp？"><a href="#什麼是-Okhttp？" class="headerlink" title="什麼是 Okhttp？"></a>什麼是 Okhttp？</h3><p>Okhttp 是一個用於<strong>處理網絡請求的框架</strong>，在較早之前。我們是用 <a href="https://google.github.io/volley/">Volley</a> 的，這個函式庫是由 Google 開發的，但值得留意的是，Volley 是用 <code>HttpClient</code> 的，而這個類在 <strong>Android 6.0 (SDK 23) 起不再支援</strong>，而使得 Volley 鮮少再被使用，現在的替代品就是 Okhttp。</p>
<hr>
<h1 id="程式實現"><a href="#程式實現" class="headerlink" title="程式實現"></a>程式實現</h1><p>完成好準備作業後，就可以編寫代碼。</p>
<h2 id="建立-OpenAIUtils-類"><a href="#建立-OpenAIUtils-類" class="headerlink" title="建立 OpenAIUtils 類"></a>建立 OpenAIUtils 類</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class OpenAIUtils &#123;

&#125;</code></pre>

<h3 id="Okhttp-初始化程序"><a href="#Okhttp-初始化程序" class="headerlink" title="Okhttp 初始化程序"></a>Okhttp 初始化程序</h3><p>聲明 <code>OkHttpClient</code> 類的變量 <code>client</code>，用於稍後初始化。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">private OkHttpClient client;</code></pre>

<h4 id="構建-OpenAIUtils"><a href="#構建-OpenAIUtils" class="headerlink" title="構建 OpenAIUtils"></a>構建 <code>OpenAIUtils</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">public OpenAIUtils() &#123;
    
&#125;</code></pre>

<h5 id="設置逾時作業"><a href="#設置逾時作業" class="headerlink" title="設置逾時作業"></a>設置逾時作業</h5><p>由於 OpenAI 的請求會有<strong>可能超出預設的逾時</strong>，<strong>導致因為逾時而未能得到完整的請求</strong>，因此我們需要處理逾時作業。</p>
<p>我們會用這三個設定：<code>readTimeout</code>、<code>writeTimeout</code> 及 <code>connectTimeout</code>。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">private long readTimeout, writeTimeout, connectTimeout;</code></pre>

<h5 id="編寫存取子與變異子"><a href="#編寫存取子與變異子" class="headerlink" title="編寫存取子與變異子"></a>編寫存取子與變異子</h5><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>存取子</span></div><code class="language-java">public long getReadTimeout() &#123; return readTimeout; &#125;
public long getWriteTimeout() &#123; return writeTimeout; &#125;
public long getConnectTimeout() &#123; return connectTimeout; &#125;</code></pre>

<pre class="line-numbers language-java" data-language="java"><div class="caption"><span>變異子</span></div><code class="language-java">public void setReadTimeout() &#123; this.readTimeout &#x3D; readTimeout; &#125;
public void setWriteTimeout() &#123; this.writeTimeout &#x3D; writeTimeout; &#125;
public void setConnectTimeout() &#123; this.connectTimeout &#x3D; connectTimeout; &#125;</code></pre>

<h5 id="為-client-設置逾時"><a href="#為-client-設置逾時" class="headerlink" title="為 client 設置逾時"></a>為 <code>client</code> 設置逾時</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">client &#x3D; new OkHttpClient.Builder()
        .connectTimeout(connectTimeout, TimeUnit.SECONDS)
        .readTimeout(readTimeout, TimeUnit.SECONDS)
        .writeTimeout(writeTimeout, TimeUnit.SECONDS)
        .build();</code></pre>

<h3 id="OpenAI-參數設定"><a href="#OpenAI-參數設定" class="headerlink" title="OpenAI 參數設定"></a>OpenAI 參數設定</h3><p>OpenAI 提供的 API 的參數設定 (Parameter)，常用的有：</p>
<ol>
<li><code>model</code>: 要應用的 AI 模型。</li>
<li><code>prompt</code>: 要輸入的文本。</li>
<li><code>max_tokens</code>: 可支援的最大 Token 數目。</li>
<li><code>temperature</code>: 生成文本的多樣性、創造性。</li>
</ol>
<h4 id="聲明變量"><a href="#聲明變量" class="headerlink" title="聲明變量"></a>聲明變量</h4><p>稍後我們會編寫存取子與變異子 (Getter &amp; Setter)，所以我們要先定義全域變量。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">private double maxTokens,
               temperature;

private String apiKey,
               apiUrl,
               model,
               prompt;</code></pre>

<h4 id="編寫存取子與變異子-1"><a href="#編寫存取子與變異子-1" class="headerlink" title="編寫存取子與變異子"></a>編寫存取子與變異子</h4><pre class="line-numbers language-java" data-language="java"><div class="caption"><span>存取子</span></div><code class="language-java">public double getMaxTokens() &#123; return maxTokens; &#125;
public double getTemperature() &#123; return temperature; &#125;

public String getAPIKey() &#123; return apiKey; &#125;
public String getAPIUrl() &#123; return apiUrl; &#125;
public String getModel() &#123; return model; &#125;
public String getPrompt() &#123; return prompt; &#125;</code></pre>

<pre class="line-numbers language-java" data-language="java"><div class="caption"><span>變異子</span></div><code class="language-java">public void setMaxTokens(double maxTokens) &#123; this.maxTokens &#x3D; maxTokens; &#125;
public void setTemperature(double temperature) &#123; this.temperature &#x3D; temperature; &#125;

public void setAPIUrl(String apiUrl) &#123; this.apiUrl &#x3D; apiUrl; &#125;
public void setAPIKey(String apiKey) &#123; this.apiKey &#x3D; apiKey; &#125;
public void setModel(String model) &#123; this.model &#x3D; model; &#125;
public void setPrompt(String prompt) &#123; this.prompt &#x3D; prompt; &#125;</code></pre>

<h4 id="設置參數"><a href="#設置參數" class="headerlink" title="設置參數"></a>設置參數</h4><h5 id="使用哪一個模型？"><a href="#使用哪一個模型？" class="headerlink" title="使用哪一個模型？"></a>使用哪一個模型？</h5><p>現今 OpenAI 強大的模型有兩個：</p>
<ol>
<li><code>text-davinci-003</code>: 一個簡單的自動補全的模型，不建議用於聊天對話。</li>
<li><code>gpt-3.5-turbo</code>: GPT 3.5 模型，ChatGPT 現時在使用的模型，尤其是如果要與機器人進行聊天對話，保留持續的對話脈絡或上下文 (Context)，就可以用這個模型，因為這模型是接受一系列的訊息作為 Prompt 的傳遞。</li>
</ol>
<p>在 <a href="https://platform.openai.com/docs/api-reference/completions/create?lang=node.js">OpenAI 官方開發文案</a> 所見，我們需要設置參數，當中 <code>model</code> 和 <code>prompt</code> 是必要的參數。</p>
<h6 id="text-davinci-003-參數設定"><a href="#text-davinci-003-參數設定" class="headerlink" title="text-davinci-003 參數設定"></a><code>text-davinci-003</code> 參數設定</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">const response &#x3D; await openai.createCompletion(&#123;
    model: &quot;text-davinci-003&quot;,
    prompt: &quot;Say this is a test&quot;,
    max_tokens: 7,
    temperature: 0,
&#125;);</code></pre>

<p>即是我們需要編寫以下編碼，用以為 <code>text-davinci-003</code> 設置參數。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public JSONObject getSettings() throws JSONException &#123;
    JSONObject json &#x3D; new JSONObject();

    json.put(&quot;model&quot;, model);
    json.put(&quot;prompt&quot;, prompt);
    json.put(&quot;temperature&quot;, temperature);
    json.put(&quot;max_tokens&quot;, maxTokens);

    return json;
&#125;</code></pre>

<h6 id="gpt-3-5-turbo-參數設定"><a href="#gpt-3-5-turbo-參數設定" class="headerlink" title="gpt-3.5-turbo 參數設定"></a><code>gpt-3.5-turbo</code> 參數設定</h6><p><code>gpt-3.5-turbo</code> 的參數設定有些不同，特別是 <code>prompt</code>，在 GPT 3.5 模型中，<code>prompt</code> 已被 <code>messages</code> 取代了，但是 <code>messages</code> 的值是陣列 (Array)：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">const completion &#x3D; await openai.createChatCompletion(&#123;
    model: &quot;gpt-3.5-turbo&quot;,
    messages: [&#123;role: &quot;user&quot;, content: &quot;Hello world&quot;&#125;],
&#125;);</code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">public JSONObject getSettings() throws JSONException &#123;
    JSONObject json &#x3D; new JSONObject();
    JSONArray jsonArray &#x3D; new JSONArray();
    JSONObject jsonMessageObj &#x3D; new JSONObject();

    jsonMessageObj.put(&quot;role&quot;, &quot;user&quot;);
    jsonMessageObj.put(&quot;content&quot;, prompt);
    jsonArray.put(jsonMessageObj);

    json.put(&quot;model&quot;, model);
    json.put(&quot;messages&quot;, jsonArray);
    json.put(&quot;temperature&quot;, temperature);
    json.put(&quot;max_tokens&quot;, maxTokens);

    return json;
&#125;</code></pre>

<h3 id="OpenAI-創建請求"><a href="#OpenAI-創建請求" class="headerlink" title="OpenAI 創建請求"></a>OpenAI 創建請求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">const configuration &#x3D; new Configuration(&#123;
    apiKey: process.env.OPENAI_API_KEY,
&#125;);</code></pre>

<p>我們要編寫的代碼如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">private MediaType mediaType &#x3D; MediaType.parse(&quot;application&#x2F;json; charset&#x3D;utf-8&quot;);

public void generateResponse(Callback callback) throws JSONException &#123;
    JSONObject json &#x3D; getSettings();
    Request request &#x3D; new Request.Builder()
            .url(apiUrl)
            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + apiKey)
            .header(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;)
            .post(RequestBody.create(json.toString(), mediaType))
            .build();
    client.newCall(request).enqueue(callback);
&#125;</code></pre>

<h3 id="OpenAI-獲取回應"><a href="#OpenAI-獲取回應" class="headerlink" title="OpenAI 獲取回應"></a>OpenAI 獲取回應</h3><h4 id="text-davinci-003-回應輸出"><a href="#text-davinci-003-回應輸出" class="headerlink" title="text-davinci-003 回應輸出"></a><code>text-davinci-003</code> 回應輸出</h4><pre class="line-numbers language-json" data-language="json"><div class="caption"><span><code>text-davinci-003</code> 回應輸出 (部分經省略)</span></div><code class="language-json">&#123;
    ...
    &quot;object&quot;: &quot;text_completion&quot;,
    &quot;model&quot;: &quot;text-davinci-003&quot;,
    &quot;choices&quot;: [
        &#123;
        &quot;text&quot;: &quot;\n\nThis is indeed a test&quot;,
        &quot;index&quot;: 0,
        &quot;logprobs&quot;: null,
        &quot;finish_reason&quot;: &quot;length&quot;
        &#125;
    ],
    ...
&#125;</code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getResponse(String responseBody) throws JSONException &#123;
    String resultText &#x3D; null;
    JSONObject jsonObject &#x3D; new JSONObject(responseBody);
    JSONArray jsonArray &#x3D; jsonObject.getJSONArray(&quot;choices&quot;);

    resultText &#x3D; jsonArray.getJSONObject(0).getString(&quot;text&quot;);
    resultText.trim();

    return resultText;
&#125;</code></pre>

<h4 id="gpt-3-5-turbo-回應輸出"><a href="#gpt-3-5-turbo-回應輸出" class="headerlink" title="gpt-3.5-turbo 回應輸出"></a><code>gpt-3.5-turbo</code> 回應輸出</h4><pre class="line-numbers language-json" data-language="json"><div class="caption"><span><code>gpt-3.5-turbo</code> 回應輸出 (部分經省略)</span></div><code class="language-json">&#123;
    ...
    &quot;object&quot;: &quot;chat.completion&quot;,
    &quot;choices&quot;: [&#123;
        &quot;index&quot;: 0,
        &quot;message&quot;: &#123;
        &quot;role&quot;: &quot;assistant&quot;,
        &quot;content&quot;: &quot;\n\nHello there, how may I assist you today?&quot;,
        &#125;,
        &quot;finish_reason&quot;: &quot;stop&quot;
    &#125;],
    ...
&#125;</code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getResponse(String responseBody) throws JSONException &#123;
    String resultText &#x3D; null;
    JSONObject jsonObject &#x3D; new JSONObject(responseBody);
    JSONArray jsonArray &#x3D; jsonObject.getJSONArray(&quot;choices&quot;);
    JSONObject jsonMessageObj &#x3D; jsonArray.getJSONObject(0).getJSONObject(&quot;message&quot;);

    resultText &#x3D; jsonMessageObj.getString(&quot;content&quot;);
    resultText.trim();

    return resultText;
&#125;</code></pre>

<h3 id="OpenAI-獲取報錯訊息"><a href="#OpenAI-獲取報錯訊息" class="headerlink" title="OpenAI 獲取報錯訊息"></a>OpenAI 獲取報錯訊息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getErrorResponse(String responseBody) throws JSONException &#123;
    JSONObject jsonObject &#x3D; new JSONObject(responseBody);
    JSONObject errorObj &#x3D; jsonObject.getJSONObject(&quot;error&quot;);
    String resultText &#x3D; errorObj.getString(&quot;message&quot;);
    return resultText;
&#125;</code></pre>

<h2 id="實戰應用-OpenAIUtils"><a href="#實戰應用-OpenAIUtils" class="headerlink" title="實戰應用 OpenAIUtils"></a>實戰應用 <code>OpenAIUtils</code></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">private OpenAIUtils client;</code></pre>

<h3 id="設置-OpenAIUtils"><a href="#設置-OpenAIUtils" class="headerlink" title="設置 OpenAIUtils"></a>設置 <code>OpenAIUtils</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">client &#x3D; new OpenAIUtils();
client.setAPIKey(apiKey);
client.setAPIUrl(apiUrl);
client.setModel(model);
client.setTemperature(temperature);
client.setMaxTokens(maxTokens);</code></pre>

<p>你可能會問，那 <code>setPrompt()</code> 呢？我們會在另一個區塊設置。</p>
<h3 id="發送請求"><a href="#發送請求" class="headerlink" title="發送請求"></a>發送請求</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private void sendRequest(String prompt) &#123;
    try &#123;
        client.setPrompt(prompt);
        client.generateResponse(new Callback() &#123;
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) &#123;
                &#x2F;&#x2F; 顯示報錯訊息
            &#125;
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException &#123;
                String responseBody &#x3D; response.body().string();
                try &#123;
                    &#x2F;&#x2F; 獲取回應結果
                &#125; catch (Exception e) &#123;
                    &#x2F;&#x2F; 顯示報錯訊息
                &#125;
            &#125;
        &#125;);
    &#125; catch (Exception e) &#123;
        &#x2F;&#x2F; 顯示報錯訊息
    &#125;
&#125;</code></pre>

<h3 id="獲取回應"><a href="#獲取回應" class="headerlink" title="獲取回應"></a>獲取回應</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private String getResponse(String responseBody) &#123;
    return client.getResponse(responseBody);
&#125;</code></pre>

<hr>
<h1 id="附加資訊"><a href="#附加資訊" class="headerlink" title="附加資訊"></a>附加資訊</h1><h2 id="OpenAI-參數說明"><a href="#OpenAI-參數說明" class="headerlink" title="OpenAI 參數說明"></a>OpenAI 參數說明</h2><ul>
<li><code>max_tokens</code>: 是機器人<strong>最大可補全的權標數目</strong>，預設是 <code>16</code>。如果<strong>設定較小，會限制機器人對所輸入文本的理解能力</strong>，反之，則讓它<strong>更好理解文本內容</strong>。</li>
</ul>
<div class="note info simple"><p>如何數出Tokens數目</p>
<p>詳見官方支援服務：<a href="https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them">https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them</a></p>
<p>1 個權標 ≃ 4 個英文字符<br>1 個權標 ≃ ¾ (四分之三) 個字詞<br>100 個權標 ≃ 75 個字詞</p>
<p>1-2 個句子 ≃ 30 個權標<br>1 個句子 ≃ 100 個權標</p>
<p>1,500 字詞 ≃ 2048 個權標</p>
</div>

<ul>
<li><code>temperature</code>: 是用以控制機器人創造文本的多樣性及創造性，範圍為 <code>0-2</code>，預設是 <code>1</code>，不用設置 <code>top_p</code>。</li>
<li><code>top_p</code>: 功能主要與 <code>temperature</code> 相同，不用設置 <code>temperature</code>。</li>
<li><code>echo</code>: 是用於輸出補全後文本前傳回 <code>prompt</code> 所設定的文本。</li>
</ul>
<div class="note info simple"><p><code>echo</code> 示例結果展示</p>
<pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>沒有設置 <code>echo</code></span></div><code class="language-yaml">Prompt: Hello.
Completion: Hi! how can I assist you today?</code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>有設置 <code>echo</code></span></div><code class="language-yaml">Prompt: Hello.
Completion: Hello.
            Hi! how can I assist you today?</code></pre></div>

<details class="folding-tag"><summary> 檢視代碼: 建立請求 </summary>
              <div class="content">
              <pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>建立請求 - text-davinci-003</span></div><code class="language-javascript">const &#123; Configuration, OpenAIApi &#125; &#x3D; require(&quot;openai&quot;);
const configuration &#x3D; new Configuration(&#123;
    apiKey: process.env.OPENAI_API_KEY,
&#125;);
const openai &#x3D; new OpenAIApi(configuration);
const response &#x3D; await openai.createCompletion(&#123;
    model: &quot;text-davinci-003&quot;,
    prompt: &quot;Say this is a test&quot;,
    max_tokens: 7,
    temperature: 0,
&#125;);</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>建立請求 - gpt-3.5-turbo</span></div><code class="language-javascript">const &#123; Configuration, OpenAIApi &#125; &#x3D; require(&quot;openai&quot;);
const configuration &#x3D; new Configuration(&#123;
  apiKey: process.env.OPENAI_API_KEY,
&#125;);
const openai &#x3D; new OpenAIApi(configuration);
const completion &#x3D; await openai.createChatCompletion(&#123;
  model: &quot;gpt-3.5-turbo&quot;,
  messages: [&#123;role: &quot;user&quot;, content: &quot;Hello world&quot;&#125;],
&#125;);
console.log(completion.data.choices[0].message);</code></pre>
              </div>
            </details>

<details class="folding-tag"><summary> 檢視代碼: 參數設定 </summary>
              <div class="content">
              <pre class="line-numbers language-json" data-language="json"><div class="caption"><span>參數設定 - text-davinci-003</span></div><code class="language-json">&#123;
    &quot;model&quot;: &quot;text-davinci-003&quot;,
    &quot;prompt&quot;: &quot;Say this is a test&quot;,
    &quot;max_tokens&quot;: 7,
    &quot;temperature&quot;: 0,
    &quot;top_p&quot;: 1,
    &quot;n&quot;: 1,
    &quot;stream&quot;: false,
    &quot;logprobs&quot;: null,
    &quot;stop&quot;: &quot;\n&quot;
&#125;</code></pre><pre class="line-numbers language-json" data-language="json"><div class="caption"><span>參數設定 - gpt-3.5-turbo</span></div><code class="language-json">&#123;
    &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,
    &quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;]
&#125;</code></pre>
              </div>
            </details>

<details class="folding-tag"><summary> 檢視代碼: 回應結果 </summary>
              <div class="content">
              <pre class="line-numbers language-json" data-language="json"><div class="caption"><span>回應結果 - text-davinci-003</span></div><code class="language-json">&#123;
    &quot;id&quot;: &quot;cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7&quot;,
    &quot;object&quot;: &quot;text_completion&quot;,
    &quot;created&quot;: 1589478378,
    &quot;model&quot;: &quot;text-davinci-003&quot;,
    &quot;choices&quot;: [
        &#123;
        &quot;text&quot;: &quot;\n\nThis is indeed a test&quot;,
        &quot;index&quot;: 0,
        &quot;logprobs&quot;: null,
        &quot;finish_reason&quot;: &quot;length&quot;
        &#125;
    ],
    &quot;usage&quot;: &#123;
        &quot;prompt_tokens&quot;: 5,
        &quot;completion_tokens&quot;: 7,
        &quot;total_tokens&quot;: 12
    &#125;
&#125;</code></pre><pre class="line-numbers language-json" data-language="json"><div class="caption"><span>回應結果 - gpt-3.5-turbo</span></div><code class="language-json">&#123;
  &quot;id&quot;: &quot;chatcmpl-123&quot;,
  &quot;object&quot;: &quot;chat.completion&quot;,
  &quot;created&quot;: 1677652288,
  &quot;choices&quot;: [&#123;
    &quot;index&quot;: 0,
    &quot;message&quot;: &#123;
      &quot;role&quot;: &quot;assistant&quot;,
      &quot;content&quot;: &quot;\n\nHello there, how may I assist you today?&quot;,
    &#125;,
    &quot;finish_reason&quot;: &quot;stop&quot;
  &#125;],
  &quot;usage&quot;: &#123;
    &quot;prompt_tokens&quot;: 9,
    &quot;completion_tokens&quot;: 12,
    &quot;total_tokens&quot;: 21
  &#125;
&#125;</code></pre>
              </div>
            </details>

<div class="tabs" id="openai_utils_source_code"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="openai_utils_source_code-1">AndroidManifest.xml</button><button type="button" class="tab " data-href="openai_utils_source_code-2">build.gradle(app/)</button><button type="button" class="tab " data-href="openai_utils_source_code-3">OpenAIUtils.java</button><button type="button" class="tab " data-href="openai_utils_source_code-4">MainActivity.java</button></ul><div class="tab-contents"><div class="tab-item-content active" id="openai_utils_source_code-1"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;&gt;

    &lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;
    &lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot; &#x2F;&gt;

    ...
&lt;&#x2F;manifest&gt;</code></pre></div><div class="tab-item-content" id="openai_utils_source_code-2"><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">plugins &#123;
    id &#39;com.android.application&#39;
&#125;

android &#123;
    ...
&#125;

dependencies &#123;
    ...
    implementation &#39;com.squareup.okhttp3:okhttp:4.10.0&#39;
&#125;</code></pre></div><div class="tab-item-content" id="openai_utils_source_code-3"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class OpenAIUtils &#123;

    private MediaType mediaType &#x3D; MediaType.parse(&quot;application&#x2F;json; charset&#x3D;utf-8&quot;);
    private OkHttpClient client;

    private long readTimeout, writeTimeout, connectTimeout;

    private double maxTokens, temperature;
    private String apiKey, apiUrl, model, prompt;

    public static final String TEXT_DAVINCI_003 &#x3D; &quot;text-davinci-003&quot;;
    public static final String GPT_3_5_TURBO &#x3D; &quot;gpt-3.5-turbo&quot;;

    public static final String COMPLETION_URL &#x3D; &quot;https:&#x2F;&#x2F;api.openai.com&#x2F;v1&#x2F;completions&quot;;
    public static final String CHAT_COMPLETION_URL &#x3D; &quot;https:&#x2F;&#x2F;api.openai.com&#x2F;v1&#x2F;chat&#x2F;completions&quot;;

    public OpenAIUtils() &#123;
        client &#x3D; new OkHttpClient.Builder()
                .connectTimeout(connectTimeout, TimeUnit.SECONDS)
                .readTimeout(readTimeout, TimeUnit.SECONDS)
                .writeTimeout(writeTimeout, TimeUnit.SECONDS)
                .build();
    &#125;

    public long getReadTimeout() &#123; return readTimeout; &#125;
    public long getWriteTimeout() &#123; return writeTimeout; &#125;
    public long getConnectTimeout() &#123; return connectTimeout; &#125;

    public double getMaxTokens() &#123; return maxTokens; &#125;
    public double getTemperature() &#123; return temperature; &#125;
    public String getAPIKey() &#123; return apiKey; &#125;
    public String getAPIUrl() &#123; return apiUrl; &#125;
    public String getModel() &#123; return model; &#125;
    public String getPrompt() &#123; return prompt; &#125;

    public void setReadTimeout() &#123; this.readTimeout &#x3D; readTimeout; &#125;
    public void setWriteTimeout() &#123; this.writeTimeout &#x3D; writeTimeout; &#125;
    public void setConnectTimeout() &#123; this.connectTimeout &#x3D; connectTimeout; &#125;

    public void setMaxTokens(double maxTokens) &#123; this.maxTokens &#x3D; maxTokens; &#125;
    public void setTemperature(double temperature) &#123; this.temperature &#x3D; temperature; &#125;
    public void setAPIUrl(String apiUrl) &#123; this.apiUrl &#x3D; apiUrl; &#125;
    public void setAPIKey(String apiKey) &#123; this.apiKey &#x3D; apiKey; &#125;
    public void setModel(String model) &#123; this.model &#x3D; model; &#125;
    public void setPrompt(String prompt) &#123; this.prompt &#x3D; prompt; &#125;

    public JSONObject getSettings() throws JSONException &#123;
        JSONObject json &#x3D; new JSONObject();

        json.put(&quot;model&quot;, model);
        json.put(&quot;temperature&quot;, temperature);
        json.put(&quot;max_tokens&quot;, maxTokens);

        if (model.equals(TEXT_DAVINCI_003)) &#123;
            json.put(&quot;prompt&quot;, prompt);
        &#125;

        else if (model.equals(GPT_3_5_TURBO)) &#123;
            JSONArray jsonArray &#x3D; new JSONArray();
            JSONObject jsonMessageObj &#x3D; new JSONObject();
            jsonMessageObj.put(&quot;role&quot;, &quot;user&quot;);
            jsonMessageObj.put(&quot;content&quot;, prompt);
            jsonArray.put(jsonMessageObj);

            json.put(&quot;messages&quot;, jsonArray);
        &#125;

        return json;
    &#125;

    public void generateResponse(Callback callback) throws JSONException &#123;
        JSONObject json &#x3D; getSettings();
        Request request &#x3D; new Request.Builder()
                .url(apiUrl)
                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + apiKey)
                .header(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;)
                .post(RequestBody.create(json.toString(), mediaType))
                .build();
        client.newCall(request).enqueue(callback);
    &#125;

    public String getResponse(String responseBody) throws JSONException &#123;
        String resultText &#x3D; null;
        JSONObject jsonObject &#x3D; new JSONObject(responseBody);

        if (model.equals(TEXT_DAVINCI_003)) &#123;
            JSONArray jsonArray &#x3D; jsonObject.getJSONArray(&quot;choices&quot;);
            resultText &#x3D; jsonArray.getJSONObject(0).getString(&quot;text&quot;);
            resultText.trim();
        &#125;

        else if (model.equals(GPT_3_5_TURBO)) &#123;
            JSONArray jsonArray &#x3D; jsonObject.getJSONArray(&quot;choices&quot;);
            JSONObject jsonMessageObj &#x3D; jsonArray.getJSONObject(0).getJSONObject(&quot;message&quot;);
            resultText &#x3D; jsonMessageObj.getString(&quot;content&quot;);
            resultText.trim();
        &#125;

        return resultText;
    &#125;

    public String getErrorResponse(String responseBody) throws JSONException &#123;
        JSONObject jsonObject &#x3D; new JSONObject(responseBody);
        JSONObject errorObj &#x3D; jsonObject.getJSONObject(&quot;error&quot;);
        String resultText &#x3D; errorObj.getString(&quot;message&quot;);
        return resultText;
    &#125;

&#125;</code></pre></div><div class="tab-item-content" id="openai_utils_source_code-4"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MainActivity extends AppCompatActivity &#123;

    private final String TAG &#x3D; MainActivity.class.getSimpleName();

    private OpenAIUtils client;

    private ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) &#123;
        super.onCreate(savedInstanceState);
        binding &#x3D; ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        setupOpenAIUtils();

        Button btnSend &#x3D; binding.btnSend;
        EditText etPrompt &#x3D; binding.etPrompt;

        String prompt &#x3D; etPrompt.getText().toString();
        btnSend.setOnClickListener(v -&gt; sendRequest(prompt));

    &#125;

    private void setupOpenAIUtils() &#123;
        client &#x3D; new OpenAIUtils();

        client.setAPIKey(apiKey);
        client.setAPIUrl(apiUrl);
        client.setModel(model);
        client.setTemperature(temperature);
        client.setMaxTokens(maxTokens);
    &#125;

    private void sendRequest(String prompt) &#123;
        try &#123;
            client.setPrompt(prompt);
            client.generateResponse(new Callback() &#123;
                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) &#123;
                    &#x2F;&#x2F; 顯示報錯訊息

                    Log.e(TAG, e.toString())
                &#125;
                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException &#123;
                    String responseBody &#x3D; response.body().string();
                    try &#123;
                        &#x2F;&#x2F; 獲取回應結果

                        String resultText &#x3D; client.getResponse(responseBody);
                        TextView tvResult &#x3D; binding.tvResult;
                        tvResult.setText(resultText);

                    &#125; catch (Exception e) &#123;
                        &#x2F;&#x2F; 顯示報錯訊息

                        Log.e(TAG, client.getErrorResponse(responseBody))
                    &#125;
                &#125;
            &#125;);
        &#125; catch (Exception e) &#123;
            &#x2F;&#x2F; 顯示報錯訊息

            Log.e(TAG, e.toString())
        &#125;
    &#125;

&#125;</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      <categories>
        <category>人工智能</category>
        <category>程式編寫</category>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>XML</tag>
        <tag>JavaScript</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Sora Editor 編輯器依賴庫使用筆記</title>
    <url>/post/android-dev-sora-editor-lib-notes.html</url>
    <content><![CDATA[<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/Rosemoe/sora-editor">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Sora Editor 依賴庫存儲庫</div>
            <div class="tag-link-sitename"> 輕鬆嵌入編輯器組件至你的應用程式</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<hr>
<h1 id="編輯器組件預覽"><a href="#編輯器組件預覽" class="headerlink" title="編輯器組件預覽"></a>編輯器組件預覽</h1><table>
<thead>
<tr>
<th>Simple</th>
<th>Advanced</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/Rosemoe/sora-editor/main/images/general.jpg" alt="simple" style="border-radius: 8px; width: 100%;"></td>
<td><img src="https://raw.githubusercontent.com/Rosemoe/sora-editor/main/images/problem_indicators.jpg" alt="advanced" style="border-radius: 8px; width: 100%;"></td>
</tr>
</tbody></table>
<p>圖片來源：<a href="https://github.com/Rosemoe/sora-editor">sora-editor</a> Github</p>
<hr>
<h1 id="匯入依賴庫"><a href="#匯入依賴庫" class="headerlink" title="匯入依賴庫"></a>匯入依賴庫</h1><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">dependencies &#123;
    implementation(platform(&quot;io.github.Rosemoe.sora-editor:bom:0.21.1&quot;))
    
    &#x2F;&#x2F; 啟用 Editor 基本模組庫
    implementation(&quot;io.github.Rosemoe.sora-editor:editor&quot;)
    
    &#x2F;&#x2F; 啟用 TextMate 語法高亮模組庫
    implementation(&quot;io.github.Rosemoe.sora-editor:language-textmate&quot;)
    
    &#x2F;&#x2F; 啟用 Java 語言模組庫
    implementation(&quot;io.github.Rosemoe.sora-editor:language-java&quot;)
    
    &#x2F;&#x2F; 其他處於開發階段的試驗性模組庫，有興趣可以使用
    &#x2F;&#x2F; 啟用語言伺服器協定 (LSP) 的 Editor 模組庫
    implementation(&quot;io.github.Rosemoe.sora-editor:editor-lsp&quot;)
    
    &#x2F;&#x2F; 啟用 Tree-Sitter 語法高亮模組庫
    implementation(&quot;io.github.Rosemoe.sora-editor:language-treesitter&quot;)
&#125;</code></pre>

<h2 id="editor-模組庫"><a href="#editor-模組庫" class="headerlink" title="editor 模組庫"></a><code>editor</code> 模組庫</h2><p>這個是必須要匯入的基礎庫，用來實現編輯器組件及其功能。</p>
<h3 id="定義-CodeEditor-組件"><a href="#定義-CodeEditor-組件" class="headerlink" title="定義 CodeEditor 組件"></a>定義 <code>CodeEditor</code> 組件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;io.github.rosemoe.sora.widget.CodeEditor
    android:id&#x3D;&quot;@+id&#x2F;editor&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</code></pre>

<h3 id="定義-SymbolInputView-組件"><a href="#定義-SymbolInputView-組件" class="headerlink" title="定義 SymbolInputView 組件"></a>定義 <code>SymbolInputView</code> 組件</h3><p><code>SymbolInputView</code> 是常見的符號工具列，通常顯示於編輯器下方，方便用戶插入字符至編輯器，要注意的是，如果要加入太多符號，超出可視區域，需要定義可水平滾動 <code>HorizontalScrollView</code> 的父佈局，例如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;HorizontalScrollView
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;wrap_content&quot;
    android:orientation&#x3D;&quot;horizontal&quot;&gt;
    
    &lt;io.github.rosemoe.sora.widget.SymbolInputView
        android:id&#x3D;&quot;@+id&#x2F;symbol_input_view&quot;
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;
    
&lt;&#x2F;LinearLayout&gt;</code></pre>

<p>定義了這個組件，你需要配置使用的符號，你需要定義兩個陣列，一個用於在組件上顯示，另一個則用於點擊該符號按鈕後所插入的字符，再把 <code>SymbolInputView</code> 綁定至編輯器。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">String[] displayText &#x3D; &#123;&quot;→&quot;, &quot;&#123;&quot;, &quot;&#125;&quot;, &quot;(&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;,&quot;, &quot;.&quot;, &quot;;&quot;, &quot;\&quot;&quot;, &quot;&#39;&quot;, &quot;?&quot;, &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;&#x2F;&quot;, &quot;&#x3D;&quot;&#125;;
String[] insertText &#x3D; &#123;&quot;\t&quot;, &quot;&#123;&#125;&quot;, &quot;&#125;&quot;, &quot;()&quot;, &quot;)&quot;, &quot;[]&quot;, &quot;]&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;,&quot;, &quot;.&quot;, &quot;;&quot;, &quot;\&quot;&quot;, &quot;&#39;&quot;, &quot;?&quot;, &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;&#x2F;&quot;, &quot;&#x3D;&quot;&#125;;

symbolInputView.addSymbols(displayText, insertText);
symbolInputView.bindEditor(editor);</code></pre>

<h3 id="編輯器設定"><a href="#編輯器設定" class="headerlink" title="編輯器設定"></a>編輯器設定</h3><h4 id="設置編輯器應用的主題配置"><a href="#設置編輯器應用的主題配置" class="headerlink" title="設置編輯器應用的主題配置"></a>設置編輯器應用的主題配置</h4><p>支援的主題配置如下：</p>
<p>明亮主題：</p>
<ul>
<li><code>EditorColorScheme</code> (預設)</li>
<li><code>SchemeEclipse</code></li>
<li><code>SchemeGithub</code></li>
</ul>
<p>黑暗主題：</p>
<ul>
<li><code>SchemeDarcula</code></li>
<li><code>SchemeNotepadXX</code></li>
<li><code>SchemeVS2019</code></li>
</ul>
<p>使用示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.setColorScheme(new SchemeDarcula());</code></pre>

<h4 id="設置字體連字"><a href="#設置字體連字" class="headerlink" title="設置字體連字"></a>設置字體連字</h4><div class="note warning simple"><p>需要所應用的字體支援連字特性，如 JetBrains Mono 字體。</p>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.setLigatureEnabled(true);</code></pre>

<details class="folding-tag"><summary> 內部代碼 </summary>
              <div class="content">
              <pre class="line-numbers language-java" data-language="java"><code class="language-java">public void setLigatureEnabled(boolean enabled) &#123;
    this.ligatureEnabled &#x3D; enabled;
    setFontFeatureSettings(enabled ? null : &quot;&#39;liga&#39; 0,&#39;calt&#39; 0,&#39;hlig&#39; 0,&#39;dlig&#39; 0,&#39;clig&#39; 0&quot;);
&#125;</code></pre>
              </div>
            </details>

<h4 id="設置-TextActionWindow-自定義佈局和外觀"><a href="#設置-TextActionWindow-自定義佈局和外觀" class="headerlink" title="設置 TextActionWindow 自定義佈局和外觀"></a>設置 <code>TextActionWindow</code> 自定義佈局和外觀</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">View v &#x3D; LayoutInflater.from(context).inflate(R.layout.layout_text_compose_panel, null);

LinearLayout root &#x3D; v.findViewById(R.id.panel_root);
ImageButton btnSelectAll &#x3D; v.findViewById(R.id.panel_btn_select_all);
ImageButton btnCopy &#x3D; v.findViewById(R.id.panel_btn_copy);
ImageButton btnPaste &#x3D; v.findViewById(R.id.panel_btn_paste);
ImageButton btnCut &#x3D; v.findViewById(R.id.panel_btn_cut);

btnSelectAll.setOnClickListener(view -&gt; editor.selectAll());
btnCopy.setOnClickListener(view -&gt; editor.copyText());
btnPaste.setOnClickListener(view -&gt; editor.pasteText());
btnCut.setOnClickListener(view -&gt; editor.cutText());

editor.getComponent(EditorTextActionWindow.class).setContentView(v);</code></pre>

<h4 id="設置-EditorAutoCompletion-自定義佈局和外觀"><a href="#設置-EditorAutoCompletion-自定義佈局和外觀" class="headerlink" title="設置 EditorAutoCompletion 自定義佈局和外觀"></a>設置 <code>EditorAutoCompletion</code> 自定義佈局和外觀</h4><div class="tabs" id="editor_auto_completion_codes"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="editor_auto_completion_codes-1">主要代碼</button><button type="button" class="tab " data-href="editor_auto_completion_codes-2">layout_editor_completion_list_item.xml</button><button type="button" class="tab " data-href="editor_auto_completion_codes-3">EditorCompletionLayout.java</button><button type="button" class="tab " data-href="editor_auto_completion_codes-4">EditorCompletionItemAdapter.java</button></ul><div class="tab-contents"><div class="tab-item-content active" id="editor_auto_completion_codes-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java">EditorAutoCompletion autoCompletion &#x3D; editor.getComponent(EditorAutoCompletion.class);
autoCompletion.setLayout(new EditorCompletionLayout());
autoCompletion.setAdapter(new EditorCompletionItemAdapter());
autoCompletion.setEnabledAnimation(true);
autoCompletion.setEnabled(true);</code></pre></div><div class="tab-item-content" id="editor_auto_completion_codes-2"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;LinearLayout
    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    android:background&#x3D;&quot;?attr&#x2F;colorSurface&quot;
    android:gravity&#x3D;&quot;center_vertical&quot;
    android:layout_height&#x3D;&quot;wrap_content&quot;
    android:layout_width&#x3D;&quot;fill_parent&quot;
    android:orientation&#x3D;&quot;horizontal&quot;
    android:padding&#x3D;&quot;5dp&quot;&gt;

    &lt;ImageView
        android:id&#x3D;&quot;@+id&#x2F;iv_image&quot;
        android:gravity&#x3D;&quot;center&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:layout_width&#x3D;&quot;20dp&quot;
        android:layout_marginEnd&#x3D;&quot;5dp&quot;&#x2F;&gt;

    &lt;LinearLayout
        android:gravity&#x3D;&quot;center&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:orientation&#x3D;&quot;horizontal&quot;&gt;

        &lt;TextView
            android:id&#x3D;&quot;@+id&#x2F;tv_label&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:layout_width&#x3D;&quot;0dp&quot;
            android:layout_weight&#x3D;&quot;1&quot;
            android:singleLine&#x3D;&quot;true&quot;
            android:text&#x3D;&quot;label&quot; &#x2F;&gt;

        &lt;TextView
            android:id&#x3D;&quot;@+id&#x2F;tv_desc&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:layout_width&#x3D;&quot;wrap_content&quot;
            android:singleLine&#x3D;&quot;true&quot;
            android:text&#x3D;&quot;desc&quot;
            android:layout_marginEnd&#x3D;&quot;5dp&quot;
            android:visibility&#x3D;&quot;gone&quot;
            android:ellipsize&#x3D;&quot;end&quot; &#x2F;&gt;


    &lt;&#x2F;LinearLayout&gt;


&lt;&#x2F;LinearLayout&gt;</code></pre></div><div class="tab-item-content" id="editor_auto_completion_codes-3"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class EditorCompletionLayout implements CompletionLayout &#123;

    private ListView listView;
    private ProgressBar progressBar;
    private LinearLayout rootView;
    private TextView textView;
    private EditorAutoCompletion editorAutoCompletion;

    private GradientDrawable gd;

    public boolean enabledAnimation &#x3D; false;

    private Context context;

    @Override
    public void onApplyColorScheme(@NonNull EditorColorScheme colorScheme) &#123;
        gd &#x3D; new GradientDrawable();
        gd.setColor(colorScheme.getColor(EditorColorScheme.WHOLE_BACKGROUND));
        setStroke(colorScheme);
        rootView.setBackground(gd);
        textView.setTextColor(colorScheme.getColor(EditorColorScheme.TEXT_NORMAL));
    &#125;

    @Override
    public void setEditorCompletion(@NonNull EditorAutoCompletion completion) &#123;
        editorAutoCompletion &#x3D; completion;
    &#125;

    @NonNull
    @Override
    public View inflate(@NonNull Context context) &#123;
        var rootLayout &#x3D; new LinearLayout(context);
        rootView &#x3D; rootLayout;
        listView &#x3D; new ListView(context);
        progressBar &#x3D; new ProgressBar(context, null, android.R.attr.progressBarStyleHorizontal);
        textView &#x3D; new TextView(context);

        rootLayout.setOrientation(LinearLayout.VERTICAL);

        setEnabledAnimation(false);

        rootLayout.addView(progressBar, new LinearLayout.LayoutParams(-1, (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 20, context.getResources().getDisplayMetrics())));
        rootLayout.addView(listView, new LinearLayout.LayoutParams(-1, 0, 1.0f));
        rootLayout.addView(textView, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        textView.setText(context.getString(R.string.auto_completion_hint, &quot;⏎&quot;));
        textView.setTextSize(12);
        textView.setMaxLines(1);

        progressBar.setIndeterminate(true);
        var progressBarLayoutParams &#x3D; (LinearLayout.LayoutParams) progressBar.getLayoutParams();
        var textViewLayoutParams &#x3D; (LinearLayout.LayoutParams) textView.getLayoutParams();

        rootLayout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        progressBarLayoutParams.topMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, -12, context.getResources().getDisplayMetrics());
        progressBarLayoutParams.bottomMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, -8, context.getResources().getDisplayMetrics());
        progressBarLayoutParams.leftMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, context.getResources().getDisplayMetrics());
        progressBarLayoutParams.rightMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, context.getResources().getDisplayMetrics());

        textViewLayoutParams.topMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, context.getResources().getDisplayMetrics());
        textViewLayoutParams.bottomMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 8, context.getResources().getDisplayMetrics());
        textViewLayoutParams.leftMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 8, context.getResources().getDisplayMetrics());
        textViewLayoutParams.rightMargin &#x3D; (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 8, context.getResources().getDisplayMetrics());

        GradientDrawable gd &#x3D; new GradientDrawable();
        gd.setCornerRadius(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 8, context.getResources().getDisplayMetrics()));

        rootLayout.setBackground(gd);

        listView.setDividerHeight(0);
        setLoading(true);

        listView.setOnItemClickListener((parent, view, position, id) -&gt; &#123;
            editorAutoCompletion.select(position);
        &#125;);

        return rootLayout;
    &#125;

    @NonNull
    @Override
    public AdapterView&lt;?&gt; getCompletionList() &#123;
        return listView;
    &#125;

    @Override
    public void setLoading(boolean loading) &#123;
        progressBar.setVisibility(loading ? View.VISIBLE : View.INVISIBLE);
    &#125;

    @Override
    public void ensureListPositionVisible(int position, int incrementPixels) &#123;
        listView.post(() -&gt; &#123;
            while (listView.getFirstVisiblePosition() + 1 &gt; position &amp;&amp; listView.canScrollList(-1)) &#123;
                performScrollList(incrementPixels &#x2F; 2);
            &#125;
            while (listView.getLastVisiblePosition() - 1 &lt; position &amp;&amp; listView.canScrollList(1)) &#123;
                performScrollList(-incrementPixels &#x2F; 2);
            &#125;
        &#125;);
    &#125;

    @Override
    public void setEnabledAnimation(boolean enabledAnimation) &#123;
        this.enabledAnimation &#x3D; enabledAnimation;

        if (enabledAnimation) &#123;
            rootView.setLayoutTransition(new LayoutTransition());
            var transition &#x3D; rootView.getLayoutTransition();
            transition.enableTransitionType(LayoutTransition.CHANGING);
            transition.enableTransitionType(LayoutTransition.APPEARING);
            transition.enableTransitionType(LayoutTransition.DISAPPEARING);
            transition.enableTransitionType(LayoutTransition.CHANGE_APPEARING);
            transition.enableTransitionType(LayoutTransition.CHANGE_DISAPPEARING);
        &#125; else  &#123;
            rootView.setLayoutTransition(null);
        &#125;
    &#125;

    public float valueInDp(float value) &#123;
        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, value, context.getResources().getDisplayMetrics());
    &#125;

    private void performScrollList(int offset) &#123;
        var adpView &#x3D; getCompletionList();

        long down &#x3D; SystemClock.uptimeMillis();
        var ev &#x3D; MotionEvent.obtain(down, down, MotionEvent.ACTION_DOWN, 0, 0, 0);
        adpView.onTouchEvent(ev);
        ev.recycle();

        ev &#x3D; MotionEvent.obtain(down, down, MotionEvent.ACTION_MOVE, 0, offset, 0);
        adpView.onTouchEvent(ev);
        ev.recycle();

        ev &#x3D; MotionEvent.obtain(down, down, MotionEvent.ACTION_CANCEL, 0, offset, 0);
        adpView.onTouchEvent(ev);
        ev.recycle();
    &#125;

    private void setStroke(EditorColorScheme colorScheme) &#123;
        if (PreferencesManager.isAutoCompletionStrokeEnabled()) &#123;
            gd.setStroke(4, colorScheme.getColor(EditorColorScheme.CURRENT_LINE));
        &#125;
    &#125;

&#125;</code></pre></div><div class="tab-item-content" id="editor_auto_completion_codes-4"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class EditorCompletionItemAdapter extends EditorCompletionAdapter &#123;

    private LayoutEditorCompletionListItemBinding binding;
    private CompletionItem item;

    @Override
    public int getItemHeight() &#123;
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                65, getContext().getResources().getDisplayMetrics());
    &#125;

    @Override
    protected View getView(int position, View convertView, ViewGroup parent, boolean isCurrentCursorPosition) &#123;
        binding &#x3D; LayoutEditorCompletionListItemBinding.inflate(LayoutInflater.from(getContext()), parent, false);
        convertView &#x3D; binding.getRoot();
        item &#x3D; getItem(position);

        binding.tvLabel.setText(item.label);
        binding.tvLabel.setTextColor(getThemeColor(EditorColorScheme.TEXT_NORMAL));

        binding.tvDesc.setText(item.desc);
        binding.tvDesc.setTextColor(getThemeColor(EditorColorScheme.LINE_NUMBER_CURRENT));

        convertView.setTag(position);
        if (isCurrentCursorPosition) &#123;
            convertView.setBackgroundColor(getThemeColor(EditorColorScheme.CURRENT_LINE));
            binding.tvDesc.setVisibility(View.VISIBLE);
        &#125; else &#123;
            convertView.setBackgroundColor(0);
            binding.tvDesc.setVisibility(View.GONE);
        &#125;

        if (PreferencesManager.isAutoCompletionFollowCursorEnabled()) &#123;
            binding.tvDesc.setVisibility(View.GONE);
        &#125;

        var type &#x3D; item.desc.subSequence(0, 1);
        setupTypeIcon(type, binding.ivImage, binding.tvDesc);
        setPartialColorSpan(new LanguageHandler().getPrefix(), getThemeColor(EditorColorScheme.SELECTION_HANDLE));

        return convertView;
    &#125;

    private void setupTypeIcon(CharSequence type, ImageView imageView, TextView textView) &#123;
        var context &#x3D; getContext();
        var icon &#x3D; 0;
        var color &#x3D; getThemeColor(EditorColorScheme.TEXT_NORMAL);;
        var text &#x3D; &quot;&quot;;
        var desc &#x3D; item.desc.toString().substring(1);
        switch (type.toString()) &#123;
            case &quot;K&quot;:
                icon &#x3D; R.drawable.ic_intellisense_symbol_keyword;
                text &#x3D; context.getString(R.string.keyword);
                break;
            case &quot;I&quot;:
                icon &#x3D; R.drawable.ic_intellisense_symbol_key;
                text &#x3D; context.getString(R.string.identifier);
                break;
            case &quot;S&quot;:
                icon &#x3D; R.drawable.ic_intellisense_symbol_snippet;
                text &#x3D; context.getString(R.string.snippet) + desc;
                break;
            case &quot;M&quot;:
                icon &#x3D; R.drawable.ic_intellisence_symbol_method;
                text &#x3D; context.getString(R.string.method) + desc;
                color &#x3D; CommonUtil.isInDarkMode(context) ? 0xFF843bbd : 0xFF652d90;
                break;
        &#125;
        imageView.setImageResource(icon);
        imageView.setColorFilter(color);

        if (!PreferencesManager.isAutoCompletionFollowCursorEnabled()) textView.setText(text);
    &#125;

    private void setPartialColorSpan(String partial, int color) &#123;
        if (partial !&#x3D; null &amp;&amp; partial.length() &gt; 0) &#123;
            var span &#x3D; new SpannableString(item.label);
            if (item.label.toString().startsWith(partial)) &#123;
                setSpan(span, color, 0, partial.length());
            &#125; else if (item.label.toString().contains(partial)) &#123;
                var pattern &#x3D; Pattern.compile(partial);
                var matcher &#x3D; pattern.matcher(span);
                while (matcher.find()) &#123;
                    setSpan(span, color, matcher.start(), matcher.end());
                &#125;
            &#125;
            binding.tvLabel.setText(span);
        &#125;
    &#125;

    private void setSpan(SpannableString span, int color, int start, int end) &#123;
        if (PreferencesManager.isAutoCompletionHighlightEnabled())
            span.setSpan(new ForegroundColorSpan(color), start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        if (PreferencesManager.isAutoCompletionHighlightEnabled() &amp;&amp; PreferencesManager.isAutoCompletionHighlightBoldEnabled())
            span.setSpan(new StyleSpan(Typeface.BOLD), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    &#125;

&#125;</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h3 id="設置診斷程序的提示和指標器"><a href="#設置診斷程序的提示和指標器" class="headerlink" title="設置診斷程序的提示和指標器"></a>設置診斷程序的提示和指標器</h3><p><code>CodeEditor</code> 沒有提供診斷程序，這個功能你要<strong>自行編寫代碼實現</strong>，但提供了<strong>設置診斷程序的提示和指標器</strong>。</p>
<p>支援的嚴重程度 (Severity) 如下：</p>
<ul>
<li><span class="p red">SEVERITY_ERROR</span> ：紅色，代表錯誤</li>
<li><span class="p yellow">SEVERITY_WARNING</span>：黃色，代表警告</li>
<li><span class="p green">SEVERITY_TYPO</span>：綠色，代表錯別字</li>
</ul>
<p>這裏有一個預覽圖</p>
<img align="left" alt="(設有診斷程序提示的編輯器)" src="https://2831537302-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FOSEWIEXBTd0aOuksXCf0%2Fuploads%2Fp7RgeMFq8cLQ1UFVC24c%2F%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202023-06-06%20%E4%B8%8B%E5%8D%8810.43.04.png?alt=media&token=de2b128f-50f0-4b5f-8918-6a8a9f2d9ca3" height="350" width="100%">

<div class="note warning simple"><p>在進行 <code>setDiagnostic()</code> 前要先 <code>setDiagnostics(new DiagnosticsContainer());</code>。</p>
</div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.setDiagnostics(new DiagnosticsContainer());

setDiagnostic(36, 44, DiagnosticRegion.SEVERITY_ERROR, &quot;Error&quot;, &quot;Message&quot;, List.of(
    new Quickfix(&quot;Fix&quot;, 0L, null),
    new Quickfix(&quot;Other&quot;, 0L, null)
));

public void setDiagnostic(int startIndex, int endIndex, short type, String briefMessage, String detailedMessage, List&lt;Quickfix&gt; list) &#123;
    getDiagnostics().addDiagnostic(
        new DiagnosticRegion(startIndex, endIndex, type, 0L,
                new DiagnosticDetail(
                        briefMessage,
                        detailedMessage,
                        list,
                        null
                )
        )
    );
&#125;</code></pre>

<div class="note warning simple"><p>每個 <code>setDiagnostic()</code> 方法裏的第一個的 <code>QuickFix</code> 實例，如 <code>Fix</code>，都會顯示在首席位置，隨後的所有新增的 <code>QuickFix</code> 實例都會最後在 <code>More Actions...</code> <strong>下拉式功能選單</strong>中顯示。 </p>
</div>

<h4 id="設置-QuickFix-按鈕點擊事件"><a href="#設置-QuickFix-按鈕點擊事件" class="headerlink" title="設置 QuickFix 按鈕點擊事件"></a>設置 <code>QuickFix</code> 按鈕點擊事件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">new Quickfix(&quot;Fix&quot;, 0L, null)</code></pre>

<p>基本上， 這個 <code>null</code> 是接受 <code>Runnable</code> 型別的參數，所以你可以把執行的代碼以 <code>Runnable</code> 結構實現。如果設定為 <code>null</code>，則沒有任何點擊事件需要執行。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">new Quickfix(&quot;Fix&quot;, 0L, new Runnable() &#123;
    @Override
    public void run() &#123;
        &#x2F;&#x2F; 執行的代碼
    &#125;
&#125;)</code></pre>

<h3 id="獲取游標所選的文字"><a href="#獲取游標所選的文字" class="headerlink" title="獲取游標所選的文字"></a>獲取游標所選的文字</h3><p><code>CodeEditor</code> 沒有內置的方法，這裏記錄一下。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getSelectedText() &#123;
    Cursor cursor &#x3D; editor.getCursor();
    return editor.getText().subContent(
        cursor.getLeftLine(),
        cursor.getLeftColumn(),
        cursor.getRightLine(),
        cursor.getRightColumn()
    ).toString();
&#125;</code></pre>

<h3 id="組件-Component"><a href="#組件-Component" class="headerlink" title="組件 (Component)"></a>組件 (Component)</h3><p>組件 (Component) 是擴充編輯器現有的組件，附加更多的組件。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.getComponent(XXX.class)</code></pre>

<p>可用的組件如下：</p>
<ul>
<li><code>Magnifier</code></li>
<li><code>EditorAutoCompletion</code></li>
<li><code>EditorTextActionWindow</code></li>
<li><code>EditorDiagnosticTooltipWindow</code></li>
</ul>
<h3 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件 (Event)"></a>事件 (Event)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.subscribeEvent(XXX.class, new EventReciever&lt;&gt; &#123;
    ...
&#125;);</code></pre>

<p>可用的事件如下：</p>
<ul>
<li>ClickEvent</li>
<li>ColorSchemeUpdateEvent</li>
<li>ContentChangeEvent</li>
<li>DoubleClickEvent</li>
<li>EditorReleaseEvent</li>
<li>SelectionChangeEvent</li>
</ul>
<p>還有更多，可到<a href="https://github.com/Rosemoe/sora-editor/tree/main/editor/src/main/java/io/github/rosemoe/sora/event">這裏</a>看。</p>
<h4 id="編輯器的內容變動事件"><a href="#編輯器的內容變動事件" class="headerlink" title="編輯器的內容變動事件"></a>編輯器的內容變動事件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.subscribeEvent(ContentChangeEvent.class, new EventReceiver&lt;ContentChangeEvent&gt;() &#123;
    @Override
    public void onReceive(@NonNull ContentChangeEvent event, @NonNull Unsubscribe unsubscribe) &#123;
        &#x2F;&#x2F; 執行的代碼
    &#125;
&#125;);</code></pre>

<h2 id="language-java-模組庫"><a href="#language-java-模組庫" class="headerlink" title="language-java 模組庫"></a><code>language-java</code> 模組庫</h2><p>這個模組主要實現 <strong>Java 語法的基本語法高亮及關鍵字與識別字</strong>的自動補全。</p>
<h3 id="設置編輯器應用-Java-語言架構"><a href="#設置編輯器應用-Java-語言架構" class="headerlink" title="設置編輯器應用 Java 語言架構"></a>設置編輯器應用 Java 語言架構</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">editor.setEditorLanguage(new JavaLanguage());</code></pre>

<div class="note danger simple"><p>在過去的古老版本 <code>0.8.x</code>，除了 <code>language-java</code> 語言模組庫外，更提供了</p>
<ul>
<li><code>language-html</code></li>
<li><code>language-python</code></li>
<li><code>language-css3</code></li>
<li><code>language-xml</code></li>
<li><code>language-universal</code><br>但遺憾的是，由於開發者無法兼顧眾多語言的機制，需要同時維護編輯器等功能，<strong>至今以上羅列的語言模組庫已被移除</strong>。雖然如此，你尚可參照 <code>JavaLanguage</code> 的內部代碼，實現其他程式語言的架構。</li>
</ul>
</div>

<h2 id="language-textmate-模組庫"><a href="#language-textmate-模組庫" class="headerlink" title="language-textmate 模組庫"></a><code>language-textmate</code> 模組庫</h2><p>這個模組庫主要是擴充 <code>editor</code> 庫的編輯器，<strong>使用 TextMate 的語法高亮功能</strong>。</p>
<h3 id="載入可應用的現成主題"><a href="#載入可應用的現成主題" class="headerlink" title="載入可應用的現成主題"></a>載入可應用的現成主題</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">try &#123;
    FileProviderRegistry.getInstance().addFileProvider(new AssetsFileResolver(getAssets()));
    ThemeRegistry themeRegistry &#x3D; ThemeRegistry.getInstance();

    &#x2F;&#x2F; 代碼在此...

    themeRegistry.loadTheme(
        new ThemeModel(
            IThemeSource.fromInputStream(
                FileProviderRegistry.getInstance().tryGetInputStream(path), path, null
            ), name
        )
    );
&#125; catch (Exception e) &#123;
    e.printStackTrace();
&#125;</code></pre>

<div class="tabs" id="tm_load_themes"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tm_load_themes-1">單個特定主題</button><button type="button" class="tab " data-href="tm_load_themes-2">多個特定主題</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tm_load_themes-1"><pre class="line-numbers language-java" data-language="java"><code class="language-java">String path &#x3D; &quot;textmate&#x2F;quietlight.json&quot;;</code></pre></div><div class="tab-item-content" id="tm_load_themes-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java">String[] themes &#x3D; &#123;&quot;quietlight&quot;, &quot;darcula&quot;&#125;;

for (int i &#x3D; 0; i &lt; themes.length;) &#123;
    String name &#x3D; themes[i];
    String path &#x3D; &quot;textmate&#x2F;&quot; + name + &quot;.json&quot;;
    &#x2F;&#x2F; themeRegistry.loadTheme(...) here
    i++;
&#125;</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h3 id="載入可應用的語言文件"><a href="#載入可應用的語言文件" class="headerlink" title="載入可應用的語言文件"></a>載入可應用的語言文件</h3><h4 id="透過使用語法規則庫"><a href="#透過使用語法規則庫" class="headerlink" title="透過使用語法規則庫"></a>透過使用<strong>語法規則庫</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">GrammarRegistry.getInstance().loadGrammars(&quot;textmate&#x2F;languages.json&quot;);</code></pre>

<h4 id="透過領域特定語言-DSL"><a href="#透過領域特定語言-DSL" class="headerlink" title="透過領域特定語言 (DSL)"></a>透過<strong>領域特定語言</strong> (DSL)</h4><details class="folding-tag"><summary> 檢視代碼 </summary>
              <div class="content">
              <pre class="line-numbers language-java" data-language="java"><code class="language-java">GrammarDefinition grammarDefinition &#x3D; new GrammarDefinition() &#123;
    @Override
    public String getName() &#123;
        return &quot;java&quot;;
    &#125;

    @Override
    public String getLanguageConfiguration() &#123;
        return &quot;textmate&#x2F;java&#x2F;language-configuration.json&quot;;
    &#125;

    @Override
    public String getScopeName() &#123;
        return &quot;source.java&quot;;
    &#125;

    @Override
    public IGrammarSource getGrammar() &#123;
        return new IGrammarSource() &#123;
            @Override
            public String getFilePath() &#123;
                return &quot;textmate&#x2F;java&#x2F;syntaxes&#x2F;java.tmLanguage.json&quot;;
            &#125;

            @Override
            public Reader getReader() throws IOException &#123;
                return null;
            &#125;
        &#125;;
    &#125;
&#125;;

GrammarRegistry.getInstance().loadGrammar(grammarDefinition);
GrammarRegistry.getInstance().loadLanguageAndLanguageConfiguration(grammarDefinition);</code></pre>
              </div>
            </details>

<div class="note info simple"><p>比較推薦使用語法規則庫的 <code>languages.json</code> 來載入可用的語言文件，因為有較佳的調整。不過如果載入太多語言，或會影響性能。</p>
</div>

<h3 id="應用特定主題"><a href="#應用特定主題" class="headerlink" title="應用特定主題"></a>應用特定主題</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">ThemeRegistry.getInstance().setTheme(&quot;darcula&quot;);</code></pre>

<h3 id="應用特定語言"><a href="#應用特定語言" class="headerlink" title="應用特定語言"></a>應用特定語言</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">TextMateLanguage language;
Language editorLanguage &#x3D; editor.getEditorLanguage();

if (editorLanguage instanceof TextMateLanguage) &#123;
	language &#x3D; (TextMateLanguage) editorLanguage;
    language.updateLanguage(&quot;source.java&quot;);
&#125; else &#123;
    language &#x3D; TextMateLanguage.create(&quot;source.java&quot;, true);
&#125;
editor.setEditorLanguage(language);</code></pre>]]></content>
      <categories>
        <category>程式編寫</category>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>XML</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>編寫 GoogleScript 程式實現 Youtube 影片動態標題</title>
    <url>/post/dev-google-script-youtube-dynamic-title.html</url>
    <content><![CDATA[<p>這個是我兩年前接觸和學到的技術，今天心血來潮想在這裏簡單做一下筆記。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.youtube.com/watch?v=T_cdYoWD4Jo">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Youtube 影片動態標題製成品</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div class="note info simple"><p>這部影片在我兩年前私人了，現在再次公開。</p>
</div>

<hr>
<h1 id="什麼是-Google-Apps-Script-？"><a href="#什麼是-Google-Apps-Script-？" class="headerlink" title="什麼是 Google Apps Script ？"></a>什麼是 Google Apps Script ？</h1><p>Google Apps Script，又稱 Google Script (副檔名 <code>.gs</code>)，就是<strong>建基於 JavaScript 的擴充語言</strong>，用以編寫 Google Apps 建構類似巨集的效果，達到工作流程自動化的目標，也可以建立 Web 應用程式，整合 Google 協作工具。</p>
<hr>
<h1 id="加入-YouTube-Data-API-v3-服務"><a href="#加入-YouTube-Data-API-v3-服務" class="headerlink" title="加入 YouTube Data API v3 服務"></a>加入 <code>YouTube Data API v3</code> 服務</h1><p>在左側選單會有「服務」，按「+」號打開新增服務視窗。</p>
<p><img src="/post/dev-google-script-youtube-dynamic-title/img1.png" alt="img1"></p>
<p>選擇 <code>YouTube Data API v3</code> 服務，再按「新增」。</p>
<p><img src="/post/dev-google-script-youtube-dynamic-title/img2.png" alt="img2"></p>
<hr>
<h1 id="編寫程式碼"><a href="#編寫程式碼" class="headerlink" title="編寫程式碼"></a>編寫程式碼</h1><p>我們會用 Google Script (gs) 程式語言進行編寫。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function updateTitle() &#123;
    var videoId &#x3D; &quot;T_cdYoWD4Jo&quot;;                        &#x2F;&#x2F; 你的 YouTube 影片鏈結的 ID (https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;T_cdYoWD4Jo)
    var part &#x3D; &quot;snippet,statistics&quot;;
    var params &#x3D; &#123;&quot;id&quot;: videoId&#125;;

    var response &#x3D; YouTube.Videos.list(part, params);
    var video &#x3D; response.items[0];

    var viewsCount &#x3D; video.statistics.viewCount;        &#x2F;&#x2F; 影片的觀看次數
    var likeCount &#x3D; video.statistics.likeCount;         &#x2F;&#x2F; 影片的喜歡數
    var dislikeCount &#x3D; video.statistics.dislikeCount;   &#x2F;&#x2F; 影片的不喜歡數
    var commentCount &#x3D; video.statistics.commentCount;   &#x2F;&#x2F; 影片的留言數目
    
    var videoTitle &#x3D; &#96;[MAYBE 1 MIN DELAY] This video has $&#123;viewsCount&#125; views, $&#123;likeCount&#125; likes, $&#123;dislikeCount&#125; dislikes and $&#123;commentCount&#125; comments&#96;;                                          &#x2F;&#x2F; 影片的標題

    video.snippet.title &#x3D; videoTitle;

    try &#123;
        YouTube.Videos.update(video, part);
    &#125; catch (e) &#123;
        &#x2F;&#x2F; 忽略
    &#125;
&#125;</code></pre>

<hr>
<h1 id="執行程式碼"><a href="#執行程式碼" class="headerlink" title="執行程式碼"></a>執行程式碼</h1><p>編寫好就按「執行」，如果在「輸出記錄」沒有輸出錯誤訊息，程式碼就成功運作。</p>
<p><img src="/post/dev-google-script-youtube-dynamic-title/img3.png" alt="img3"></p>
<hr>
<h1 id="API-參考"><a href="#API-參考" class="headerlink" title="API 參考"></a>API 參考</h1><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://developers.google.com/youtube/v3/docs/videos?hl=zh-tw">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">YouTube Data v3 API 參考</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>]]></content>
      <categories>
        <category>程式編寫</category>
      </categories>
      <tags>
        <tag>GoogleScript</tag>
      </tags>
  </entry>
  <entry>
    <title>正則表達式：學極都唔識</title>
    <url>/post/dev-regex-notes.html</url>
    <content><![CDATA[<p>正則表達式，在編寫程式的時候會用到，但真的很討厭。</p>
<hr>
<h1 id="正則表達式"><a href="#正則表達式" class="headerlink" title="正則表達式"></a>正則表達式</h1><p>正則表達式 (Regular Expressions，簡稱 Regex) 是對字符串操作的一種邏輯公式，就是用事先定義好的一些特定字符、及這些特定字符的組合，組成一個「規則字符串」，這個「規則字符串」用來表達對字符串的一種過濾邏輯。</p>
<p>主要功能如下：</p>
<ol>
<li>校驗數據的有效性</li>
<li>查找符合要求的文本內容</li>
<li>對文本進行分割或替換等操作</li>
</ol>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符在正則表達式具有特殊意義，進而實現不同操作。</p>
<ol>
<li>特殊單字符<ul>
<li><code>.</code>：任意字符（換行符除外）</li>
<li><code>\d</code>：任意數字</li>
<li><code>\D</code>：任意非數字</li>
<li><code>\w</code>：任意字母、數·字·及底線 <code>_</code></li>
<li><code>\W</code>：任意非字母、數·字·及底線 <code>_</code></li>
</ul>
</li>
<li>空白符<ul>
<li><code>\r</code>：回車符 <kbd>↵</kbd></li>
<li><code>\n</code>：換行符</li>
<li><code>\f</code>：分頁符</li>
<li><code>\t</code>：製表符 <kbd>Tab</kbd></li>
<li><code>\s</code>：任意空白符</li>
<li><code>\S</code>：任意非空白符</li>
</ul>
</li>
<li>範圍<ul>
<li><code>|</code>：或，例如 <code>ab|bc</code> 就是 <code>ab</code> 或 <code>bc</code></li>
<li><code>[...]</code>：多選一，比對中括號內任一元素</li>
<li><code>[a-z]</code>：比對 <code>a</code> 至 <code>z</code> 之間任一元素</li>
<li><code>[^...]</code>：取反，不會比對中括號內任一元素</li>
<li><code>()</code>：子表達式，在表達式內嵌套一個子表達式</li>
</ul>
</li>
<li>量詞<ul>
<li><code>*</code>：0 至以上</li>
<li><code>+</code>：1 至以上</li>
<li><code>?</code>：0 或 1 次</li>
<li><code>&#123;n&#125;</code>：出現 n 次</li>
<li><code>&#123;n,&#125;</code>：出現至少 n 次</li>
<li><code>&#123;n,m&#125;</code>：出現 n 至 m 次</li>
</ul>
</li>
<li>斷言<ul>
<li><code>\b</code>：單詞的首端及尾端</li>
<li><code>^</code>：行的首端</li>
<li><code>$</code>：行的尾端</li>
</ul>
</li>
</ol>
<hr>
<h3 id="特殊單字符"><a href="#特殊單字符" class="headerlink" title="特殊單字符"></a>特殊單字符</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>比對除換行符以外的任意字符</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>比對字母、數字或底線，<code>\W</code> 則相反</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>比對數字，<code>\D</code> 則相反</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>比對任意空白符，<code>\S</code> 則相反</td>
</tr>
</tbody></table>
<details class="folding-tag"><summary> <code>.</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>abcde\n</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>.</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>7</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>a、b、c、d、e、\ 、n</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>abcde\nabc</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>ab.</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>2</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>abc、abc</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>c:\poloyy</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>..\\</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>c:\</code></td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>\w</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>0198aAzZ\w哎_-</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\w</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>10</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>0、1、9、8、a、A、z、Z、w、_</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>0198aAzZ\w哎_-</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\w.\w</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>3</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>019、8aA、Z\w</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>0198aAzZ\w哎_-</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\w.\\w</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>zZ\w</code></td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>\d</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>123阿a\</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\d</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>3</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>1、2、3</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>12a3阿a\</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\d\w\d.</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>2a3阿</code></td></tr></tbody></table>
              </div>
            </details>

<h3 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h3><p>不同的操作系統使用的換行符都不一樣</p>
<table>
<thead>
<tr>
<th>操作系統</th>
<th>空白符</th>
</tr>
</thead>
<tbody><tr>
<td>Windows</td>
<td><code>\r\n</code></td>
</tr>
<tr>
<td>Linux</td>
<td><code>\n</code></td>
</tr>
<tr>
<td>macOS</td>
<td><code>\n</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="量詞及限定符"><a href="#量詞及限定符" class="headerlink" title="量詞及限定符"></a>量詞及限定符</h3><table>
<thead>
<tr>
<th>限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>重複 0 次或以上</td>
</tr>
<tr>
<td><code>+</code></td>
<td>重複 1 次或以上</td>
</tr>
<tr>
<td><code>?</code></td>
<td>重複 0 次或 1 次</td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>重複 n 次</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>重複 n 次或以上</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>重複 n 至 m 次</td>
</tr>
</tbody></table>
<div class="note info simple"><p>限定符可以重複比對</p>
</div>

<details class="folding-tag"><summary> <code>*</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy12菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\w*</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy12</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy12_菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>.1*</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy12_菠蘿</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy_菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\d<em>\w</em></code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy_</code></td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>+</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy12菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\w+</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy12</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy1112菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>.1+</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>y111</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy_菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\d+\w+</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>0</code></td></tr><tr><td align="left">比對結果</td><td align="left">沒有比對結果，因為 <code>\d</code> 沒有至少比對到一個數字</td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>?</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy12菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\w?</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy12</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy12菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>._?.*</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy12菠蘿</code></td></tr></tbody></table><div class="note info simple"><p><code>_</code> 可有可無</p></div><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy_121_2菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>\d?.</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>7</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>y、y、_ 、12、1_ 、2菠、蘿</code></td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>&#123;n&#125;</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>yy12菠蘿測試</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>y&#123;2&#125;\d&#123;1&#125;\w.&#123;2&#125;</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy12菠蘿</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>13501489999</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>^135\d&#123;8&#125;$</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>13501489999</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>023-81200222、023-81200223、023-81200224</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>0\d&#123;2&#125;-\d&#123;8&#125;</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><pre><code>023-81200222<br>023-81200223<br>023-81200224</code></pre></td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>&#123;n，&#125;</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>poloyy</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>y&#123;1,&#125;</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>13501489999</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>^135\d&#123;1,&#125;$</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>13501489999</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>023-81200222、023-81200223、023-81200224</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>0\d&#123;1,&#125;-\d&#123;1,&#125;</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><pre><code>023-81200222<br>023-81200223<br>023-81200224</code></pre></td></tr></tbody></table>
              </div>
            </details>

<details class="folding-tag"><summary> <code>&#123;n，m&#125;</code> 使用示例 </summary>
              <div class="content">
              <p>例子 1</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>poloyy菠蘿</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>yy菠1&#123;0,1&#125;</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>yy菠</code></td></tr></tbody></table><p>例子 2</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>13501489999</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>^135\d&#123;1,8&#125;$</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><code>13501489999</code></td></tr></tbody></table><p>例子 3</p><table><thead><tr><th align="left">比對文本</th><th align="left"><code>023-81200222、023-81200223、023-81200224</code></th></tr></thead><tbody><tr><td align="left">表達式</td><td align="left"><pre class="language-regex" data-language="regex"><code>0\d&#123;1,2&#125;-\d&#123;1,8&#125;</code></pre></td></tr><tr><td align="left">比對數目</td><td align="left"><code>1</code></td></tr><tr><td align="left">比對結果</td><td align="left"><pre><code>023-81200222<br>023-81200223<br>023-81200224</code></pre></td></tr></tbody></table>
              </div>
            </details>

<h3 id="範圍"><a href="#範圍" class="headerlink" title="範圍"></a>範圍</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>|</code></td>
<td>分支條件，或</td>
</tr>
<tr>
<td><code>[...]</code></td>
<td>字符集，多選一</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>指定範圍的字符集，如 <code>a</code> 至 <code>z</code></td>
</tr>
<tr>
<td><code>[^...]</code></td>
<td>取反字符集</td>
</tr>
</tbody></table>
<p>正則表達式內置已經有比對字母、數字及空白的字符集，我們可以用以下的元字符替代冗長的表達式。</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>等價表達式</th>
</tr>
</thead>
<tbody><tr>
<td><code>\w</code></td>
<td><code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td><code>[^a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td><code>[\n\t\r\f]</code></td>
</tr>
<tr>
<td><code>\S</code></td>
<td><code>[^\n\t\r\f]</code></td>
</tr>
<tr>
<td><code>\d</code></td>
<td><code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td><code>[^0-9]</code></td>
</tr>
</tbody></table>
<p>以上就是內置的字符集，但是如果你要比對沒有預定的字符集，就要用 <code>[ ]</code> 手動寫字符集。</p>
<p>例如，寫一個元音字母的字符集，元音字母有 a、e、i、o、u，那就寫 <code>[aeiou]</code>。</p>
<div class="note info simple"><p>字符集<strong>只可以比對單一字符</strong>，有需要可用限定符進行重複比對。</p>
</div>

<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>在比對過程中，當某一部分的比對失敗後，它會回溯到之前的位置，嘗試其他的比對方式，直到找到合適的比對或所有的選項都嘗試完畢。這個過程可能會<strong>消耗較多的時間和資源</strong>，尤其是當正則表達式的複雜度很高時。</p>
<div class="note info simple"><p>出現回溯的原因，通常都是因為啟動了貪婪模式。</p>
</div>

<h3 id="避免回溯"><a href="#避免回溯" class="headerlink" title="避免回溯"></a>避免回溯</h3><p>使用惰性模式或獨佔模式可有效阻止比對過程中出現回溯的情況，兩者都有效阻止，但性質相異。</p>
<ul>
<li>惰性模式：盡可能比對最少的字符</li>
<li>獨佔模式：與貪婪模式一樣，都是盡可能比對最多字符，但是阻止回溯</li>
</ul>
<h2 id="模式比對"><a href="#模式比對" class="headerlink" title="模式比對"></a>模式比對</h2><h3 id="貪婪模式-Greedy"><a href="#貪婪模式-Greedy" class="headerlink" title="貪婪模式 (Greedy)"></a>貪婪模式 (Greedy)</h3><p>貪婪模式是量詞及限定符特有的特性，貪婪模式，顧名思義就是所比對的次數 <strong>「盡可能多」</strong>。</p>
<h3 id="惰性-x2F-非貪婪模式-Reluctant"><a href="#惰性-x2F-非貪婪模式-Reluctant" class="headerlink" title="惰性 &#x2F; 非貪婪模式 (Reluctant)"></a>惰性 &#x2F; 非貪婪模式 (Reluctant)</h3><p>惰性模式，又稱非貪婪模式，就是與貪婪模式相反，所比對的次數 <strong>「盡可能少」</strong>。</p>
<table>
<thead>
<tr>
<th>惰性限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>*?</code></td>
<td>重複 0 次或以上，但盡可能減少重複</td>
</tr>
<tr>
<td><code>+?</code></td>
<td>重複 1 次或以上，但盡可能減少重複</td>
</tr>
<tr>
<td><code>??</code></td>
<td>重複 0 次或 1 次，但盡可能減少重複</td>
</tr>
<tr>
<td><code>&#123;n,&#125;?</code></td>
<td>重複 n 次或以上，但盡可能減少重複</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;?</code></td>
<td>重複 n 至 m 次，但盡可能減少重複</td>
</tr>
</tbody></table>
<h3 id="獨佔模式-Possessive"><a href="#獨佔模式-Possessive" class="headerlink" title="獨佔模式 (Possessive)"></a>獨佔模式 (Possessive)</h3><p>與貪婪模式一樣，唯一不同的就是會阻止回溯。</p>
<table>
<thead>
<tr>
<th></th>
<th>表達式</th>
<th>比對文本</th>
<th>結果</th>
</tr>
</thead>
<tbody><tr>
<td>貪婪模式</td>
<td><code>a&#123;1,3&#125;ab</code></td>
<td>aaab</td>
<td>比對</td>
</tr>
<tr>
<td>惰性模式</td>
<td><code>a&#123;1,3&#125;?ab</code></td>
<td>aaab</td>
<td>比對</td>
</tr>
<tr>
<td>獨佔模式</td>
<td><code>a&#123;1,3&#125;+ab</code></td>
<td>aaab</td>
<td>沒有比對</td>
</tr>
</tbody></table>
<div class="note warning simple"><p><strong>部分的正則引擎不支援獨佔模式</strong>，可用惰性模式取替，但獨佔模式在某些情況下使用，會有較佳效果。</p>
</div>

<hr>
<h1 id="額外補充"><a href="#額外補充" class="headerlink" title="額外補充"></a>額外補充</h1><h2 id="比對雙字節字元集"><a href="#比對雙字節字元集" class="headerlink" title="比對雙字節字元集"></a>比對雙字節字元集</h2><p>雙字節字元集例如中文、日語及韓語 (CJK) 等利用兩個字節而組成的字元。</p>
<ol>
<li>只對正體中文及簡體中文比對<br>表達式：<code>[\u4e00-\u9fa5]</code></li>
<li>對雙字節字元集比對<br>表達式：<code>[^\x00-\xff]</code></li>
</ol>
<h2 id="比對泛用格式字串"><a href="#比對泛用格式字串" class="headerlink" title="比對泛用格式字串"></a>比對泛用格式字串</h2><ul>
<li>時間 HH::MM::SS<pre class="line-numbers language-regex" data-language="regex"><code class="language-regex">([01]&#123;1&#125;\d|2[0-3]):([0-5]&#123;1&#125;\d):([0-5]&#123;1&#125;\d)</code></pre></li>
<li>網址 <a href="http://www.example.com/">www.example.com</a><pre class="line-numbers language-regex" data-language="regex"><code class="language-regex">[w]&#123;3&#125;\.([a-z0-9]+\.)*([a-z])&#123;2,3&#125;</code></pre></li>
<li>8 位數電話號碼<pre class="line-numbers language-regex" data-language="regex"><code class="language-regex">[0-9]&#123;8&#125;$</code></pre></li>
</ul>
<h2 id="Java-與-JavaScript-的正則表達式使用方法差別"><a href="#Java-與-JavaScript-的正則表達式使用方法差別" class="headerlink" title="Java 與 JavaScript 的正則表達式使用方法差別"></a>Java 與 JavaScript 的正則表達式使用方法差別</h2><div class="tabs" id="java_vs_js_regex"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="java_vs_js_regex-1">JavaScript</button><button type="button" class="tab " data-href="java_vs_js_regex-2">Java</button></ul><div class="tab-contents"><div class="tab-item-content active" id="java_vs_js_regex-1"><ol>
<li>有兩種創建正則表達式的方法<br>顯式宣告：利用 <code>RegExp</code> 物件創建<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var regex &#x3D; new RegExp(&quot;ab+c&quot;);</code></pre>
隱式宣告：利用首尾的 <code>/</code> 作為表達式創建<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">var regex &#x3D; &#x2F;ab+c&#x2F;;</code></pre></li>
<li>分組是用 <code>( )</code></li>
<li>轉義只用單反斜線 <code>\</code>，如 <code>\d</code></li>
</ol></div><div class="tab-item-content" id="java_vs_js_regex-2"><ol>
<li>創建 <code>Pattern</code> 物件<pre class="line-numbers language-java" data-language="java"><code class="language-java">Pattern pattern &#x3D; Pattern.compile(&quot;ab+c&quot;)</code></pre></li>
<li>分組是用 <code>Matcher.group()</code></li>
<li>轉義要用雙反斜線 <code>\\</code>，如 <code>\\d</code><br>要轉義 <code>\</code> 字符，需要加 <code>\\\\</code></li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>打造及美化終端機和 Vim 編輯器</title>
    <url>/post/dev-terminal-beautify-tutorial.html</url>
    <content><![CDATA[<div class="note warning simple"><p>本文章需要使用 <a target="_blank" href="https://brew.sh/index_zh-tw">Homebrew</a>，請先把其安裝。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;</code></pre></div>

<p>基本上，我們都不會再用 macOS 預設的 Terminal 軟件，取而的是 iTerm2，與較原始的 Terminal 比較，這個<strong>提供更多進階功能和設定</strong>。</p>
<p>可到這裏安裝 <a target="_blank" href="https://iterm2.com/downloads.html">iTerm2</a> 軟件包，或輸入指令安裝：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew cask install iterm2</code></pre>

<hr>
<h1 id="為終端機設定真實色"><a href="#為終端機設定真實色" class="headerlink" title="為終端機設定真實色"></a>為終端機設定真實色</h1><p>安裝 iTerm2 原因其中之一，是能夠支援真實色（全彩 - 256色），真實色可以<strong>使終端機顯示更漂亮的色彩配置</strong>。</p>
<p>點擊 <kbd class="menu">iTerm2</kbd> 選單 &gt; <kbd class="menu">Settings</kbd> &gt; <kbd class="menu">Profiles</kbd> &gt; <kbd class="menu">Terminal</kbd></p>
<p>把 <kbd class="menu">Report terminal type</kbd> 並設定為 <code>xterm-256color</code>。</p>
<p><img src="/post/dev-terminal-beautify-tutorial/img1.png" alt="img1"></p>
<hr>
<h1 id="為終端機設定色彩主題"><a href="#為終端機設定色彩主題" class="headerlink" title="為終端機設定色彩主題"></a>為終端機設定色彩主題</h1><p><strong>你的終端機不是黑白就是像駭客</strong>，想要得到這個終端機的外觀？那就繼續看下去！</p>
<p><img src="/post/dev-terminal-beautify-tutorial/img2.png" alt="img2"></p>
<div class="note info simple"><p>這個輸出是 <code>neofetch</code> 指令生成的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew install neofetch</code></pre>
</div>


<hr>
<h2 id="基本主題配置"><a href="#基本主題配置" class="headerlink" title="基本主題配置"></a>基本主題配置</h2><p><img src="/post/dev-terminal-beautify-tutorial/img3.png" alt="img3"></p>
<p>Terminal 或 ITerm2 提供了一些內建主題，在 <kbd class="menu">Profiles</kbd> &gt; <kbd class="menu">Colors</kbd> &gt; <kbd class="menu">Color Preset</kbd> 那裏可以選擇主題，如果還想發掘其他更美的主題，可到 <a target="_blank" href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a> 下載其他主題。</p>
<div class="note info simple"><ol>
<li>前往 <a target="_blank" href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a> 後，點擊 <kbd class="menu">Code</kbd> &gt; <kbd class="menu">Download ZIP</kbd> 把所有檔案以壓縮檔下載至你的電腦。</li>
<li>點擊 <kbd class="menu">iTerm2</kbd> 選單 &gt; <kbd class="menu">Settings</kbd> &gt; <kbd class="menu">Profiles</kbd> &gt; <kbd class="menu">Colors</kbd> &gt; <kbd class="menu">Color Preset</kbd> &gt; <kbd class="menu">Import</kbd>。</li>
<li>找 <code>schemes</code> 資料夾，裏面有一系列的主題 (<code>.itermcolors</code> 檔案用於匯入並應用 iTerm2 主題檔案)</li>
<li>點擊確定後關閉 iTerm2 - <kbd>Cmd</kbd> + <kbd>Q</kbd> 並重啟。</li>
</ol>
</div>

<hr>
<h2 id="進階主題配置"><a href="#進階主題配置" class="headerlink" title="進階主題配置"></a>進階主題配置</h2><hr>
<h3 id="安裝-zsh"><a href="#安裝-zsh" class="headerlink" title="安裝 zsh"></a>安裝 zsh</h3><div class="note danger simple"><p>自 <strong>Mac OS 10 (MacOS Catalina)</strong> 版本起，終端機<strong>預設</strong>不再以 <code>bash</code>，取而代之是<strong>以 <code>zsh</code> 作為殼層</strong>。</p>
</div>

<p>不過你也可以檢查一下有沒有安裝 <code>zsh</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">which zsh</code></pre>

<p>如果沒有，可以手動安裝：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew install zsh
sudo sh -c &quot;echo $(which zsh) &gt;&gt; &#x2F;etc&#x2F;shells&quot;</code></pre>

<p>把 <code>zsh</code> 設為預設殼層。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s $(which zsh)</code></pre>

<div class="note danger simple"><p>用 Homebrew 安裝的 <code>zsh</code> 位置在 <code>/usr/local/bin/zsh</code>；<br>系統安裝的 <code>zsh</code> 位置在 <code>/bin/zsh</code>。</p>
<p>在首次安裝 <code>zsh</code> 的時候會進入 <code>zsh</code> 設定界面，建議<strong>依照 Recommended 的提示</strong>進行設定。</p>
</div>

<hr>
<h3 id="安裝-oh-my-zsh"><a href="#安裝-oh-my-zsh" class="headerlink" title="安裝 oh-my-zsh"></a>安裝 oh-my-zsh</h3><blockquote>
<p>不是 oh my god，但一旦你把它安裝到終端機，或許你會有這個反應！</p>
</blockquote>
<p>須知 <code>zsh</code> 使用繁複，先不說調整設定，光是初始化也要使用很多腦載量，安裝到一半可能就棄械投降，所以 <code>zsh</code> 在<strong>初期甚少得到賞識</strong>。不過，今時今日，現在我們可以用 <code>oh-my-zsh</code> ，它是一個讓 <code>zsh</code> <strong>更容易使用的套件</strong>！</p>
<div class="note info simple"><p>大部分的 <code>zsh</code> 套件都支援 <code>oh-my-zsh</code>。</p>
</div>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</code></pre>

<hr>
<h3 id="設定-zsh-主題"><a href="#設定-zsh-主題" class="headerlink" title="設定 zsh 主題"></a>設定 zsh 主題</h3><p><code>oh-my-zsh</code> 提供了許多主題，例如在 <a target="_blank" href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh 官方文案</a> 看到的 <code>robbyrussell</code>、<code>agnoster</code> 主題。我們可以透過文本編輯修改 <code>~/.zshrc</code> 檔案內容，從而應用想要的主題。</p>
<div class="note info simple"><p><code>.zshrc</code> 是修改 <code>zsh</code> 設定的核心檔案。</p>
</div>


<p>開啟 <code>~/.zshrc</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi ~&#x2F;.zshrc</code></pre>

<div class="note danger simple"><p>當文件打開後，會進入命令模式，這個時候<strong>當你敲擊鍵盤的一些作用鍵會被辨別為命令</strong>，而不是輸入字元，要按鍵盤 I 鍵進入插入模式。</p>
</div>

<hr>
<div class="note info simple"><p>進入插入模式 - <kbd>I</kbd><br>進入底線命令模式 - <kbd>:</kbd><br>退出輸入模式，並切換命令模式 - <kbd>ESC</kbd><br>複製所選字元 - <kbd>Y</kbd><br>貼上已複製字元 - <kbd>P</kbd><br>剪下所選字元 - <kbd>D</kbd><br>復原 (Undo) - <kbd>U</kbd><br>重做 (Redo) - <kbd>Ctrl</kbd> + <kbd>R</kbd><br>召喚自動完成選單 - <kbd>Ctrl</kbd> + <kbd>N</kbd></p>
</div>

<hr>
<p>在 <code>~/.zshrc</code> 檔案內，找 <code>ZSH_THEME</code> 設定。</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">ZSH_THEME&#x3D;&quot;robbyrussell&quot;</code></pre>

<p><code>robbyrussell</code> 是 zsh 預設應用的主題，如果你想要使用其他，可到 <a target="_blank" href="https://github.com/ohmyzsh/ohmyzsh/tree/master/themes">這裏</a> 看所有主題，<code>.zsh-theme</code> 副檔名的檔案是用於 <code>ZSH_THEME</code> 設定。</p>
<p>例如是 <code>sunshine.zsh-theme</code>：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">ZSH_THEME&#x3D;&quot;sunshine&quot;</code></pre>

<p>重啟殼層更新設定。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exec $SHELL</code></pre>

<hr>
<h3 id="安裝-Powerlevel10k"><a href="#安裝-Powerlevel10k" class="headerlink" title="安裝 Powerlevel10k"></a>安裝 Powerlevel10k</h3><p>來到這裏，如果 <code>oh-my-zsh</code> 已經足夠讓你感到 oh my god 的話，你可以住手了。但是，我們將會進一步利用強大 <code>zsh</code> 主題美化終端機，它就是 <code>Powerlevel10k</code>。</p>
<blockquote>
<p><code>Powerlevel10k</code> 是 <code>Powerlevel9k</code> 的新一代版本。</p>
</blockquote>
<div class="note info simple"><p>更新特點：</p>
<ul>
<li>人性化的<strong>引導式</strong>設定界面</li>
<li><strong>不用自行安裝</strong> Powerline 字體</li>
<li>更多命令行客製化設定</li>
</ul>
<p>如果你安裝過 <code>Powerlevel9k</code>，不用擔心，兩者版本的設定相容，但 <code>Powerlevel10k</code> 更優，建議更新。</p>
</div>

<p>我們會透過 <code>oh-my-zsh</code> 安裝 <code>Powerlevel10k</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;romkatv&#x2F;powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;themes&#x2F;powerlevel10k</code></pre>

<p>同樣用 <code>vi</code> ，設定主題為 <code>powerlevel10k</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi ~&#x2F;.zshrc</code></pre>

<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">ZSH_THEME&#x3D;&quot;powerlevel10k&#x2F;powerlevel10k&quot;</code></pre>

<div class="note danger simple"><p>如果你不是用 <code>oh-my-zsh</code> 安裝 <code>Powerlevel10k</code>，而把以上設定設置到 <code>.zshrc</code>，會報錯。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[oh-my-zsh] theme &#39;powerlevel10k&#x2F;powerlevel10k&#39; not found</code></pre>

<p>這個時候，重新安裝 <code>oh-my-zsh</code> 和 <code>Powerlevel10k</code>。</p>
</div>

<hr>
<p>重啟終端機或輸入指令進入 <code>Powerlevel10k</code> 設定界面：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">p10k configure</code></pre>

<p>照着畫面一步步選擇你喜歡的設定便可以。</p>
<div class="note danger simple"><ol>
<li>如果它詢問你 <code>Does this look like a diamond (rotated square)?</code> 或類似問題的時候，<strong>與你所見並不一致</strong>，這個很可能<strong>你沒有安裝 Powerline 字體</strong>。</li>
<li>如果它沒有詢問 <code>Install Meslo Nerd Font?</code> 的話，<strong>重裝 <code>Powerlevel10k</code></strong> 試試。</li>
<li>如果你要很多花俏的圖示，<code>Character Set</code> 要選 <code>Unicode</code>。</li>
<li><code>Transient Prompt</code> 是 <code>Powerlevel10k</code> 新功能，會讓命令行固定只有一個，每次<strong>輸入完指令和輸出歷史會自動往上印</strong>。</li>
</ol>
</div>

<hr>
<h1 id="使用-zsh-插件管理器配置進階功能"><a href="#使用-zsh-插件管理器配置進階功能" class="headerlink" title="使用 zsh 插件管理器配置進階功能"></a>使用 zsh 插件管理器配置進階功能</h1><div class="note warning simple"><p>基於我們所應用的主題來自於 <code>zsh</code> 的安裝。接下來的套件都會沿用 <code>zsh</code> 安裝。</p>
</div>

<hr>
<h2 id="啟用輸入指令時的語法突顯"><a href="#啟用輸入指令時的語法突顯" class="headerlink" title="啟用輸入指令時的語法突顯"></a>啟用輸入指令時的語法突顯</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting</code></pre>

<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">plugins&#x3D;(
    # ...
    zsh-syntax-highlighting
)</code></pre>

<hr>
<h2 id="啟用輸入指令時自動完成提示"><a href="#啟用輸入指令時自動完成提示" class="headerlink" title="啟用輸入指令時自動完成提示"></a>啟用輸入指令時自動完成提示</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre>

<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">plugins&#x3D;( 
    # ...
    zsh-autosuggestions
)</code></pre>

<hr>
<h1 id="Vim-編輯器外觀設定"><a href="#Vim-編輯器外觀設定" class="headerlink" title="Vim 編輯器外觀設定"></a>Vim 編輯器外觀設定</h1><p>把終端機弄美後，是不是都很想有股衝動美化 Vim 編輯器呢？這部分就是教大家怎樣將 Vim 編輯器像我的一樣美。</p>
<p><img src="/post/dev-terminal-beautify-tutorial/img4.png" alt="img4"></p>
<div class="note warning simple"><p>如果你沒有安裝 <code>vim</code>，可以用 Homebrew 安裝：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew install vim</code></pre>

<p><code>vim</code> 與 <code>vi</code> 有什麼區別？Vim 是 <strong>Vi iMproved</strong>，簡而言之就是<strong>改善並把 Vi 編輯器功能進階化</strong>。</p>
</div>

<div class="note info simple"><p>建議安裝 <a target="_blank" href="https://macvim-dev.github.io/macvim/">MacVim</a>，好處：</p>
<ol>
<li>MacVim 是一個獨立軟件，可以把<strong>檔案直接拖拽並直接打開</strong>。</li>
<li>可以<strong>用 Mac OS 建有的快捷鍵</strong>，如 <kbd>Cmd</kbd> + <kbd>X</kbd>。</li>
</ol>
</div>

<hr>
<h2 id="安裝-vim-plug"><a href="#安裝-vim-plug" class="headerlink" title="安裝 vim-plug"></a>安裝 vim-plug</h2><p><code>vim-plug</code> 是一個 <code>vim</code> 的插件管理器，用以把 <code>vim</code> 的插件載入至 Vim 編輯器直接使用。</p>
<div class="note warning simple"><p><code>vim-plug</code> 是較新的插件管理技術，較早前的是 <code>Pathogen</code> 和 <code>Vundle</code>。</p>
<p>可以看到 <code>vim-plug</code> 與 <code>Vundle</code> 兩者的差異並不大：</p>
<pre class="line-numbers language-vim" data-language="vim"><div class="caption"><span>Vundle</span></div><code class="language-vim">Plugin &#39;...&#39;

:PluginInstall</code></pre>

<pre class="line-numbers language-vim" data-language="vim"><div class="caption"><span>vim-plug</span></div><code class="language-vim">Plug &#39;...&#39;

:PlugInstall</code></pre>

<p>但唯一 <code>vim-plug</code> 較 <code>Vundle</code> 的更勝一籌是<strong>支援按需載入</strong>。</p>
</div>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -fLo ~&#x2F;.vim&#x2F;autoload&#x2F;plug.vim --create-dirs \
    https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;junegunn&#x2F;vim-plug&#x2F;master&#x2F;plug.vim</code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vim ~&#x2F;.vimrc</code></pre>

<p>在 <code>.vimrc</code> 內加入編碼：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">call plug#begin(&#39;檔案路徑&#39;)

call plug#end()</code></pre>

<hr>
<h2 id="Vim-插件"><a href="#Vim-插件" class="headerlink" title="Vim 插件"></a>Vim 插件</h2><p>加入插件：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)
Plug &#39;...&#39;
call plug#end()</code></pre>

<p><img src="/post/dev-terminal-beautify-tutorial/img10.png" alt="img10"></p>
<div class="note danger simple"><p><code>Plug &#39;...&#39;</code> 只是樣板，<strong>別把它運行，會報錯</strong>，接下來會使用插件。</p>
<p>把插件加入後要做的步驟：</p>
<ol>
<li><code>:qw</code> - <kbd>ESC</kbd> + <kbd>:</kbd> + <kbd>Q</kbd> + <kbd>W</kbd> 儲存。</li>
<li><code>:PlugInstall</code> - <kbd>ESC</kbd> + <kbd>:</kbd> + <code>PlugInstall</code>。</li>
<li>重啟 <code>vim</code>。</li>
</ol>
</div>

<p>當你輸入了 <code>:PlugInstall</code> 後，會在左側另外開啟了安裝插件的畫面：</p>
<p><img src="/post/dev-terminal-beautify-tutorial/img11.png" alt="img11"></p>
<div class="note info simple"><p><code>:q</code> - <kbd>ESC</kbd> + <kbd>:</kbd> + <kbd>Q</kbd> 退出安裝插件的畫面。</p>
</div>

<hr>
<h3 id="airline-amp-airline-themes"><a href="#airline-amp-airline-themes" class="headerlink" title="airline &amp; airline-themes"></a>airline &amp; airline-themes</h3><p><img src="/post/dev-terminal-beautify-tutorial/img5.png" alt="img5"><br><img src="/post/dev-terminal-beautify-tutorial/img6.png" alt="img6"><br><img src="/post/dev-terminal-beautify-tutorial/img7.png" alt="img7"><br><img src="/post/dev-terminal-beautify-tutorial/img8.png" alt="img8"><br><img src="/post/dev-terminal-beautify-tutorial/img9.png" alt="img9"></p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)
Plug &#39;vim-airline&#x2F;vim-airline&#39;
Plug &#39;vim-airline&#x2F;vim-airline-themes&#39;
call plug#end()</code></pre>

<hr>
<h3 id="安裝-Vim-主題"><a href="#安裝-Vim-主題" class="headerlink" title="安裝 Vim 主題"></a>安裝 Vim 主題</h3><hr>
<h4 id="安裝-material-vim"><a href="#安裝-material-vim" class="headerlink" title="安裝 material.vim"></a>安裝 material.vim</h4><p>在這教學，我們會用 <a target="_blank" href="https://github.com/kaicataldo/material.vim">material.vim</a> 主題，如果你要用其他，就要依從該主題的安裝方法。</p>
<figure>
    <img src="https://raw.githubusercontent.com/kaicataldo/material.vim/main/screenshots/material-all-variants.png" alt="githubImg">
    <figcaption>
        圖片來源：<a target="_blank" href="https://github.com/kaicataldo/material.vim">material.vim</a> - GitHub 專案
    </figcaption>
</figure>

<p>安裝 <code>material.vim</code>：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug &#39;kaicataldo&#x2F;material.vim&#39;, &#123; &#39;branch&#39;: &#39;main&#39; &#125;</code></pre>

<p>應用 <code>material</code> 主題。</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">colorscheme material</code></pre>

<div class="note danger simple"><p>所有經過插件擴充的設定值，如 <code>colorscheme material</code> 內的 <code>material</code>，是來自 <code>kaicataldo/material.vim</code> 的，所以<strong>設定值要在 <code>Plug</code> 區塊後才能使用</strong>。</p>
<p>即是：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)
Plug &#39;kaicataldo&#x2F;material.vim&#39;, &#123; &#39;branch&#39;: &#39;main&#39; &#125;
call plug#end()

colorscheme material</code></pre></div>

<h4 id="為-Vim-設定真實色"><a href="#為-Vim-設定真實色" class="headerlink" title="為 Vim 設定真實色"></a>為 Vim 設定真實色</h4><p>在 <code>.vimrc</code> 內加入編碼：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">if (has(&#39;nvim&#39;))
  let $NVIM_TUI_ENABLE_TRUE_COLOR &#x3D; 1
endif
if has(&quot;termguicolors&quot;)
    &quot; fix bug for vim
    set t_8f&#x3D;^[[38;2;%lu;%lu;%lum
    set t_8b&#x3D;^[[48;2;%lu;%lu;%lum
    &quot; enable true color
    set termguicolors
endif</code></pre>

<h4 id="設定-Material-主題"><a href="#設定-Material-主題" class="headerlink" title="設定 Material 主題"></a>設定 Material 主題</h4><p>material.vim 一共<strong>設有 10 款 Material 主題</strong>，其中 <strong>5 款為 Community Material 主題</strong>。</p>
<ul>
<li>Default &#x2F; Community Default</li>
<li>Lighter &#x2F; Community Lighter</li>
<li>Darker &#x2F; Community Darker</li>
<li>Palenight &#x2F; Community Palenight</li>
<li>Ocean &#x2F; Community Ocean</li>
</ul>
<div class="note info simple"><p>按照 <a target="_blank" href="https://material-theme.com/docs/reference/color-palette/">Material 主題調色</a>，Default 即是 Oceanic，而 Ocean 即是 Deep Ocean。</p>
</div>

<p>這裏是主題的所有可設定值：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">let g:material_theme_style &#x3D; &#39;default&#39; | &#39;palenight&#39; | &#39;ocean&#39; | &#39;lighter&#39; | &#39;darker&#39; | &#39;default-community&#39; | &#39;palenight-community&#39; | &#39;ocean-community&#39; | &#39;lighter-community&#39; | &#39;darker-community&#39;</code></pre>

<p>例如我想要 Community Material Palenight 主題（即是我一開始展示的那一個）。</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">set background&#x3D;dark

let g:material_theme_style &#x3D; &#39;palenight-community&#39;
colorscheme material</code></pre>

<div class="note info simple"><p>如果是淺色主題，如 Material Lighter：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">set background&#x3D;light</code></pre></div>


<p>如果你想要斜體如<strong>註釋</strong>斜體的語法突顯：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">let g:material_terminal_italics &#x3D; 1</code></pre>

<div class="note danger simple"><p>這個設定<strong>不會把所有字元都轉為斜體</strong>，它把字元轉為斜體是<strong>按語法主題文件而定</strong>的。</p>
<p>如果你設定了斜體後<strong>斜體字元有背景顏色</strong>的話，你可以試試在 <code>colorscheme</code> 那行往下加入編碼：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">&quot; fix italics in Vim
if !has(&#39;nvim&#39;)
  let &amp;t_ZH&#x3D;&quot;\e[3m&quot;
  let &amp;t_ZR&#x3D;&quot;\e[23m&quot;
endif</code></pre>

<p>如果你設定了主題後<strong>沒有語法突顯色彩</strong>，可能你沒為 Vim 啟用語法突顯：</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">syntax on</code></pre></div>

<hr>
<h1 id="Vim-其他設定"><a href="#Vim-其他設定" class="headerlink" title="Vim 其他設定"></a>Vim 其他設定</h1><hr>
<h2 id="自動進入插入模式"><a href="#自動進入插入模式" class="headerlink" title="自動進入插入模式"></a>自動進入插入模式</h2><p>開啟 Vim 編輯器後自動進入插入模式（Insert mode）。</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">start</code></pre>

<hr>
<h2 id="鼠標點擊控制"><a href="#鼠標點擊控制" class="headerlink" title="鼠標點擊控制"></a>鼠標點擊控制</h2><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">set mouse&#x3D;a</code></pre>

<hr>
<h2 id="啟用行號"><a href="#啟用行號" class="headerlink" title="啟用行號"></a>啟用行號</h2><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">set number</code></pre>

<hr>
<h2 id="啟用語法突顯"><a href="#啟用語法突顯" class="headerlink" title="啟用語法突顯"></a>啟用語法突顯</h2><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">syntax on</code></pre>

<hr>
<h2 id="顯示目前行背景顏色"><a href="#顯示目前行背景顏色" class="headerlink" title="顯示目前行背景顏色"></a>顯示目前行背景顏色</h2><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">set cursorline</code></pre>

<hr>
<h2 id="顯示頂部列和檔案頁籤"><a href="#顯示頂部列和檔案頁籤" class="headerlink" title="顯示頂部列和檔案頁籤"></a>顯示頂部列和檔案頁籤</h2><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">set showtabline&#x3D;2</code></pre>

<hr>
<h1 id="相關鏈結"><a href="#相關鏈結" class="headerlink" title="相關鏈結"></a>相關鏈結</h1><p>這些就是本文章所提及的相關鏈結。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://brew.sh/index">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Homebrew</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://iterm2.com/downloads.html">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">iTerm2</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/mbadolato/iTerm2-Color-Schemes">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">iTerm2-Color-Schemes</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/ohmyzsh/ohmyzsh">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">oh-my-zsh</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/ohmyzsh/ohmyzsh/tree/master/themes">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">oh-my-zsh Themes</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/zsh-users/zsh-syntax-highlighting">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">zsh-syntax-highlighting</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/romkatv/powerlevel10k">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Powerlevel10k</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/vim-airline/vim-airline">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">vim-airline</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://macvim-dev.github.io/macvim/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">MacVim</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/kaicataldo/material.vim">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">material-vim</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://material-theme.com/docs/reference/color-palette/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Material Color Schemes</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<hr>
<p>好了，大概就是這樣了。記錄一下建立這個 <code>md</code> 檔案的時間，由 2023-01-04 <strong>12:51</strong> 開始寫，結果到 <strong>16:10</strong> 才寫好這篇文章哈哈。。</p>
]]></content>
      <tags>
        <tag>終端機指令</tag>
      </tags>
  </entry>
  <entry>
    <title>「盤古之白」- 中文排版的重要</title>
    <url>/post/general-spacing-of-pangu.html</url>
    <content><![CDATA[<p>你是不是經常都看到網頁上的中文字和英文、數字、符號<strong>擠在一塊，就會坐立難安</strong>，忍不住想在它們之間加個空格？</p>
<p>我實在不明白為什麼<strong>就是不情願加空格</strong>，我強調，這個不是強迫症！</p>
<hr>
<h1 id="什麼是「盤古之白」"><a href="#什麼是「盤古之白」" class="headerlink" title="什麼是「盤古之白」?"></a>什麼是「盤古之白」?</h1><p>這個名字命名的相當優秀，在中國神話，古時流傳有盤古開闢天地的傳說：</p>
<blockquote>
<p>盤古開天地，說的是在天地開闢之前，宇宙是混混沌沌的一團氣，裏面沒有光，沒有聲音。這時候，出了一個盤古氏，用大斧把這一團混沌劈了開來。</p>
</blockquote>
<h2 id="與不加空格有什麼關聯？"><a href="#與不加空格有什麼關聯？" class="headerlink" title="與不加空格有什麼關聯？"></a>與不加空格有什麼關聯？</h2><p>還不懂？「用大斧把這一團<strong>混沌</strong>劈了開來。」需知不加空格，不但是一團糟，更是一團混沌！</p>
<h2 id="有理有據"><a href="#有理有據" class="headerlink" title="有理有據"></a>有理有據</h2><div class="note primary simple"><p>漢學家稱這個空白字元為「盤古之白」，因為它<strong>劈開了全形字和半形字之間的混沌</strong>。另有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。與大家共勉之。</p>
<p>節錄自<a href="https://github.com/vinta/pangu.js">這裏</a>。</p>
</div>

<hr>
<h1 id="不加空格，到底什麼居心"><a href="#不加空格，到底什麼居心" class="headerlink" title="不加空格，到底什麼居心"></a>不加空格，到底什麼居心</h1><p>我明白，有時候打字慵懶起來，不打空格，只是人知常情，但絕不縱容！</p>
<h2 id="暫時解決所謂的「強迫症」"><a href="#暫時解決所謂的「強迫症」" class="headerlink" title="暫時解決所謂的「強迫症」"></a>暫時解決所謂的「強迫症」</h2><p>我再三強調，這不是強迫症，我思疑：<strong>不加空格才有強迫症</strong>。</p>
<p>在方間我們可以暫時文字擠在一起的問題，就是安裝插件至 Google Chrome 或其他瀏覽器。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/vinta/pangu.js">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">pangu.js</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>但希望大家可以<strong>改過自新，享受瀏覽網頁的樂趣</strong>。</p>
<hr>
<h1 id="加空格的好處"><a href="#加空格的好處" class="headerlink" title="加空格的好處"></a>加空格的好處</h1><ol>
<li>養成良好的寫作習慣</li>
<li>易於閱讀：文章排版不會因為太多文字而都擠在一起</li>
<li>幫助網站整體搜尋引擎最佳化 (SEO)</li>
</ol>
<hr>
<h1 id="最終防線"><a href="#最終防線" class="headerlink" title="最終防線"></a>最終防線</h1><p>我明白，有時候打字慵懶起來，不打空格，只是一時方便。這網誌已經內置安裝了「盤古之白」的插件，所以不會有任何差池！呵呵~</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://notioner.notion.site/832221430f754a7395a18aea98fd3b78">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">中文排版原則｜範例</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>]]></content>
  </entry>
  <entry>
    <title>VSCode 自訂程式碼片段</title>
    <url>/post/dev-vscode-snippet-notes.html</url>
    <content><![CDATA[<p>哈囉，歡迎來到我的網誌。</p>
<p>有沒有想過自己在編寫程式碼時，能夠借助自動完成選單來完成一整塊的程式碼？在 VSCode 軟件，它能夠支援自訂程式碼片段，使你能夠<strong>在輸入關鍵字的前綴後，便能插入一整塊程式碼！</strong>大大提升你編程的效率。</p>
<p>在這篇文章，我們將會學到如何新增自己的程式碼片段。</p>
<hr>
<h1 id="為編輯器進行設定"><a href="#為編輯器進行設定" class="headerlink" title="為編輯器進行設定"></a>為編輯器進行設定</h1><p>首先，為了<strong>避免所新增的程式碼片段無法透過自動完成選單中顯示</strong>，我們可以為編輯器直接啟用自訂程式碼選單片段。</p>
<p>按編輯器選單列的齒輪裏的設定，或者直接用快捷鍵 <kbd>⌘ Cmd</kbd> + <kbd>,
<p>把設定界面更換為以 JSON 格式開啟。</p>
<p><img src="/post/dev-vscode-snippet-notes/img1.png" alt="img1"></p>
<p>在 <code>settings.json</code> 進行以下設定：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;editor.tabCompletion&quot;: &quot;on&quot;</code></pre>

<p>如果你自己已經安裝一些同樣是附加程式碼片段的擴充插件，例如是 <code>Extension Pack for Java</code>，裏面包含附加程式碼片段，你可以透過編輯器設定把程式碼片段自動完成選單的權重提高。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;editor.snippetSuggestions&quot;: &quot;top&quot;,</code></pre>

<hr>
<h1 id="新增程式碼片段"><a href="#新增程式碼片段" class="headerlink" title="新增程式碼片段"></a>新增程式碼片段</h1><p>透過快捷鍵 <kbd>⇧ Shift</kbd> + <kbd>⌘ Cmd</kbd> + <kbd>P</kbd> 前往命令輸入界面。</p>
<p>然後在輸入欄中輸入 <code>snippet</code>，你會找到<kbd class="menu">程式碼片段：設定使用者程式碼片段</kbd> &#x2F; <kbd class="menu">Snippets: Configure User Snippets</kbd>，再按 <kbd>⏎ Enter</kbd>。</p>
<p>或者，<kbd class="menu">Code</kbd> &gt; <kbd class="menu">喜好設定</kbd> &gt; <kbd class="menu">設定使用者程式碼片段</kbd></p>
<p><img src="/post/dev-vscode-snippet-notes/img8.png" alt="img8"></p>
<p><img src="/post/dev-vscode-snippet-notes/img6.png" alt="img6"></p>
<hr>
<p>它會要你設定應用程式碼片段的特定語言，即是設定<strong>只能在特定的程式語言文件中使用裏面的程式碼片段</strong>。<br>或者，你要設定全域還是局部新增。</p>
<p><img src="/post/dev-vscode-snippet-notes/img7.png" alt="img7"></p>
<hr>
<p>即是你有三個選項，因應自己所需，選擇其一：</p>
<ol>
<li>設定應用程式碼片段的特定語言：只能在<strong>特定的程式語言文件</strong>中使用該程式碼片段。</li>
<li>為 “<code>[資料夾名稱]</code>“ 新增程式碼片段檔案：只能在<strong>目前的父資料夾</strong>才可以使用該程式碼片段。</li>
<li>新增全域程式碼片段檔案：<strong>所有檔案都可以使用</strong>該程式碼片段。</li>
</ol>
<p>另外，它會要求你輸入任意程式碼片段名稱。</p>
<div class="note info simple"><p>例如你想為 Java 語言新增自己一整套的程式碼片段，你可以把它命名為 <code>My Java Snippet</code>，總之就是隨你喜歡。</p>
</div>

<p>例如，現在我的父資料夾是 <code>hexo</code>，而且我要<strong>為自己的 Hexo 網誌的 Markdown 語法建立程式碼片段</strong>，所以我會選擇<strong>選項 2</strong>，並命名 <code>Blog components</code>，它會在這個資料夾新增 <code>.vscode</code> 資料夾，裏面再新增一個名為 <code>Blog components.code-snippets</code> 檔案。</p>
<p>檔案結構大概是這樣：</p>
<pre class="line-numbers language-none"><code class="language-none">hexo&#x2F;
└── .vscode&#x2F;
    └── Blog-components.code-snippets</code></pre>

<hr>
<h1 id="編寫程式碼片段"><a href="#編寫程式碼片段" class="headerlink" title="編寫程式碼片段"></a>編寫程式碼片段</h1><div class="note info simple"><p>程式碼片段是用 JSON 語言編寫的。</p>
</div>

<p>在建立前，先來瞭解一下裏面的語法。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;Generate Java Entry Point&quot;: &#123;
        &quot;scope&quot;: &quot;java&quot;,
        &quot;prefix&quot;: &quot;javaEntryPoint&quot;,
        &quot;body&quot;: [
            &quot;public class $&#123;1:ClassName&#125; &#123;&quot;,
            &quot;   public static void main(String[] args) &#123;&quot;,
            &quot;       $&#123;2&#125;&quot;,
            &quot;   &#125;&quot;,
            &quot;&#125;&quot;,
        ],
        &quot;description&quot;: &quot;Generate the entry point of Java.&quot;
    &#125;
&#125;</code></pre>

<p>當然，你或許會想到這個是一個生成 Java <strong>入口點</strong>的程式碼片段，但是，當中的設定是什麼意思呢？</p>
<hr>
<h2 id="語法解構"><a href="#語法解構" class="headerlink" title="語法解構"></a>語法解構</h2><p><code>&quot;Generate Java Entry Point&quot;</code> 是一個 JSON <strong>物件</strong>，它將會是程式碼片段其中一個片段，就是<strong>為該片段命名，並會在自動完成選單中該項目右方顯示這名稱</strong>。</p>
<p><code>scope</code> 是指定<strong>這個單一片段可以在哪些語法模式中使用</strong>，例如這裏設定了 java，就只能在 Java 語法文件使用這個單一片段。</p>
<div class="note info simple"><p>它是可以設定<strong>多個語法模式規限</strong>的，做法如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;scope&quot;: &quot;java, html, markdown&quot;</code></pre>

<p>這樣的話，不僅 Java，還有 HTML 和 Markdown 語法文件都可以使用。</p>
</div>

<p><code>prefix</code> 是透過自動完成選單所召喚的該單一片段項目，例如你設定 <code>javaEntryPoint</code>，當你<strong>輸入這個前綴甚至逐漸完成輸入這個字，過程中會出現相關字類</strong>。</p>
<p>例如 Java 中的<strong>關鍵字</strong> <code>instanceof</code>，你<strong>毋須把這個字完全輸入，只需要輸入頭幾個字</strong>就會出現這個字，<code>prefix</code> 就是這個用法。</p>
<p><code>body</code> 就是單一片段所儲存的一整塊程式碼內容。</p>
<p><code>description</code> 純粹是為單一片段作簡單描述，可有可無。</p>
<h3 id="佔位符與定位點"><a href="#佔位符與定位點" class="headerlink" title="佔位符與定位點"></a>佔位符與定位點</h3><p>除了以上提及的語法，你還會看到 <code>$&#123;1:ClassName&#125;</code> 和 <code>$&#123;2&#125;</code>。</p>
<p>原來，我們可以利用這些佔位符，從而在程式碼片段插入後，把<strong>指標器能夠導向至佔位符的位置進行即時編輯</strong>。</p>
<p><code>$&#123;1:ClassName&#125;</code> 是一個佔位符，用來在插入該片段段可以即時編輯的部分，而這個 <code>ClassName</code> 將會是插入片段後的一個可見提示，這個名稱是任意命名的。</p>
<p>而當中的 <code>1</code> 就是一個用於<strong>為指標器辨識位置</strong>，可寫成 <code>$1</code> 或 <code>$&#123;1&#125;</code>。</p>
<p>如果要辨識指標器下一個位置，就要用 <code>$2</code> 或 <code>$&#123;2&#125;</code>，如此類推。</p>
<p>換句話說：</p>
<ol>
<li>如果你想指標器停留在 <code>body</code> 結構內<strong>最終位置</strong>，就要用 <code>$0</code>。</li>
<li>如果你想指標器停留在 <code>body</code> 結構內<strong>指定位置</strong>，就要用 <code>$1</code>。</li>
<li>如果你想指標器停留在 <code>body</code> 結構內<strong>指定位置</strong>，<strong>並要進行即時編輯</strong>，就要用 <code>$1&#123;佔位符名稱&#125;</code>。</li>
</ol>
<div class="note info simple"><p>按鍵盤 <kbd>↹ Tab</kbd> 鍵可以導向下一個定位點的指標器位置。<br>按鍵盤 <kbd>⇧ Shift</kbd> + <kbd>↹ Tab</kbd> 鍵可以導向上一個定位點的指標器位置。</p>
</div>

<hr>
<h3 id="可選擇佔位符"><a href="#可選擇佔位符" class="headerlink" title="可選擇佔位符"></a>可選擇佔位符</h3><p>佔位符不只是有一個值，還可以儲存多個數值，例如，我想它儲存 Java <strong>數據類型</strong> <code>int</code>、<code>double</code>、<code>String</code> 這三個類型，做法如下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;body&quot;: [
    &quot;$&#123;1|int,double,String|&#125; value;&quot;
]</code></pre>

<p>同樣，我們都要使用 <code>$&#123;&#125;</code> 語法把佔位符記寫，但不同的是，為了要表達多種選擇數值，我們要用 <kbd>|</kbd> 定義範圍，並用 <kbd>,</kbd> 分隔。</p>
<hr>
<h2 id="格式釐清"><a href="#格式釐清" class="headerlink" title="格式釐清"></a>格式釐清</h2><div class="note warning simple"><p>程式碼片段區塊需要在 <code>{...}</code> 內編寫；往下新增程式碼片段，需要用 <kbd>,</kbd> 分隔。</p>
</div>


<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &#x2F;&#x2F; 由這裏開始新增第一個程式碼片段
    &#x2F;&#x2F; 往下新增程式碼片段，需要用 &quot;,&quot; 分隔。
    &#x2F;&#x2F; 如下：

    &quot;Test 1&quot;: &#123;
        &#x2F;&#x2F; ...
    &#125;, &#x2F;&#x2F; 這裏分隔
    
    &quot;Test 2&quot;: &#123;
        &#x2F;&#x2F; ...
    &#125;

&#125;</code></pre>

<p>在這裏，簡單為語法和格式釐清一下：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;程式碼片段名稱&quot;: &#123;
        &quot;scope&quot;: &quot;程式語言&quot;,
        &quot;prefix&quot;: &quot;插入程式碼片段要輸入的關鍵字&quot;,
        &quot;body&quot;: [
            &quot;程式碼片段內容&quot;
        ],
        &quot;description&quot;: &quot;程式碼片段簡述&quot;
    &#125;
&#125;</code></pre>

<div class="note info simple"><p><code>scope</code> 可以經以下步驟找到：</p>
<p><kbd class="menu">程式碼片段：設定使用者程式碼片段</kbd> &#x2F; <kbd class="menu">Snippets: Configure User Snippets</kbd>，再按 <kbd>⏎ Enter</kbd>。</p>
<p><img src="/post/dev-vscode-snippet-notes/img6.png" alt="img6"></p>
<p>滾動鼠標或按鍵盤的向下按鈕可以看更多程式語言名稱。</p>
<p><img src="/post/dev-vscode-snippet-notes/img7.png" alt="img7"></p>
</div>

<hr>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>例如，現在我要編寫一個簡單的 <code>for</code> 迴圈，做法如下。</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;For loop&quot;: &#123;
        &quot;scope&quot;: &quot;java, c, cpp, csharp&quot;,
        &quot;prefix&quot;: &quot;fori&quot;,
        &quot;body&quot;: [
            &quot;for ($&#123;3|int,double,short,float,long|&#125; i &#x3D; 0; i &lt;&#x3D; $&#123;1:range&#125;; i++) &#123;&quot;,
            &quot;    $2&quot;,
            &quot;&#125;&quot;
        ]
    &#125;
&#125;</code></pre>
<p>當正在輸入 <code>fori</code> 時，會出現這個項目。</p>
<p><img src="/post/dev-vscode-snippet-notes/img2.png" alt="img2"></p>
<p>當插入程式碼片段後：</p>
<p><img src="/post/dev-vscode-snippet-notes/img3.png" alt="img3"></p>
<hr>
<h1 id="使用-snippet-generator"><a href="#使用-snippet-generator" class="headerlink" title="使用 snippet generator"></a>使用 snippet generator</h1><p>如果你覺得編寫 JSON，要瞭解和使用語法有點吃力，你可以用 <a href="https://snippet-generator.app" target="_blank">snippet generator</a>，這個是一個程式碼片段線上生成器，它支援 VSCode、Sublime Text 和 Atom 這三個軟件。</p>
<p><img src="/post/dev-vscode-snippet-notes/img4.png" alt="img4"></p>
<p>玩法一樣，不過透過圖形用戶界面簡化了編寫程序，提供了 <code>Description</code>、<code>Tab trigger</code> 和 <code>Snippet</code> 輸入欄。</p>
<p><code>Tab trigger</code> 就是 <code>prefix</code> 那部分。<br><code>Snippet</code> 就是 <code>body</code> 那部分。</p>
<hr>
<p><img src="/post/dev-vscode-snippet-notes/img5.png" alt="img5"></p>
<p>右邊可以看到 JSON 格式的程式碼顯示，如果你選其他編輯器，則顯示其他程式語言的程式碼。</p>
<p>點擊 <code>Copy snippet</code> 便可以把程式碼複製貼上使用。</p>
<div class="note info simple"><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &#x2F;&#x2F; 在此處貼上
&#125;</code></pre></div>

<hr>
<p>更多關於使用程式碼片段詳見 <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank">官方文案</a>。</p>
<p>好了，就是這樣了，相信你們能夠透過使用自訂程式碼片段把編程的效率提升，這篇是今年最後一篇文章了，我們下年再見。</p>
</kbd></p>]]></content>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains 開發的 Dokka API 文檔系統</title>
    <url>/post/android-dev-kotlin-dokka-api-docs.html</url>
    <content><![CDATA[<p>有沒想過，編寫函式庫 (library) 時候，往往有點很彆扭的，就是…</p>
<p><font size="30"><b>不想寫文案！</b></font>一來花時間，二來太麻煩。</p>
<p>不過有時我們都會吐嘈開發者不寫文案就是了，嗯很矛盾。</p>
<p>有見於此，親愛的 JetBrains 團隊開發了 Dokka，這個自動生成 API 文檔的系統，<strong>可以姑且解決</strong>「不想寫文案」的煩惱。</p>
<hr>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/Kotlin/dokka">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Dokka 官方存儲庫</div>
            <div class="tag-link-sitename"> 自動生成 API 文檔的系統</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<hr>
<h1 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h1><h2 id="引入-Dokka-配置檔"><a href="#引入-Dokka-配置檔" class="headerlink" title="引入 Dokka 配置檔"></a>引入 Dokka 配置檔</h2><p>在根目錄的 <code>build.gradle.kts</code> 中的 <code>buildscript</code> 區塊引入 <code>classpath</code> 配置檔。</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">buildscript &#123;
    dependencies &#123;
        classpath(&quot;org.jetbrains.dokka:dokka-gradle-plugin:1.8.20&quot;)
        classpath(&quot;org.jetbrains.dokka:dokka-base:1.8.20&quot;)
    &#125;
&#125;</code></pre>

<h2 id="引入-Dokka-插件"><a href="#引入-Dokka-插件" class="headerlink" title="引入 Dokka 插件"></a>引入 Dokka 插件</h2><p>在根目錄的 <code>build.gradle.kts</code> 中的 <code>plugins</code> 區塊引入 <code>org.jetbrains.dokka</code> 插件。</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">&#x2F;&#x2F; Top-level build file where you can add configuration options common to all sub-projects&#x2F;modules.
@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;) &#x2F;&#x2F; TODO: Remove once KTIJ-19369 is fixed
plugins &#123;
    ...
    id(&quot;org.jetbrains.dokka&quot;) version &quot;1.8.20&quot;
&#125;
true &#x2F;&#x2F; Needed to make the Suppress annotation work for the plugins block</code></pre>

<p>在模塊，如 <code>app</code> 的 <code>build.gradle.kts</code> 引入插件。</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;) &#x2F;&#x2F; TODO: Remove once KTIJ-19369 is fixed
plugins &#123;
    ...
    id(&quot;org.jetbrains.dokka&quot;)
&#125;</code></pre>

<hr>
<h1 id="編寫文檔"><a href="#編寫文檔" class="headerlink" title="編寫文檔"></a>編寫文檔</h1><p>要寫的文檔會在程式的 Javadoc 或 Kdoc 註解標記編寫，例如現在寫一個 <code>Person</code> 類：</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">&#x2F;**
 * Person
 *
 * @constructor Create empty Person
 *&#x2F;
class Person &#123;

    &#x2F;**
     * Set age
     *
     * @param age
     *&#x2F;
    fun setAge(age: Int) &#123;
        &#x2F;&#x2F; ...
    &#125;

    &#x2F;**
     * Set name
     *
     * @param name
     *&#x2F;
    fun setName(name: String) &#123;
        &#x2F;&#x2F; ...
    &#125;
&#125;</code></pre>

<hr>
<h1 id="執行-Dokka"><a href="#執行-Dokka" class="headerlink" title="執行 Dokka"></a>執行 Dokka</h1><ul>
<li><code>./gradlew dokkaHtml</code> - 執行單個模塊的文檔</li>
<li><code>./gradlew dokkaHtmlMultiModule</code> - 執行所有模塊的文檔</li>
</ul>
<p>效果是這樣：</p>
<p><img src="https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2Ff4m8VSJNHmGDSaB9ZWsh%2Fuploads%2FPcCCo1ubbvMZvEprj6kN%2F%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202023-07-09%20%E4%B8%8B%E5%8D%8810.26.01.png?alt=media&token=e99fb47a-b8e7-431b-9fb8-513f40bc604d"></p>
<hr>
<h1 id="Dokka-附加插件"><a href="#Dokka-附加插件" class="headerlink" title="Dokka 附加插件"></a>Dokka 附加插件</h1><p>Dokka 官方提供了一些插件：</p>
<ul>
<li>dokka-base</li>
<li>gfm-plugin</li>
<li>jekyll-plugin</li>
<li>javadoc-plugin</li>
<li>kotlin-as-java-plugin</li>
<li>android-documentation-plugin</li>
</ul>
<h2 id="kotlin-as-java-plugin-插件"><a href="#kotlin-as-java-plugin-插件" class="headerlink" title="kotlin-as-java-plugin 插件"></a><code>kotlin-as-java-plugin</code> 插件</h2><p><code>kotlin-as-java-plugin</code> 是主要把 Kotlin 的語法轉換為 Java 語法，即是把整個文檔以 Java 語法形式表示。</p>
<p>在根目錄的 <code>build.gradle.kts</code> 中的 <code>buildscript</code> 區塊引入 <code>classpath</code> 配置檔：</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">classpath(&quot;org.jetbrains.dokka:kotlin-as-java-plugin:1.8.20&quot;)</code></pre>

<p>在模塊的 <code>build.gradle.kts</code> 引入依賴：</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">dependencies &#123;
    dokkaPlugin(&quot;org.jetbrains.dokka:kotlin-as-java-plugin:1.8.20&quot;)
&#125;</code></pre>

<p>這裏有個例子，左方是 Java，右方是 Kotlin。</p>
<table>
<thead>
<tr>
<th>Java</th>
<th>Kotlin</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2Ff4m8VSJNHmGDSaB9ZWsh%2Fuploads%2F66HFnDOtw6HsZ6Bg0RXd%2F%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202023-07-10%20%E4%B8%8B%E5%8D%8810.36.38.png?alt=media&token=b7c02ed4-dcbc-4696-a879-734cd4350ac8" alt="java" style="border-radius: 8px; width: 100%;"></td>
<td><img src="https://files.gitbook.com/v0/b/gitbook-x-prod.appspot.com/o/spaces%2Ff4m8VSJNHmGDSaB9ZWsh%2Fuploads%2FeiiWd0IEH8042E5wTX2a%2F%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202023-07-10%20%E4%B8%8B%E5%8D%8810.41.52.png?alt=media&token=d6f519b5-0a5f-4754-ab4e-3e72111bae50" alt="kotlin" style="border-radius: 8px; width: 100%;"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>程式編寫</category>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>動態載入 CSS 及 JavaScript 檔案至網頁端</title>
    <url>/post/web-dev-dynamic-load-css-and-js.html</url>
    <content><![CDATA[<p>去年，我撰寫了一篇文章，介紹過 Eruda 網頁源始碼線上檢查器，教導大家直接透過瀏覽器書籤直以呼喚這個程式，當然，它也還有其他方式呼喚的，不過這裏不作講解了，因為這個並不是這篇文章的重點。重點是 Eruda 檢查器是透過使用動態載入的方式把 JavaScript 文件載入至網站。</p>
<p>它的程式是取決於這個函數作初始化： <code>eruda.init();</code></p>
<p>當然，<code>eruda</code> 是物件，<code>init()</code> 是方法，而這個物件是未下定義的，因此進行初始化前，需要載入應要的 JavaScript 外部檔案：</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;eruda</code></pre>

<hr>
<h1 id="靜態載入"><a href="#靜態載入" class="headerlink" title="靜態載入"></a>靜態載入</h1><p>什麼是靜態載入？其實就是我們經常在 HTML 文件使用的 <code>&lt;link&gt;</code> 和 <code>&lt;script&gt;</code> 標示用以載入 CSS 和 JS 文件，就是直接把這件文件直接載入，在一般簡單普通的網站直接載入是沒問題的，但如果你想按情況而載入特定 CSS 或 JS 文件的話，靜態載入的方式並非你最好的首選。</p>
<hr>
<h1 id="動態載入"><a href="#動態載入" class="headerlink" title="動態載入"></a>動態載入</h1><p>與靜態載入不同，動態載入能夠處理按情況所需，而載入哪些文件至網站，要實現動態載入的話，不是在 HTML 文件動手，而是透過編寫 JavaScript 實現動態載入，從而<strong>能減輕使用者載入負擔，提高響應效率</strong>。</p>
<hr>
<h2 id="載入源碼檔案"><a href="#載入源碼檔案" class="headerlink" title="載入源碼檔案"></a>載入源碼檔案</h2><div class="tabs" id="load_code"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="load_code-1">CSS</button><button type="button" class="tab " data-href="load_code-2">JavaScript</button></ul><div class="tab-contents"><div class="tab-item-content active" id="load_code-1"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function loadCSSFile() &#123;
    var fileref &#x3D; document.createElement(&quot;link&quot;);
    fileref.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);
    fileref.setAttribute(&quot;type&quot;, &quot;text&#x2F;css&quot;);
    fileref.setAttribute(&quot;href&quot;, filename);
&#125;</code></pre></div><div class="tab-item-content" id="load_code-2"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function loadJSFile() &#123;
    var fileref &#x3D; document.createElement(&#39;script&#39;);
    fileref.setAttribute(&quot;type&quot;, &quot;text&#x2F;javascript&quot;);
    fileref.setAttribute(&quot;src&quot;, filename);
&#125;</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p>可以寫一個封裝函數：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">function loadFile(filename, filetype) &#123;
    if (filetype &#x3D;&#x3D; &quot;css&quot;) loadCSSFile();
    else if (filetype &#x3D;&#x3D; &quot;js&quot;) loadJSFile();

    if (typeof fileref !&#x3D; &quot;undefined&quot;)
        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(fileref);
&#125;</code></pre>

<hr>
<h2 id="移除源碼檔案"><a href="#移除源碼檔案" class="headerlink" title="移除源碼檔案"></a>移除源碼檔案</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">function removeFile(filename, filetype) &#123;
    var targetelement &#x3D; (filetype &#x3D;&#x3D; &quot;js&quot;)? &quot;script&quot;: (filetype &#x3D;&#x3D; &quot;css&quot;)? &quot;link&quot;: &quot;none&quot;;
    var targetattr &#x3D; (filetype &#x3D;&#x3D; &quot;js&quot;)?&quot;src&quot;: (filetype &#x3D;&#x3D; &quot;css&quot;)? &quot;href&quot;: &quot;none&quot;;
    var allsuspects &#x3D; document.getElementsByTagName(targetelement);
    for (var i &#x3D; allsuspects.length; i &gt;&#x3D; 0; i--) &#123;
        if (allsuspects[i] &amp;&amp; allsuspects[i].getAttribute(targetattr) !&#x3D; null &amp;&amp; allsuspects[i].getAttribute(targetattr).indexOf(filename)!&#x3D;-1)
            allsuspects[i].parentNode.removeChild(allsuspects[i]);
    &#125;
&#125;</code></pre>

<hr>
<h2 id="調用函數示例"><a href="#調用函數示例" class="headerlink" title="調用函數示例"></a>調用函數示例</h2><div class="note warning simple"><p>以下編碼並非完整，僅作參考。</p>
</div>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">let mode &#x3D; Pu.gLS(&quot;webMode&quot;);
if (mode &#x3D;&#x3D; &quot;drK&quot;) &#123; &#x2F;&#x2F; dark
    filename &#x3D; filenameDark;
    removeFile(filenameLight, filetype);
&#125; else if (mode &#x3D;&#x3D; &quot;lgT&quot;) &#123; &#x2F;&#x2F; light
    filename &#x3D; filenameLight;
    removeFile(filenameDark, filetype);
&#125;
loadFile(filename, filetype);</code></pre>]]></content>
      <categories>
        <category>程式編寫</category>
        <category>網頁開發</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin Compose 跨平台項目開發筆記</title>
    <url>/post/jetpack-compose-dev-kotlin-multiplatform-notes.html</url>
    <content><![CDATA[<p>Jetpack Compose 除了<strong>取代了傳統的 XML 建構方式</strong>外，開發的程序已經<strong>不再只針對 Android</strong> 的實現，而是可以進行跨平台的操作，應用程式可以供不同的操作系統如 Android、<strong>iOS 設備及桌面版</strong>使用。</p>
<div class="note info simple"><p>桌上版泛指能在 Linux、Windows 及 macOS 系統上運作。</p>
</div>

<hr>
<h1 id="官方教學"><a href="#官方教學" class="headerlink" title="官方教學"></a>官方教學</h1><p>始終這門是一項對 Android 開發的創新理念，在 Jetpack Compose 固然可以實現跨平台，但是要實際<strong>由零開始建置環境，並非一件容易的事情</strong>。官方亦有提供一些文案，教導大家如何建置環境，進而實現跨平台。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://github.com/JetBrains/compose-multiplatform-template#setting-up-your-development-environment">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Kotlin Multiplatform 模板</div>
            <div class="tag-link-sitename"> 立即開始構建跨平台項目</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<hr>
<h1 id="建置環境"><a href="#建置環境" class="headerlink" title="建置環境"></a>建置環境</h1><p>首先，因為跨平台，涉及到 iOS 設備的系統，所以你<strong>必需要一台 macOS 的電腦</strong>，根據官方所列出的要求，你需要：<br>一台<strong>較新版本的 macOS 電腦</strong>（舊版本可能不相容）</p>
<ol>
<li>Xcode 應用程式（提提你，這應用程式總共 7.6 GB，請預備足夠的儲存空間），在 App Store 下載</li>
<li>Android Studio</li>
<li>Kotlin Multiplatform Mobile Extension</li>
<li>CocoaPods 依賴庫管理工具</li>
</ol>
<h2 id="檢查環境配置"><a href="#檢查環境配置" class="headerlink" title="檢查環境配置"></a>檢查環境配置</h2><p>在開始前，可以用 KDoctor 工具來檢查所配置的環境是正確的。</p>
<ol>
<li><p>透過使用 Homebrew 安裝 KDoctor</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew install kdoctor</code></pre></li>
<li><p>在終端機執行 KDoctor</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kdoctor</code></pre></li>
<li><p>如果配置的環境是正確的，會得出以下的結果：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Environment diagnose (to see all details, use -v option):
[✓] Operation System
[✓] Java
[✓] Android Studio
[✓] Xcode
[✓] Cocoapods

Conclusion:
✓ Your system is ready for Kotlin Multiplatform Mobile development!</code></pre>

<p> 否則：</p>
 <details class="folding-tag"><summary> 解決 CocoaPods requires your terminal to be using UTF-8 encoding 錯誤 </summary>
              <div class="content">
              <p>在執行 kdoctor 時，可能會在最後的階段 Cocoapods 報錯：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Environment diagnose (to see all details, use -v option):
[✓] Operation System
[✓] Java
[✓] Android Studio
[✓] Xcode
[✖] Cocoapods
✖ System ruby is currently used
    CocoaPods is not compatible with system ruby installation on Apple M1 computers.
    Please install ruby via Homebrew, rvm, rbenv or other tool and make it default
    Detailed information: https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;64901180&#x2F;how-to-run-cocoapods-on-apple-silicon-m1&#x2F;66556339#66556339
✖ CocoaPods requires your terminal to be using UTF-8 encoding.
    Consider adding the following to ~&#x2F;.zprofile
    export LC_ALL&#x3D;en_US.UTF-8</code></pre><p>雖然錯誤訊息提議你按照做法，加入以下的代碼：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">✖ CocoaPods requires your terminal to be using UTF-8 encoding.
    Consider adding the following to ~&#x2F;.profile:
    export LANG&#x3D;en_US.UTF-8</code></pre><p>但是還是不行，就納了個悶了。要是這樣，</p><ol><li>先狠狠的刪掉 Cocapods：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 若使用 Homebrew 安裝
brew uninstall cocoapods

# 若使用 gem 安裝
sudo gem uninstall cocoapods</code></pre><ol start="2"><li>再用 gem 重新安裝，並指定安裝版本為 <code>1.10.2</code> 。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo gem install cocoapods -v 1.10.2 -n &#x2F;usr&#x2F;local&#x2F;bin</code></pre>
              </div>
            </details></li>
</ol>
<hr>
<h1 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h1><p>完成好環境配置後，現在就打開 Android Studio 進入初始配置跨平台的細項。</p>
<h2 id="新建一個-KMM-（跨平台）-項目"><a href="#新建一個-KMM-（跨平台）-項目" class="headerlink" title="新建一個 KMM （跨平台） 項目"></a>新建一個 KMM （跨平台） 項目</h2><p>打開 Android Studio，選擇 Compose Multiplatform Template，選擇 Regular 依賴管理項。</p>
<h2 id="配置-Gradle-設定"><a href="#配置-Gradle-設定" class="headerlink" title="配置 Gradle 設定"></a>配置 Gradle 設定</h2><p>在 <code>gradle.properties</code> 新增以下設定：</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin.version&#x3D;1.8.20
agp.version&#x3D;8.0.1
compose.version&#x3D;1.4.0

org.jetbrains.compose.experimental.uikit.enabled&#x3D;true
kotlin.native.cacheKind&#x3D;none</code></pre>

<h2 id="建置文件配置"><a href="#建置文件配置" class="headerlink" title="建置文件配置"></a>建置文件配置</h2><h3 id="根目錄"><a href="#根目錄" class="headerlink" title="根目錄"></a>根目錄</h3><p>打開 <code>build.gradle.kts</code> 然後在 <code>plugins</code> 區塊，使用以下代碼取代原有代碼：</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin(&quot;multiplatform&quot;).apply(false)
id(&quot;com.android.application&quot;).apply(false)
id(&quot;com.android.library&quot;).apply(false)
id(&quot;org.jetbrains.compose&quot;).apply(false)</code></pre>

<h3 id="shared-模塊"><a href="#shared-模塊" class="headerlink" title="shared 模塊"></a><code>shared</code> 模塊</h3><ol>
<li><p>在 <code>build.gradle.kts</code> 的 <code>plugins</code> 區塊新增：</p>
 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">id(&quot;org.jetbrains.compose&quot;)</code></pre>
</li>
<li><p>然後找 <code>baseName = &quot;shared&quot;</code>，在下方新增：</p>
 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">isStatic &#x3D; true</code></pre>
</li>
<li><p>在 <code>sourceSets</code> 區塊新增以下代碼:</p>
 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">val commonMain by getting &#123;
    dependencies &#123;
        implementation(compose.runtime)
        implementation(compose.foundation)
        implementation(compose.material)
        @OptIn(org.jetbrains.compose.ExperimentalComposeLibrary::class)
        implementation(compose.components.resources)
    &#125;
&#125;</code></pre></li>
</ol>
<h3 id="androidApp-模塊"><a href="#androidApp-模塊" class="headerlink" title="androidApp 模塊"></a><code>androidApp</code> 模塊</h3><p>在 <code>build.gradle.kts</code> 的 <code>plugins</code> 區塊新增：</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">id(&quot;org.jetbrains.compose&quot;)</code></pre>

<h2 id="配置設定檔"><a href="#配置設定檔" class="headerlink" title="配置設定檔"></a>配置設定檔</h2><ol>
<li><p>打開 <code>settings.gradle.kts</code>，然後找 <code>repositories</code> 區塊，<code>pluginManagement</code> 和 <code>dependencyResolutionManagement</code> 的 <code>repositories</code> 區塊都要新增：</p>
 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">maven(&quot;https:&#x2F;&#x2F;maven.pkg.jetbrains.space&#x2F;public&#x2F;p&#x2F;compose&#x2F;dev&quot;)</code></pre>
</li>
<li><p>然後在 <code>pluginManagement</code> 區塊下方新增：</p>
 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">plugins &#123;
    val kotlinVersion &#x3D; extra[&quot;kotlin.version&quot;] as String
    val agpVersion &#x3D; extra[&quot;agp.version&quot;] as String
    val composeVersion &#x3D; extra[&quot;compose.version&quot;] as String

    kotlin(&quot;jvm&quot;).version(kotlinVersion)
    kotlin(&quot;multiplatform&quot;).version(kotlinVersion)
    kotlin(&quot;android&quot;).version(kotlinVersion)

    id(&quot;com.android.application&quot;).version(agpVersion)
    id(&quot;com.android.library&quot;).version(agpVersion)

    id(&quot;org.jetbrains.compose&quot;).version(composeVersion)
&#125;</code></pre>

<p> 完成會這樣：</p>
 <pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">pluginManagement &#123;
    repositories &#123;
        google()
        gradlePluginPortal()
        mavenCentral()
        maven(&quot;https:&#x2F;&#x2F;maven.pkg.jetbrains.space&#x2F;public&#x2F;p&#x2F;compose&#x2F;dev&quot;)
    &#125;

    plugins &#123;
        val kotlinVersion &#x3D; extra[&quot;kotlin.version&quot;] as String
        val agpVersion &#x3D; extra[&quot;agp.version&quot;] as String
        val composeVersion &#x3D; extra[&quot;compose.version&quot;] as String

        kotlin(&quot;jvm&quot;).version(kotlinVersion)
        kotlin(&quot;multiplatform&quot;).version(kotlinVersion)
        kotlin(&quot;android&quot;).version(kotlinVersion)

        id(&quot;com.android.application&quot;).version(agpVersion)
        id(&quot;com.android.library&quot;).version(agpVersion)

        id(&quot;org.jetbrains.compose&quot;).version(composeVersion)
    &#125;
&#125;

dependencyResolutionManagement &#123;
    repositories &#123;
        google()
        mavenCentral()
        maven(&quot;https:&#x2F;&#x2F;maven.pkg.jetbrains.space&#x2F;public&#x2F;p&#x2F;compose&#x2F;dev&quot;)
    &#125;
&#125;

rootProject.name &#x3D; &quot;VSCodeM&quot;
include(&quot;:androidApp&quot;)
include(&quot;:shared&quot;)</code></pre>
</li>
<li><p>最後就 Sync Project。</p>
</li>
</ol>
<h2 id="iOS-程式支援配置"><a href="#iOS-程式支援配置" class="headerlink" title="iOS 程式支援配置"></a>iOS 程式支援配置</h2><ol>
<li>在 <code>shared</code> 模塊裏的 <code>iosMain</code> 新增 <code>App.kt</code><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">fun MainController() &#x3D; ComposeUIController &#123; App &#125;</code></pre></li>
<li>打開 Xcode，在 <code>iosApp</code> 新增 Swift 檔案 <code>ComposeView.swift</code> <pre class="line-numbers language-swift" data-language="swift"><div class="caption"><span>ComposeView.swift</span></div><code class="language-swift">import Foundation
import SwiftUI
import shared

struct ComposeView: UIViewControllerRepresentable &#123;
    func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) &#123;&#125;
    
    func makeUIViewController(context: Context) -&gt; some UIViewController &#123;
        AppKt.MainViewController()
    &#125;
&#125;</code></pre>
 <pre class="line-numbers language-swift" data-language="swift"><div class="caption"><span>ContentView.swift</span></div><code class="language-swift">struct ContentView: View &#123;
    var body: some View &#123;
        ComposeView()
    &#125;
&#125;</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>程式編寫</category>
        <category>Android 開發</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
        <tag>Kotlin</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>實作類似 ChatGPT 的機器人聊天 Android 程式</title>
    <url>/post/android-dev-develop-chatgpt-android-app-tutorial.html</url>
    <content><![CDATA[<p>今天會跟大家編寫並開發一個類似 ChatGPT 的 OpenAI 聊天機器人 Android 程式。但在開發前，建議先看以下文章再續。</p>
<div class="note warning simple"><p>這篇教學會使用 <a href="/post/android-dev-openai-utils">這篇文章</a> 所實現的 OpenAIUtils 程式實現。</p>
</div>

<hr>
<h1 id="什麼是-ChatGPT？"><a href="#什麼是-ChatGPT？" class="headerlink" title="什麼是 ChatGPT？"></a>什麼是 ChatGPT？</h1><p><a href="https://chat.openai.com/">ChatGPT</a> 是現今發展最大的一個聊天機器人技術，它透過 OpenAI 所研發的 API 權杖，利用自然語言生成 （Natural Language Generation，簡稱 NLG）， 用戶可以透過輸入字詞與機器人進行對話，在這裏，稱為 <code>Prompt</code>，意思是用戶所傳達的訊息，而機器人的回應 <code>Completion</code> 就是補全的意思，機器人會根據所傳達的訊息來作相應輸出。</p>
<p><a href="https://openai.com/">OpenAI</a> 利用深度學習的方式訓練機器人，從而能夠理解用戶所傳達訊息，再作相應輸出。</p>
<div class="note info simple"><p>直到目前，ChatGPT 現時所使用的模型 <code>Model</code> 是 <code>gpt-3.5-turbo</code>，但是這個模型不是完全免費提供使用，花費 0.002 美元的價格可獲得 1000 個權標 <code>Token</code>，或大約 750 個單字。 推薦使用 <code>text-davinci-003</code>，支援最大權標量為 <code>4097</code>，其中 <code>Prompt Token</code> 和 <code>Completion Token</code> 均計算在內。</p>
</div>

<hr>
<h1 id="OpenAI-或-ChatGPT-地區限制"><a href="#OpenAI-或-ChatGPT-地區限制" class="headerlink" title="OpenAI 或 ChatGPT 地區限制"></a>OpenAI 或 ChatGPT 地區限制</h1><p>可惜的是，OpenAI <strong>還未廣泛開放地區使用</strong>，例如：<strong>香港地區暫時無法使用</strong>，即使透過使用虛擬私有網絡（Virtual Personal Network，簡稱 VPN），都無法完成用戶身份驗證的步驟。</p>
<hr>
<h1 id="構建-Android-程式"><a href="#構建-Android-程式" class="headerlink" title="構建 Android 程式"></a>構建 Android 程式</h1><p>雖然 ChatGPT 暫時開放免費使用，但我們可以用 OpenAI 開發類似的聊天機器人程式，進行其他自然語言處理（Natural Language Processing，簡稱 NLP）。在編程的時候。我們只需要透過個人帳戶的權杖 <code>API Key</code>，並運用網絡傳輸，把 OpenAI 的回應記錄獲取出來。</p>
<div class="note warning simple"><p>要注意的是，網絡不能夠長時間被呼喚，所以它有一定的連接時間總長，過了這個時間，就會<strong>逾時</strong> (Timeout)，這個操作是<strong>阻止詢問網絡時間過長而導致程式無反應</strong>等崩潰情況。</p>
</div>

<h2 id="預備-XML-佈局"><a href="#預備-XML-佈局" class="headerlink" title="預備 XML 佈局"></a>預備 XML 佈局</h2><details class="folding-tag"><summary> 檢視代碼 </summary>
              <div class="content">
              <div class="tabs" id="layout_codes"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="layout_codes-1">activity_main.xml</button><button type="button" class="tab " data-href="layout_codes-2">layout_message_list_item.xml</button></ul><div class="tab-contents"><div class="tab-item-content active" id="layout_codes-1"><h3 id="聊天界面的佈局"><a href="#聊天界面的佈局" class="headerlink" title="聊天界面的佈局"></a>聊天界面的佈局</h3><p>我們會利用 XML 構建聊天界面的佈局，當中每一個的聊天對話泡泡會用 <code>RecyclerView</code> 實現。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;
    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;match_parent&quot;
    android:orientation&#x3D;&quot;vertical&quot;&gt;

    &lt;com.google.android.material.progressindicator.LinearProgressIndicator
        android:id&#x3D;&quot;@+id&#x2F;progressBar&quot;
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:indeterminate&#x3D;&quot;true&quot;
        android:visibility&#x3D;&quot;gone&quot;&#x2F;&gt;

    &lt;androidx.recyclerview.widget.RecyclerView
        android:id&#x3D;&quot;@+id&#x2F;rvChatList&quot;
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;0dp&quot;
        android:layout_weight&#x3D;&quot;1&quot;
        android:layout_marginBottom&#x3D;&quot;20dp&quot;
        android:paddingStart&#x3D;&quot;20dp&quot;
        android:paddingEnd&#x3D;&quot;20dp&quot;
        android:paddingTop&#x3D;&quot;10dp&quot;&#x2F;&gt;

    &lt;LinearLayout
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:orientation&#x3D;&quot;horizontal&quot;
        android:paddingBottom&#x3D;&quot;20dp&quot;
        android:paddingStart&#x3D;&quot;20dp&quot;
        android:paddingEnd&#x3D;&quot;20dp&quot;&gt;

        &lt;com.google.android.material.textfield.TextInputLayout
            android:id&#x3D;&quot;@+id&#x2F;inputLayoutMessage&quot;
            android:layout_width&#x3D;&quot;match_parent&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:hint&#x3D;&quot;@string&#x2F;enter_message&quot;
            app:endIconMode&#x3D;&quot;custom&quot;
            app:endIconDrawable&#x3D;&quot;@drawable&#x2F;ic_baseline_send_24&quot;&gt;

            &lt;EditText
                android:id&#x3D;&quot;@+id&#x2F;etMessage&quot;
                android:layout_width&#x3D;&quot;match_parent&quot;
                android:layout_height&#x3D;&quot;match_parent&quot;
                android:padding&#x3D;&quot;10dp&quot;&#x2F;&gt;

        &lt;&#x2F;com.google.android.material.textfield.TextInputLayout&gt;

    &lt;&#x2F;LinearLayout&gt;

&lt;&#x2F;LinearLayout&gt;</code></pre></div><div class="tab-item-content" id="layout_codes-2"><h3 id="聊天對話泡泡的佈局"><a href="#聊天對話泡泡的佈局" class="headerlink" title="聊天對話泡泡的佈局"></a>聊天對話泡泡的佈局</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;wrap_content&quot;
    android:orientation&#x3D;&quot;vertical&quot;
    android:animateLayoutChanges&#x3D;&quot;true&quot;&gt;

    &lt;LinearLayout
        android:id&#x3D;&quot;@+id&#x2F;layoutBotMessage&quot;
        android:layout_width&#x3D;&quot;wrap_content&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:orientation&#x3D;&quot;horizontal&quot;
        android:layout_marginEnd&#x3D;&quot;40dp&quot;
        android:layout_marginBottom&#x3D;&quot;10dp&quot;&gt;

        &lt;TextView
            android:id&#x3D;&quot;@+id&#x2F;tvBotMessage&quot;
            android:layout_width&#x3D;&quot;wrap_content&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:background&#x3D;&quot;@drawable&#x2F;speech_bubble_bot&quot;
            android:lineSpacingExtra&#x3D;&quot;10dp&quot;
            android:padding&#x3D;&quot;15dp&quot;
            android:text&#x3D;&quot;bot message&quot;
            android:textSize&#x3D;&quot;16sp&quot;&#x2F;&gt;

    &lt;&#x2F;LinearLayout&gt;

    &lt;LinearLayout
        android:id&#x3D;&quot;@+id&#x2F;layoutUserMessage&quot;
        android:layout_width&#x3D;&quot;wrap_content&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:orientation&#x3D;&quot;horizontal&quot;
        android:layout_gravity&#x3D;&quot;end&quot;
        android:layout_marginStart&#x3D;&quot;40dp&quot;
        android:layout_marginBottom&#x3D;&quot;10dp&quot;&gt;

        &lt;TextView
            android:id&#x3D;&quot;@+id&#x2F;tvUserMessage&quot;
            android:layout_width&#x3D;&quot;wrap_content&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:background&#x3D;&quot;@drawable&#x2F;speech_bubble_user&quot;
            android:lineSpacingExtra&#x3D;&quot;10dp&quot;
            android:padding&#x3D;&quot;15dp&quot;
            android:text&#x3D;&quot;my message&quot;
            android:textSize&#x3D;&quot;16sp&quot;&#x2F;&gt;

    &lt;&#x2F;LinearLayout&gt;

&lt;&#x2F;LinearLayout&gt;</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>
              </div>
            </details>

<h2 id="預備對話訊息模型"><a href="#預備對話訊息模型" class="headerlink" title="預備對話訊息模型"></a>預備對話訊息模型</h2><p>預備一個類別 <code>MessageModel</code> 作對話訊息模型。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MessageModel &#123;

&#125;</code></pre>

<h3 id="定義常量和變量"><a href="#定義常量和變量" class="headerlink" title="定義常量和變量"></a>定義常量和變量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static final String SENT_BY_USER &#x3D; &quot;me&quot;;
public static final String SENT_BY_BOT &#x3D; &quot;bot&quot;;

private String message, sender;</code></pre>

<h3 id="編寫存取子及變異子"><a href="#編寫存取子及變異子" class="headerlink" title="編寫存取子及變異子"></a>編寫存取子及變異子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String getMessage() &#123; return message; &#125;
public String getSender() &#123; return sender; &#125;</code></pre>

<div class="note info simple"><p>當然你可以弄類似以下的判斷，並進行編寫存取子及變異子（但這篇教學沒有為它改良）：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">public boolean isSentByBot;
isSentByBot &#x3D; getSender().equals(SENT_BY_BOT);

public boolean isSentByBot() &#123; return isSentByBot; &#125;</code></pre></div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">public void setMessage(String message) &#123; this.message &#x3D; message; &#125;
public void setSender(String sender) &#123; this.sender &#x3D; sender; &#125;</code></pre>

<h3 id="編寫建構子"><a href="#編寫建構子" class="headerlink" title="編寫建構子"></a>編寫建構子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public MessageModel(String message, String sender) &#123;
    this.message &#x3D; message;
    this.sender &#x3D; sender;
&#125;</code></pre>

<h2 id="預備配接器"><a href="#預備配接器" class="headerlink" title="預備配接器"></a>預備配接器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MessageListAdapter extends RecyclerView.Adapter&lt;MessageListAdapter.ViewHolder&gt; &#123;

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;
        return null;
    &#125;

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) &#123;

    &#125;

    @Override
    public int getItemCount() &#123;
        return 0;
    &#125;

&#125;</code></pre>

<h3 id="編寫-ViewHolder"><a href="#編寫-ViewHolder" class="headerlink" title="編寫 ViewHolder"></a>編寫 <code>ViewHolder</code></h3><div class="note warning simple"><p>這個 <code>ViewHolder</code> 要放在 <code>MessageListAdapter</code> 裏面：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">class MessageListAdapter &#123;
    class ViewHolder &#123;

    &#125;
&#125;</code></pre></div>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">public static class ViewHolder extends RecyclerView.ViewHolder &#123;

&#125;</code></pre>

<h3 id="定義視圖變量"><a href="#定義視圖變量" class="headerlink" title="定義視圖變量"></a>定義視圖變量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public final LinearLayout layoutBotMessage, layoutUserMessage;
public final TextView tvBotMessage, tvUserMessage;</code></pre>

<h3 id="編寫建構子，獲取視圖"><a href="#編寫建構子，獲取視圖" class="headerlink" title="編寫建構子，獲取視圖"></a>編寫建構子，獲取視圖</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public ViewHolder(@NonNull LayoutMessageListItemBinding binding) &#123;
    super(binding.getRoot());
    
    layoutBotMessage &#x3D; binding.layoutBotMessage;
    layoutUserMessage &#x3D; binding.layoutUserMessage;
    tvBotMessage &#x3D; binding.tvBotMessage;
    tvUserMessage &#x3D; binding.tvUserMessage;
&#125;</code></pre>

<h2 id="構建主活動頁"><a href="#構建主活動頁" class="headerlink" title="構建主活動頁"></a>構建主活動頁</h2><h3 id="初始化變量"><a href="#初始化變量" class="headerlink" title="初始化變量"></a>初始化變量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private List&lt;MessageModel&gt; listMessage;
private MessageListAdapter adapterMessageList;

private OpenAIUtils client;</code></pre>

<h3 id="配置對話聊天紀錄"><a href="#配置對話聊天紀錄" class="headerlink" title="配置對話聊天紀錄"></a>配置對話聊天紀錄</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Override
protected void onCreate(Bundle savedInstanceState) &#123;
    super.onCreate(savedInstanceState);
    setupChatList();
&#125;

private void setupChatList() &#123;
    client &#x3D; new OpenAIUtils();
    client.setAPIKey(apiKey);
    client.setAPIUrl(apiUrl);
    client.setModel(OpenAIUtils.TEXT_DAVINCI_003)
    client.setTemperature(0.9);


    listMessage &#x3D; new ArrayList&lt;&gt;();
    adapterMessageList &#x3D; new MessageListAdapter(listMessage);
    binding.rvChatList.setAdapter(adapterMessageList);

    var layoutManager &#x3D; new LinearLayoutManager(this);
    layoutManager.setStackFromEnd(true);
    binding.rvChatList.setLayoutManager(layoutManager);
&#125;</code></pre>

<h3 id="獲取回應"><a href="#獲取回應" class="headerlink" title="獲取回應"></a>獲取回應</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void callResponse(String message) &#123;
    try &#123;
        client.setPrompt(prompt);
        client.generateResponse(new Callback() &#123;
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) &#123;
                &#x2F;&#x2F; 顯示報錯訊息

                Log.e(TAG, e.toString())
            &#125;
            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException &#123;
                String responseBody &#x3D; response.body().string();
                try &#123;
                    &#x2F;&#x2F; 獲取回應結果

                    String resultText &#x3D; client.getResponse(responseBody);
                    TextView tvResult &#x3D; binding.tvResult;
                    tvResult.setText(resultText);

                &#125; catch (Exception e) &#123;
                    &#x2F;&#x2F; 顯示報錯訊息

                    Log.e(TAG, client.getErrorResponse(responseBody))
                &#125;
            &#125;
        &#125;);
    &#125; catch (Exception e) &#123;
        &#x2F;&#x2F; 顯示報錯訊息

        Log.e(TAG, e.toString())
    &#125;
&#125;</code></pre>

<h3 id="新增訊息至訊息模型"><a href="#新增訊息至訊息模型" class="headerlink" title="新增訊息至訊息模型"></a>新增訊息至訊息模型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private void addMessage(String message, String sender) &#123;
    runOnUiThread(() -&gt; &#123;
        listMessage.add(new MessageModel(message,sender));
        adapterMessageList.notifyDataSetChanged();
        binding.rvChatList.smoothScrollToPosition(adapterMessageList.getItemCount());
    &#125;);
&#125;</code></pre>

<h3 id="新增機器人回應"><a href="#新增機器人回應" class="headerlink" title="新增機器人回應"></a>新增機器人回應</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private void addResponse(String response) &#123;
    addMessage(response, MessageModel.SENT_BY_BOT);
&#125;</code></pre>

<h3 id="發送已輸入訊息"><a href="#發送已輸入訊息" class="headerlink" title="發送已輸入訊息"></a>發送已輸入訊息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">private void sendMessage(String message) &#123;
    if (TextUtils.isEmpty(message)) &#123;
        Log.e(TAG, &quot;The message is empty&quot;);
    &#125; else &#123;
        addMessage(message, MessageModel.SENT_BY_USER);
        binding.etMessage.setText(&quot;&quot;);
        try &#123;
            callResponse(message);
        &#125; catch (Exception e) &#123;
            Log.e(TAG, e.toString());
        &#125;
    &#125;
&#125;</code></pre>

<h3 id="點擊按鈕發送訊息"><a href="#點擊按鈕發送訊息" class="headerlink" title="點擊按鈕發送訊息"></a>點擊按鈕發送訊息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">binding.inputLayoutMessage.setEndIconOnClickListener(v -&gt; &#123;
    sendMessage(binding.etMessage.getText().toString().trim())
&#125;);</code></pre>

<hr>
<h1 id="源代碼"><a href="#源代碼" class="headerlink" title="源代碼"></a>源代碼</h1><div class="note warning simple"><p>這篇教學會使用 <a href="/post/android-dev-openai-utils">這篇文章</a> 所實現的 OpenAIUtils 程式實現。</p>
</div>

<details class="folding-tag"><summary> 點我看代碼 </summary>
              <div class="content">
              <div class="tabs" id="app_source_code"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="app_source_code-1">Layouts</button><button type="button" class="tab " data-href="app_source_code-2">MessageModel.java</button><button type="button" class="tab " data-href="app_source_code-3">MessageListAdapter.java</button><button type="button" class="tab " data-href="app_source_code-4">MainActivity.java</button></ul><div class="tab-contents"><div class="tab-item-content active" id="app_source_code-1"><pre class="line-numbers language-markup" data-language="markup"><div class="caption"><span>activity_main.xml</span></div><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;
    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;match_parent&quot;
    android:orientation&#x3D;&quot;vertical&quot;&gt;

    &lt;com.google.android.material.progressindicator.LinearProgressIndicator
        android:id&#x3D;&quot;@+id&#x2F;progressBar&quot;
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:indeterminate&#x3D;&quot;true&quot;
        android:visibility&#x3D;&quot;gone&quot;&#x2F;&gt;

    &lt;androidx.recyclerview.widget.RecyclerView
        android:id&#x3D;&quot;@+id&#x2F;rvChatList&quot;
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;0dp&quot;
        android:layout_weight&#x3D;&quot;1&quot;
        android:layout_marginBottom&#x3D;&quot;20dp&quot;
        android:paddingStart&#x3D;&quot;20dp&quot;
        android:paddingEnd&#x3D;&quot;20dp&quot;
        android:paddingTop&#x3D;&quot;10dp&quot;&#x2F;&gt;

    &lt;LinearLayout
        android:layout_width&#x3D;&quot;match_parent&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:orientation&#x3D;&quot;horizontal&quot;
        android:paddingBottom&#x3D;&quot;20dp&quot;
        android:paddingStart&#x3D;&quot;20dp&quot;
        android:paddingEnd&#x3D;&quot;20dp&quot;&gt;

        &lt;com.google.android.material.textfield.TextInputLayout
            android:id&#x3D;&quot;@+id&#x2F;inputLayoutMessage&quot;
            android:layout_width&#x3D;&quot;match_parent&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:hint&#x3D;&quot;@string&#x2F;enter_message&quot;
            app:endIconMode&#x3D;&quot;custom&quot;
            app:endIconDrawable&#x3D;&quot;@drawable&#x2F;ic_baseline_send_24&quot;&gt;

            &lt;EditText
                android:id&#x3D;&quot;@+id&#x2F;etMessage&quot;
                android:layout_width&#x3D;&quot;match_parent&quot;
                android:layout_height&#x3D;&quot;match_parent&quot;
                android:padding&#x3D;&quot;10dp&quot;&#x2F;&gt;

        &lt;&#x2F;com.google.android.material.textfield.TextInputLayout&gt;

    &lt;&#x2F;LinearLayout&gt;

&lt;&#x2F;LinearLayout&gt;</code></pre><pre class="line-numbers language-markup" data-language="markup"><div class="caption"><span>layout_message_list_item.xml</span></div><code class="language-markup">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;
    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;
    android:layout_width&#x3D;&quot;match_parent&quot;
    android:layout_height&#x3D;&quot;wrap_content&quot;
    android:orientation&#x3D;&quot;vertical&quot;
    android:animateLayoutChanges&#x3D;&quot;true&quot;&gt;

    &lt;LinearLayout
        android:id&#x3D;&quot;@+id&#x2F;layoutBotMessage&quot;
        android:layout_width&#x3D;&quot;wrap_content&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:orientation&#x3D;&quot;horizontal&quot;
        android:layout_marginEnd&#x3D;&quot;40dp&quot;
        android:layout_marginBottom&#x3D;&quot;10dp&quot;&gt;

        &lt;TextView
            android:id&#x3D;&quot;@+id&#x2F;tvBotMessage&quot;
            android:layout_width&#x3D;&quot;wrap_content&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:background&#x3D;&quot;@drawable&#x2F;speech_bubble_bot&quot;
            android:lineSpacingExtra&#x3D;&quot;10dp&quot;
            android:padding&#x3D;&quot;15dp&quot;
            android:text&#x3D;&quot;bot message&quot;
            android:textSize&#x3D;&quot;16sp&quot;&#x2F;&gt;

    &lt;&#x2F;LinearLayout&gt;

    &lt;LinearLayout
        android:id&#x3D;&quot;@+id&#x2F;layoutUserMessage&quot;
        android:layout_width&#x3D;&quot;wrap_content&quot;
        android:layout_height&#x3D;&quot;wrap_content&quot;
        android:orientation&#x3D;&quot;horizontal&quot;
        android:layout_gravity&#x3D;&quot;end&quot;
        android:layout_marginStart&#x3D;&quot;40dp&quot;
        android:layout_marginBottom&#x3D;&quot;10dp&quot;&gt;

        &lt;TextView
            android:id&#x3D;&quot;@+id&#x2F;tvUserMessage&quot;
            android:layout_width&#x3D;&quot;wrap_content&quot;
            android:layout_height&#x3D;&quot;wrap_content&quot;
            android:background&#x3D;&quot;@drawable&#x2F;speech_bubble_user&quot;
            android:lineSpacingExtra&#x3D;&quot;10dp&quot;
            android:padding&#x3D;&quot;15dp&quot;
            android:text&#x3D;&quot;my message&quot;
            android:textSize&#x3D;&quot;16sp&quot;&#x2F;&gt;

    &lt;&#x2F;LinearLayout&gt;

&lt;&#x2F;LinearLayout&gt;</code></pre></div><div class="tab-item-content" id="app_source_code-2"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MessageModel &#123;

    public static final String SENT_BY_USER &#x3D; &quot;me&quot;;
    public static final String SENT_BY_BOT &#x3D; &quot;bot&quot;;

    private String message, sender;

    public MessageModel(String message, String sender) &#123;
        this.message &#x3D; message;
        this.sender &#x3D; sender;
    &#125;

    public void setMessage(String message) &#123;
        this.message &#x3D; message;
    &#125;

    public String getMessage() &#123;
        return message;
    &#125;

    public void setSender(String sender) &#123;
        this.sender &#x3D; sender;
    &#125;

    public String getSender() &#123;
        return sender;
    &#125;

&#125;</code></pre></div><div class="tab-item-content" id="app_source_code-3"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MessageListAdapter extends RecyclerView.Adapter&lt;MessageListAdapter.ViewHolder&gt; &#123;

    private List&lt;MessageModel&gt; listMessage;

    public MessageListAdapter(List&lt;MessageModel&gt; listMessage) &#123;
        this.listMessage &#x3D; listMessage;
    &#125;

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;
        var context &#x3D; parent.getContext();
        var inflater &#x3D; LayoutInflater.from(context);
        var binding &#x3D; LayoutMessageListItemBinding.inflate(inflater, parent, false);
        return new ViewHolder(binding);
    &#125;

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) &#123;
        var message &#x3D; listMessage.get(position);
        var context &#x3D; holder.itemView.getContext();

        if (message.getSender().equals(MessageModel.SENT_BY_USER)) &#123;
            holder.layoutBotMessage.setVisibility(View.GONE);
            holder.layoutUserMessage.setVisibility(View.VISIBLE);
            holder.tvUserMessage.setText(message.toString());
        &#125; else &#123;
            holder.layoutUserMessage.setVisibility(View.GONE);
            holder.layoutBotMessage.setVisibility(View.VISIBLE);
            holder.tvBotMessage.setText(message.toString());
        &#125;
    &#125;

    @Override
    public int getItemCount() &#123;
        return listMessage.size();
    &#125;

    public static class ViewHolder extends RecyclerView.ViewHolder &#123;

        LinearLayout layoutBotMessage, layoutUserMessage;
        TextView tvBotMessage, tvUserMessage;

        public ViewHolder(@NonNull LayoutMessageListItemBinding binding) &#123;
            super(binding.getRoot());
            layoutBotMessage &#x3D; binding.layoutBotMessage;
            layoutUserMessage &#x3D; binding.layoutUserMessage;
            tvBotMessage &#x3D; binding.tvBotMessage;
            tvUserMessage &#x3D; binding.tvUserMessage;
        &#125;
    &#125;

&#125;</code></pre></div><div class="tab-item-content" id="app_source_code-4"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MainActivity extends AppCompatActivity &#123;

    private final String OPENAI_URL &#x3D; &quot;https:&#x2F;&#x2F;api.openai.com&#x2F;v1&#x2F;completions&quot;;
    private final String OPENAI_MODEL &#x3D; &quot;text-davinci-003&quot;;
    private final String OPENAI_APIKEY &#x3D; &quot;...&quot;; &#x2F;&#x2F; your API Key

    private ActivityMainBinding binding;

    private List&lt;MessageModel&gt; listMessage;
    private MessageListAdapter adapterMessageList;

    private OpenAIUtils client;

    @Override
    protected void onCreate(Bundle savedInstanceState) &#123;
        super.onCreate(savedInstanceState);
        binding &#x3D; ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        initialize();
    &#125;

    private void initialize() &#123;
        setupChatList();

        binding.inputLayoutMessage.setEndIconOnClickListener(v -&gt; sendMessage(binding.etMessage.getText().toString().trim()));
    &#125;

    private void setupChatList() &#123;
        client &#x3D; new OpenAIUtils();
        client.setAPIKey(apiKey);
        client.setAPIUrl(apiUrl);
        client.setModel(OpenAIUtils.TEXT_DAVINCI_003)
        client.setTemperature(0.9);

        listMessage &#x3D; new ArrayList&lt;&gt;();
        adapterMessageList &#x3D; new MessageListAdapter(listMessage);
        binding.rvChatList.setAdapter(adapterMessageList);

        var layoutManager &#x3D; new LinearLayoutManager(this);
        layoutManager.setStackFromEnd(true);
        binding.rvChatList.setLayoutManager(layoutManager);
    &#125;

    private void sendMessage(String message) &#123;
        if (TextUtils.isEmpty(message)) &#123;
            showError(&quot;The message is empty&quot;);
        &#125; else &#123;
            addMessage(message, MessageModel.SENT_BY_USER);
            binding.etMessage.setText(&quot;&quot;);
            try &#123;
                callResponse(message);
            &#125; catch (Exception e) &#123;
                showError(e.getMessage());
            &#125;
        &#125;
    &#125;

    private void addMessage(String message, String sender) &#123;
        runOnUiThread(() -&gt; &#123;
            listMessage.add(new MessageModel(message,sender));
            adapterMessageList.notifyDataSetChanged();
            binding.rvChatList.smoothScrollToPosition(adapterMessageList.getItemCount());
            updateTypingStatus(false);
        &#125;);
    &#125;

    private void addResponse(String response) &#123;
        addMessage(response, MessageModel.SENT_BY_BOT);
    &#125;

    public void callResponse(String message) &#123;
        try &#123;
            client.setPrompt(prompt);
            client.generateResponse(new Callback() &#123;
                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) &#123;
                    showError(e.getMessage());
                &#125;
                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException &#123;
                    var jsonObject &#x3D; new JSONObject(response.body().string());
                    if (response.isSuccessful()) &#123;
                        var messageResponse &#x3D; client.getResponse(jsonObject);
                        addResponse(messageResponse);
                    &#125; else &#123;
                        var error &#x3D; client.getErrorResponse(jsonObject);
                        addResponse(error);
                    &#125;
                &#125;
            &#125;);
        &#125; catch (Exception e) &#123;
            showError(e.getMessage());
        &#125;
    &#125;

    private void updateTypingStatus(boolean bool) &#123;
        binding.progressBar.setVisibility(bool ? View.VISIBLE : View.GONE);
    &#125;

    private void showError(String message) &#123;
        SnackbarUtil.makeErrorSnackbar(this, message);
    &#125;

&#125;</code></pre></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>
              </div>
            </details>
]]></content>
      <categories>
        <category>人工智能</category>
        <category>程式編寫</category>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Hexo 建立 GitHub 寄存網誌</title>
    <url>/post/web-dev-hexo-blog-tutorial.html</url>
    <content><![CDATA[<p>大家好，歡迎來到我的網誌。欸。。？這裏為什麼好像。。整個樣子都不一樣啊。。</p>
<p>對啦，因為我「搬家」了。</p>
<hr>
<h1 id="棄暗投明轉用-Hexo"><a href="#棄暗投明轉用-Hexo" class="headerlink" title="棄暗投明轉用 Hexo"></a>棄暗投明轉用 Hexo</h1><p>為什麼我要由 Google Blogspot 轉用 Hexo？因為 Blogspot 在加載網誌實在太慢了！！！！有時還要跑不起來。。。於是就改用 Hexo 建立網誌了，安裝方法不複雜，現在開始。</p>
<hr>
<h1 id="版本與系統環境"><a href="#版本與系統環境" class="headerlink" title="版本與系統環境"></a>版本與系統環境</h1><p>本文章將會根據以下規格建立 Hexo 網誌。</p>
<table>
<thead>
<tr>
<th>軟體&#x2F;作業系統</th>
<th>版本號碼</th>
</tr>
</thead>
<tbody><tr>
<td>作業系統</td>
<td>macOS Ventura 13</td>
</tr>
<tr>
<td>Git</td>
<td>v2.39.0</td>
</tr>
<tr>
<td>Nodejs</td>
<td>v18.12.1</td>
</tr>
<tr>
<td>hexo</td>
<td>v6.3.0</td>
</tr>
<tr>
<td>hexo-cli</td>
<td>v4.3.0</td>
</tr>
<tr>
<td>文本編輯軟件</td>
<td>Visual Studio Code</td>
</tr>
</tbody></table>
<div class="note info simple"><p>Git 和 Nodejs 和 Hexo 會稍後教大家安裝。</p>
</div>

<hr>
<h1 id="什麼是-Hexo？"><a href="#什麼是-Hexo？" class="headerlink" title="什麼是 Hexo？"></a>什麼是 Hexo？</h1><p>Hexo 是一個快速、簡單且強大的網誌框架。<strong>Hexo 使用 Markdown（或其他標記語言）解析您的文章</strong>，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。</p>
<div class="note warning simple"><p>我用的是 macOS，Windows 用戶可參考 官方文案（但其實與 macOS 的差不多，可作以下內容參考）。<br>以下我的安裝教學是使用 Homebrew，請預必先安裝 Homebrew 以繼續接下來的教學，請到 官方網站 瞭解安裝 Homebrew。</p>
</div>

<hr>
<h1 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h1><ol>
<li>Nodejs: 可到官方下載 Nodejs 軟件包，<a href="http://nodejs.org/">按此下載</a> 。</li>
<li>Git<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew install git
brew install git-gui</code></pre></li>
<li>Hexo<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g hexo-cli</code></pre></li>
</ol>
<hr>
<h1 id="解決-EACCES-權限問題"><a href="#解決-EACCES-權限問題" class="headerlink" title="解決 EACCES 權限問題"></a>解決 EACCES 權限問題</h1><p>不過，如果在嘗試安裝 Hexo 的過程中出現 EACCES 權限錯誤，請遵循由 npmjs 發布的指導修復該問題。官方<strong>強烈建議不要使用 <code>root</code>、<code>sudo</code> 等方法覆蓋權限</strong>。</p>
<div class="note warning simple"><p><strong>通常 macOS 都會出現 EACCES 權限錯誤</strong>，你可以在執行解決方法前<strong>先備份電腦</strong>，以免不慎出錯。<br>就算你真的想逆官方的意願，都有機會是使用 <code>sudo</code> 方法都不可行。</p>
</div>

<p>在執行 <code>npx install -g hexo-cli</code> 時會報錯：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: EACCES: permission denied, access &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#39;
npm ERR!  &#123; Error: EACCES: permission denied, access &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#39;
npm ERR!   stack: &#39;Error: EACCES: permission denied, access \&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules\&#39;&#39;,
npm ERR!   errno: -13,
npm ERR!   code: &#39;EACCES&#39;,
npm ERR!   syscall: &#39;access&#39;,
npm ERR!   path: &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#39; &#125;
npm ERR!
npm ERR! Please try running this command again as root&#x2F;Administrator.
npm ERR! A complete log of this run can be found in:
npm ERR!     &#x2F;Users&#x2F;nieyuling&#x2F;.npm&#x2F;_logs&#x2F;2019-02-14T07_10_39_923Z-debug.log</code></pre>

<p>簡而言之，因為沒有權限，這裏有簡單的解決方法：在終端機輸入。</p>
<ol>
<li>首先，先在根目錄裏建立新資料夾 <code>npm-global</code>。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir ~&#x2F;.npm-global</code></pre></li>
<li>然後把新資料夾 <code>npm-global</code> 設定為 npm 預設路徑。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NPM_CONFIG_PREFIX&#x3D;~&#x2F;.npm-global</code></pre></li>
</ol>
<p>詳情可見 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">npmjs 指導</a> 。</p>
<hr>
<h1 id="安裝-VSCode-擴充套件"><a href="#安裝-VSCode-擴充套件" class="headerlink" title="安裝 VSCode 擴充套件"></a>安裝 VSCode 擴充套件</h1><p>雖然<strong>官方比較建議 macOS 用戶使用 XCode</strong>，但我堅決不把它下載下來，因為。。它有 7.8GB 之多啊。。。（其實我下載過，不過後來把它刪除了哈哈）。</p>
<p>而我是較常用 VSCode 的，所以就推薦大家用 VSCode，何況 VSCode 有 Hexo 擴充套件，何樂而不為呢？</p>
<p>到 VSCode 擴充套件庫下載 <code>vscode-hexo</code>，或<a href="vscode:extension/codeyu.vscode-hexo">按此下載</a> 。</p>
<hr>
<h1 id="開始建置-Hexo"><a href="#開始建置-Hexo" class="headerlink" title="開始建置 Hexo"></a>開始建置 Hexo</h1><ol>
<li>首先在理想檔案路徑建立新資料夾，如命名為 <code>Hexo</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir hexo</code></pre></li>
<li>前往所建資料夾，再進 npx 界面<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd hexo
npx</code></pre></li>
</ol>
<h2 id="Hexo-指令"><a href="#Hexo-指令" class="headerlink" title="Hexo 指令"></a>Hexo 指令</h2><div class="note info simple"><p>指令建議在 npx 界面進行輸入。</p>
</div>

<h3 id="初始化網誌"><a href="#初始化網誌" class="headerlink" title="初始化網誌"></a>初始化網誌</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init [資料夾名稱]</code></pre>

<p>例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init my-blog</code></pre>

<h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new [文章名稱]</code></pre>

<p>例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new &quot;HelloWorld&quot;</code></pre>

<div class="note warning simple"><p>文章名稱是將會應用並命名到檔案名稱，所以請以英文為主，<strong>慎防和遲免程式因亂碼出錯</strong>，還有<strong>不需要加上副檔名</strong>，因為會自動以 <code>.md</code> 格式生成，例如 <code>HelloWorld.md</code>。</p>
</div>

<hr>
<h4 id="文章的-Front-matter"><a href="#文章的-Front-matter" class="headerlink" title="文章的 Front-matter"></a>文章的 Front-matter</h4><p>Front-matter 是檔案最上方以 <code>---</code> 分隔的區域，用於指定個別檔案的變數，簡而言之，就是<strong>為文章進行配置上的設定</strong>。舉例來說：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
title: 文章標題
date: 2022-12-24 00:13:26
---

文章內容由此處開始</code></pre>

<div class="note info simple"><p><code>title</code>：文章的標題<br><code>date</code>：文章的建立日期，如果你是透過使用 <code>hexo new</code> 指令新增文章的話，建立日期是自動生成的。<br><code>updated</code>：文章的修改 &#x2F; 更新日期<br><code>id</code>：文章的特別編號<br><code>comment</code>：為文章啟用留言區 - <code>on</code> 為啟用；<code>off</code> 為關閉。<br><code>tags</code>：文章的標籤（每篇文章可設定多個標籤）<br><code>categories</code>：文章的類別 (每篇文章只可以設定一個類別) ，但隨着 Hexo 的更新，現在可以多種類別，做法如下：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">categories:
    - [&quot;category1&quot;, &quot;category2&quot;]</code></pre>
<p>我會怎樣運用它們？ 我會把類別當作範疇，例如 Android 開發、網頁開發，這些都是獨立的範疇；而我會用程式語言來作標籤，因為程式語言與這些範疇是環環相扣的。 或許你不是像我一樣撰寫編程類型的網誌文章，但希望你可以參考一下。</p>
</div>

<p>例如：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---
id: 123
title: Hello World
date: 2022-12-24 00:13:26
categories:
    - Red Fruits
tags:
    - Apple
    - Strawberry
    - Red berry
---
文章內容由此處開始</code></pre>

<p>這裏有一個應用例子：取自這個評論 。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="http://disq.us/p/1u9nad0">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">應用例子</div>
            <div class="tag-link-sitename"> 並列分類及子分類應用</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<div class="note info simple"><p>並列分類：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">categories:
    - [Linux]
    - [Tools]</code></pre>
<p>並列 + 子分類：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">categories:
    - [Linux, Hexo]
    - [Tools, PHP]</code></pre></div>

<h3 id="部署文章"><a href="#部署文章" class="headerlink" title="部署文章"></a>部署文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy</code></pre>

<h4 id="本機預覽"><a href="#本機預覽" class="headerlink" title="本機預覽"></a>本機預覽</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server</code></pre>

<p>這樣你便可以經 <code>localhost:4000</code> 本機伺服器看看預覽結果。</p>
<h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><h3 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h3><p>進入 GitHub 網頁，點擊 <code>New</code> 按鈕新建專案，把 <code>Repository name</code> 命名為 <code>username.github.io</code>。</p>
<div class="note info simple"><p><code>username</code> 是你的用戶名稱。</p>
</div>

<p>然後按 <code>Create repository</code>。那就成功建立網域 <code>username.github.io</code>。</p>
<h3 id="把檔案推送到-GitHub"><a href="#把檔案推送到-GitHub" class="headerlink" title="把檔案推送到 GitHub"></a>把檔案推送到 GitHub</h3><h4 id="安裝-Git-相關套件"><a href="#安裝-Git-相關套件" class="headerlink" title="安裝 Git 相關套件"></a>安裝 Git 相關套件</h4><p>回到 hexo 資料夾，在終端機輸入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-deployer-git --save</code></pre>

<h4 id="修改-config-yml-檔案的-deploy-設定"><a href="#修改-config-yml-檔案的-deploy-設定" class="headerlink" title="修改 _config.yml 檔案的 deploy 設定"></a>修改 <code>_config.yml</code> 檔案的 deploy 設定</h4><div class="note warning simple"><p>這個 <code>_config.yml</code> 是 hexo 根目錄內，並非 <code>hexo/themes/</code> 內那個。</p>
</div>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">deploy:
    type: git
    repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git
    branch: master</code></pre>

<ul>
<li><code>type</code>：選擇部屬模式，這裡填 <code>git</code></li>
<li><code>repo</code>：GitHub repository 的連結，記得將 <code>username</code> 修改成自己的帳號名稱</li>
<li><code>branch</code>：選擇分支，預設為 <code>master</code></li>
</ul>
<h3 id="預覽或部署三部曲"><a href="#預覽或部署三部曲" class="headerlink" title="預覽或部署三部曲"></a>預覽或部署三部曲</h3><p>在每次進行修改後，通常都會做以下三部曲，避免更新不完全。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code></pre>

<p>如果你是要在本機伺服器預覽：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code></pre>

<ul>
<li><code>cl</code> 是 <code>clean</code>，清除快取檔案 <code>db.json</code> 和 <code>public</code> 已產生靜態檔案。</li>
<li><code>g</code> 是 <code>generate</code>，產生靜態檔案。</li>
<li><code>d</code> 是 <code>deploy</code>，部署網站。</li>
<li><code>s</code> 是 <code>server</code>，以本機伺服器 <code>localhost:4000</code> 預覽網站。<br>那就可以到 <code>https://username.github.io</code> 造訪網誌了。</li>
</ul>
<div class="note danger simple"><p>取決於網誌文章的數目，在一旦更新網誌內容後，你需要稍等片刻，因為 Github 需要一些時間才能夠成功部署。</p>
</div>

<hr>
<h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>用了 Hexo 後，發現它真的不錯用，沒有後悔推薦你們使用。</p>
<ol>
<li><p>加載速度快<br>這個我是精神為之一振的關鍵，皆因我都深陷了在 Blogspot 的緩慢維度一陣子了，對它尤其難受，有時想回味一下自己寫的文章內容，卻遲遲都不給我加載出來，那刻的雅興即時消逝，甚至會令到我漸漸不想再寫文章了。有了 Hexo，現在我可以「為所欲為」了，大肆寫文不是夢！<br>加載速度快不僅只是有利於我自己，更會有利於看文章的各位，文章加載的快能夠提升讀者的生活質素，而且都不會因為加載時間慢而不再在這個網誌發掘內容。就我而言，如果一些網站加載慢，不僅會讓我浮躁，而且令我有按「上一頁」的衝動，如此看來，如果你的網站加載時間慢，是絕對會令讀者數量流失，即使你寫的內容多麽的精細，都不會有人欣賞和明白你的心思。</p>
</li>
<li><p>支援 Markdown 標示語言<br>對我來說簡直就是一個字，棒！因為 Markdown 的方便程度是遠高於 HTML 的，在我用 Blogspot 的時候，是用 HTML 撰文的，當我要插入程式碼塊，就要用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code>，那大家知道了，<code>&lt;pre&gt;</code> 是不會編製為跳脫字元的，例如要在程式碼塊加入 HTML 碼，它會以 HTML 顯示了出來，但其實我想展示 HTML 碼給讀者，那這樣就要另外解析，雖然網上都有一鍵解析的工具，但是都是很不方便。<br>不說插入程式碼，其實要定義一般標示都是不方便的，因為大部分的標示都是開閉式的，所以在我寫文的時候，常精都要注意 HTML 的語法，整體感覺不良好。相較之下 Markdown 就方便多了，尤其是我要編製程式碼塊，用 <code>```</code> 語法就可以把一整段程式碼展示出來，不需要理會跳脫字元的問題。另外，因為 Hexo 是終端架設工具，所以檔案是在自己電腦裏，就可以用 VSCode 打開並修改 Markdown 語法的文章，配合快捷鍵的運用，更是事半功倍。</p>
</li>
<li><p>支援內建外掛<br>網誌的文章是你隨心而寫的，因此你寫的內容可能很寛廣的，涉及的東西很多元化，有時可能都要借助一些插件來完成，Hexo 是支援外建外掛的，那可以令到你的網誌不但多元性，而且增加趣味性，例如可以額外擴增日曆、提示塊等。</p>
</li>
<li><p>支援內建主題<br>文章的內容是最重要，而網誌的主題是次要，雖然是次要，但主題能吸引讀者的眼球，主題並不只是說你的網誌主題樣式，還會說排版，有一個好看的版面，就不會令讀者迷失。另外，主題都能反映你的個人風格，當你選擇了一個適合你的主題，便會深深「入坑」。</p>
</li>
</ol>
<p>Hexo 提供了許多主題樣式，有復古的，現代的等等不同風格的主題，重點是，都是免費的！</p>
<p>好了教學到這了，希望大家學會用 Hexo 建立網誌，有問題歡迎在下面留言，下篇文章再見。</p>
]]></content>
      <categories>
        <category>網頁開發</category>
      </categories>
      <tags>
        <tag>YAML</tag>
        <tag>終端機指令</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
