<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android | 建立密鑰庫並以發佈模式運行程序</title>
    <url>/post/android-dev-keystore-and-release-mode.html</url>
    <content><![CDATA[<p>密鑰庫 (Keystore) 是一個<strong>存儲密鑰和證書的安全文件</strong>，Keystore 被用於對應用程式進行簽名，以確保應用程式的完整性和安全性。它包含了一個私鑰和與之相對應的公鑰。</p>
<p>在開發階段，我們通常會使用調試密鑰庫 (Debug Keystore)，它是由 Android SDK 自動生成的，並且不需要我們主動管理。Debug Keystore 用於在開發期間對應用程式進行簽名，方便我們在<strong>測試和調試應用程式時使用</strong>。</p>
<p>當我們要將應用程式發布到 Google Play 商店或其他渠道時，我們需要使用發佈密鑰庫 (Release Keystore)。Release Keystore 是<strong>由開發者自己生成的</strong>，並且需要妥善保管。它將用於對應用程式<strong>進行正式簽名</strong>，以確保應用程式的安全性和真實性。</p>
<div class="note info simple"><p>在 Jetpack Compose 架構中，使用發佈模式啟動應用程式會較調試模式顯著為快，因為發佈模式優化了編譯及 Compose 重組速度。</p>
</div>

<hr>
<h1 id="構建及簽署應用程式"><a href="#構建及簽署應用程式" class="headerlink" title="構建及簽署應用程式"></a>構建及簽署應用程式</h1><p>要進行 <code>release</code> 版本，最重要的就是要範為應用程式簽署，在 Android Studio，上面選單列的 <code>Build</code> 找 <code>Generate Signed Bundle / APK</code></p>
<p>它會問你選擇 AAB (Android App Bundle) 或是 APK，這裏選擇 APK</p>
<p><img src="/post/android-dev-keystore-and-release-mode/img1.png" alt="img1"></p>
<p>如果你之前已經有建立了的 Keystore 就按 Choose existing… 不然就按 Create new</p>
<p><img src="/post/android-dev-keystore-and-release-mode/img2.png" alt="img2"></p>
<h2 id="建立-Keystore"><a href="#建立-Keystore" class="headerlink" title="建立 Keystore"></a>建立 Keystore</h2><p>建立一個 Keystore 需要填妥表格，包括以下項目</p>
<p><img src="/post/android-dev-keystore-and-release-mode/img3.png" alt="img3"></p>
<ul>
<li><code>Key store path</code>: Keystore 檔案 (副檔名為 <code>.keystore</code>) 存放位置，通常如果是獨立只為獨有應用程式用的 Keystore，這個檔案路徑可以存放到專案的根目錄位置 e.g. <code>AndroidStudioProjects/MyApp/myapp_release.keystore</code></li>
<li><code>Password</code>: 設置 Keystore 的密碼</li>
</ul>
<p>而 <code>Key</code> 有幾項需要注意：</p>
<ul>
<li><code>Alias</code>: Key 的名稱，可以用 <code>key</code> 為前綴 e.g. <code>keyMyApp</code>，不規定。</li>
<li><code>Password</code>: 設置 Key 的密碼，如沒有太大問題，這裏可以都使用 Keystore 密碼</li>
<li><code>Validity</code>: 以年數作計算，預設是 <code>25</code>，就是 Key 的有效期為 25 年</li>
</ul>
<p>而 <code>Certificate</code> 細項中：</p>
<ul>
<li><code>First and Last Name</code>: 用戶名稱</li>
</ul>
<p>其餘的按需要就填。</p>
<h2 id="完成-Keystore"><a href="#完成-Keystore" class="headerlink" title="完成 Keystore"></a>完成 Keystore</h2><p>例如完成好的 Keystore，再按 Next</p>
<p><img src="/post/android-dev-keystore-and-release-mode/img4.png" alt="img4"></p>
<p>這裏會問 Keystore 應用到 <code>debug</code> 或是 <code>release</code>，選擇 <code>release</code>，按 Create</p>
<p><img src="/post/android-dev-keystore-and-release-mode/img5.png" alt="img5"></p>
<hr>
<h1 id="配置-release-構建代碼"><a href="#配置-release-構建代碼" class="headerlink" title="配置 release 構建代碼"></a>配置 <code>release</code> 構建代碼</h1><p>在 <code>app</code> 模塊的 <code>build.gradle.kts</code> 加入代碼：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        create(<span class="string">&quot;release&quot;</span>) &#123;</span><br><span class="line">            keyAlias = <span class="string">&quot;XXX&quot;</span></span><br><span class="line">            keyPassword = <span class="string">&quot;XXX&quot;</span>         <span class="comment">// Key 密碼</span></span><br><span class="line">            storeFile = file(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line">            storePassword = <span class="string">&quot;XXX&quot;</span>       <span class="comment">// Keystore 密碼</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    release &#123;</span><br><span class="line">        isMinifyEnabled = <span class="literal">false</span></span><br><span class="line">        proguardFiles(</span><br><span class="line">            getDefaultProguardFile(<span class="string">&quot;proguard-android-optimize.txt&quot;</span>),</span><br><span class="line">            <span class="string">&quot;proguard-rules.pro&quot;</span></span><br><span class="line">        )</span><br><span class="line">        signingConfig = signingConfigs.getByName(<span class="string">&quot;release&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>storeFile</code> 是 Keystore 檔案存放路徑，例子 </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">storeFile = file(<span class="string">&quot;/Users/bluewhaleyt/AndroidStudioProjects/MyApp/myapp_release.keystore&quot;</span>)</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>由於 Keystore 是私密的敏感資料，例如所設定的密碼不應公開，你可以在 <code>~/.gradle/gradle.properties</code> 檔案內把 Keystore 設定存入在內：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RELEASE_KEY_ALIAS=XXX</span><br><span class="line">RELEASE_KEY_PASSWORD=XXX</span><br><span class="line">RELEASE_STORE_FILE_PATH=XXX</span><br><span class="line">RELEASE_STORE_PASSWORD=XXX</span><br></pre></td></tr></table></figure>

<p>然後在 <code>build.gradle.kts</code> 使用 <code>gradle.properties</code> 內的 Keystore 設定</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">keyAlias RELEASE_KEY_ALIAS</span><br><span class="line">keyPassword RELEASE_KEY_PASSWORD</span><br><span class="line">storeFile file(RELEASE_STORE_FILE_PATH)</span><br><span class="line">storePassword RELEASE_STORE_PASSWORD</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="使用-release-構建程式"><a href="#使用-release-構建程式" class="headerlink" title="使用 release 構建程式"></a>使用 <code>release</code> 構建程式</h1><p>把專案 <code>app</code> 的 <code>Build Variant</code> 更改為 <code>release</code> 版本</p>
<div class="note info simple"><p>一旦改 <code>app</code> 的 <code>Build Variant</code> (構建模式)，其他的模塊都會用該構建模式，即一併使用 <code>release</code> 模式。</p>
</div>

<p><img src="/post/android-dev-keystore-and-release-mode/img6.png" alt="img6"></p>
<p>現在 Run 程式就是用 <code>release</code> 模式了</p>
]]></content>
      <categories>
        <category>Android 開發</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose | APK 插件化筆記</title>
    <url>/post/android-dev-plugin-system-implementation-notes.html</url>
    <content><![CDATA[<p>在以往使用 XML 架構的插件化方式，我們需要依賴 <code>AndroidManifest.xml</code> 多個附加插件的 <code>Activity</code>，再透過反射 (Reflection) API 把插件提供的 <code>Activity</code> 開放予主項目程式導入，使得 Android 碎片化。</p>
<p>現在來到新型 Jetpack Compose 架構，因為 Compose 基本上要編寫的 UI 都是一個可組合項 (<code>Composable</code>)，所以事情變得簡單多了。</p>
<div class="note info simple"><p>這個方法仍可應用於傳統的 XML 架構佈局。</p>
</div>

<hr>
<h1 id="插件的配置"><a href="#插件的配置" class="headerlink" title="插件的配置"></a>插件的配置</h1><p>在這個範例中，我們會製作一個 <code>plugin-amazingbutton</code> 插件，提供一個漸變色按鈕作範例。</p>
<p>要記得 <code>plugin-*</code> 模塊 <code>build.gradle.kts</code> 是 Application 而不是 Library 製式，因為插件最終會以 APK 形成。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    alias(libs.plugins.androidApplication)</span><br><span class="line">    alias(libs.plugins.kotlinGradlePlugin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你的插件 APK 是可以開啟的，可以在 <code>plugin-*</code> 模塊的 <code>AndroidManifest.xml</code> 設定應用程式基本配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@android:mipmap/sym_def_app_icon&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;PluginSystemTest - AmazingButton Plugin&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="插件提供的可組合組件"><a href="#插件提供的可組合組件" class="headerlink" title="插件提供的可組合組件"></a>插件提供的可組合組件</h2><p>在這個範例中，這個 <code>plugin-amazingbutton</code> 插件會提供一個製作漸變色按鈕的函式。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AmazingButton</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> AmazingButton: (<span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span>) = &#123;</span><br><span class="line">        GradientButton(</span><br><span class="line">            text = <span class="string">&quot;Button text&quot;</span>,</span><br><span class="line">            gradient = Brush.horizontalGradient(listOf(Color(<span class="number">0xFF28D8A3</span>), Color(<span class="number">0xFF00BEB2</span>)))</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">GradientButton</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    text: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    gradient : <span class="type">Brush</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    onClick: () -&gt; <span class="type">Unit</span> = &#123; &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Button(</span><br><span class="line">        modifier = modifier,</span><br><span class="line">        colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent),</span><br><span class="line">        contentPadding = PaddingValues(),</span><br><span class="line">        onClick = &#123; onClick() &#125;,</span><br><span class="line">    ) &#123;</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .background(gradient)</span><br><span class="line">                .padding(<span class="number">12.</span>dp)</span><br><span class="line">                .then(modifier),</span><br><span class="line">            contentAlignment = Alignment.Center,</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = text)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>你可能會問，為什麼 <code>AmazingButton</code> 不是用平時的函式方式建立，而是用 Lambda 方式建立呢？</p>
<p>因為 Jetpack Compose 的可組合函式經過 JVM 編譯後會生成附加 2 個參數項：<code>Composer</code> 及 <code>Int</code>。如果沿用以下這個方式定義可組合項，可能會因為導致傳入參數錯誤而無法成功重組。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AmazingButton</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你用的是這個方式建立，那麼反射做法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> method: Method =</span><br><span class="line">    plugin.getDeclaredMethod(</span><br><span class="line">        <span class="string">&quot;AmazingButton&quot;</span>,</span><br><span class="line">        Composer::<span class="keyword">class</span>.java,</span><br><span class="line">        <span class="built_in">Int</span>::<span class="keyword">class</span>.java</span><br><span class="line">    )</span><br><span class="line">method.isAccessible = <span class="literal">true</span></span><br><span class="line"><span class="keyword">val</span> obj = plugin.getDeclaredConstructor().newInstance()</span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="獲取檔案存取請求"><a href="#獲取檔案存取請求" class="headerlink" title="獲取檔案存取請求"></a>獲取檔案存取請求</h1><p>在 <code>app</code> 模塊的 <code>AndroidManifest.xml</code> 記得加上使用權限設定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="允許存取所有檔案"><a href="#允許存取所有檔案" class="headerlink" title="允許存取所有檔案"></a>允許存取所有檔案</h2><div class="note warning simple"><p>所有檔案存取 (All File Access) 權限只限於 SDK 30 (Android 11) 或以上使用。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresApi(Build.VERSION_CODES.R)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">requestAllFileAccess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">Context</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Environment.isExternalStorageManager()) &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)</span><br><span class="line">        <span class="keyword">val</span> uri = Uri.fromParts(<span class="string">&quot;package&quot;</span>, context.packageName, <span class="literal">null</span>)</span><br><span class="line">        intent.setData(uri)</span><br><span class="line">        context.startActivity(intent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="管理權限的內容容器"><a href="#管理權限的內容容器" class="headerlink" title="管理權限的內容容器"></a>管理權限的內容容器</h2><p>這個內容容器是用來簡易對權限處理的佈局進行操作，理想用法如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Container &#123; permissionGranted -&gt;</span><br><span class="line">    <span class="keyword">if</span> (permissionGranted) -&gt; Comp1() <span class="keyword">else</span> Comp2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Container</code> 可組合函式會處理好關於權限讀取的程序，我們還會預設把 <code>plugins</code> 資料夾建立到 <code>storage/emulated/0/&lt;程式名稱&gt;/</code> 路徑內。</p>
<details class="folding-tag"><summary> 瀏覽 Container 可組合函式程式碼 </summary>
              <div class="content">
              <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Container</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    content: @<span class="type">Composable</span> <span class="type">ColumnScope</span>.(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">permissionGranted</span>: <span class="type">Boolean</span>, <span class="type">pluginsDir</span>: <span class="type">File</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ) -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">    <span class="keyword">val</span> permissions = arrayOf(</span><br><span class="line">        Manifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class="line">        Manifest.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> readWritePermissionGranted = permissions.all &#123;</span><br><span class="line">        ContextCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> permissionsGranted = <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) &#123;</span><br><span class="line">        Environment.isExternalStorageManager() &amp;&amp; readWritePermissionGranted</span><br><span class="line">    &#125; <span class="keyword">else</span> readWritePermissionGranted</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> launcher = rememberLauncherForActivityResult(</span><br><span class="line">        contract = ActivityResultContracts.RequestMultiplePermissions(),</span><br><span class="line">        onResult = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    LaunchedEffect(<span class="built_in">Unit</span>) &#123;</span><br><span class="line">        launcher.launch(permissions)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">        requestAllFileAccess(context)</span><br><span class="line">        <span class="keyword">val</span> pluginsDir = File(Environment.getExternalStorageDirectory().absolutePath + <span class="string">&quot;/PluginSystemTest/plugins/&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (permissionsGranted) &#123;</span><br><span class="line">            pluginsDir.takeIf &#123; !it.exists()</span><br><span class="line">                it.mkdirs()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Column(</span><br><span class="line">            modifier = Modifier.padding(<span class="number">16.</span>dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            content(permissionsGranted, pluginsDir)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>

<hr>
<h1 id="下載插件-APK-安裝檔"><a href="#下載插件-APK-安裝檔" class="headerlink" title="下載插件 APK 安裝檔"></a>下載插件 APK 安裝檔</h1><h2 id="測試用途：直接編譯-plugin-並匯出"><a href="#測試用途：直接編譯-plugin-並匯出" class="headerlink" title="測試用途：直接編譯 plugin-* 並匯出"></a>測試用途：直接編譯 <code>plugin-*</code> 並匯出</h2><p>你可以直接把其匯出，獲取插件 APK 安裝檔，再手動存放到目標路徑運行，<strong>但只僅作初始測試用途</strong>。</p>
<h2 id="實際用途：把插件-APK-安裝檔存放到-URL-或伺服器端"><a href="#實際用途：把插件-APK-安裝檔存放到-URL-或伺服器端" class="headerlink" title="實際用途：把插件 APK 安裝檔存放到 URL 或伺服器端"></a>實際用途：把插件 APK 安裝檔存放到 URL 或伺服器端</h2><ol>
<li>你可以把插件 APK 安裝檔存放到檔案存放平台，再獲取其下載鏈結，藉由 <code>DownloadManager</code> 把檔案下載並存放到目標路徑。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">”android.permission.INTERNET”/</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">downloadFile</span><span class="params">(context: <span class="type">Context</span>, url: <span class="type">String</span>, file: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> request = DownloadManager.Request(Uri.parse(url))</span><br><span class="line">    request.apply &#123;</span><br><span class="line">        setDestinationUri(file.toUri())</span><br><span class="line">        setTitle(file.name)</span><br><span class="line">        setDescription(<span class="string">&quot;Downloading...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) <span class="keyword">as</span> DownloadManager</span><br><span class="line">    downloadManager.enqueue(request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自已架設伺服器</li>
</ol>
<hr>
<h1 id="顯示並遍歷已下載插件"><a href="#顯示並遍歷已下載插件" class="headerlink" title="顯示並遍歷已下載插件"></a>顯示並遍歷已下載插件</h1><p>基本上就是遍歷檔案路徑的所有檔案，但唯獨只顯示所有屬於 APK 安裝檔的檔案。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MainScreen</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Container &#123; permissionGranted, pluginsDir -&gt;</span><br><span class="line">        <span class="keyword">if</span> (permissionGranted) &#123;</span><br><span class="line">            LazyColumn &#123;</span><br><span class="line">                pluginsDir.listFiles()?.let &#123;</span><br><span class="line">                    items(it) &#123; file -&gt;</span><br><span class="line">                        <span class="keyword">if</span> (file.extension == <span class="string">&quot;apk&quot;</span>) &#123;</span><br><span class="line">                            FileItem(file = file)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">FileItem</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    file: <span class="type">File</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Row(</span><br><span class="line">        modifier = modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .clip(MaterialTheme.shapes.extraLarge)</span><br><span class="line">            .background(MaterialTheme.colorScheme.surfaceContainer)</span><br><span class="line">            .padding(<span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Icon(</span><br><span class="line">            imageVector = Icons.Outlined.Android,</span><br><span class="line">            contentDescription = <span class="literal">null</span>,</span><br><span class="line">            tint = MaterialTheme.colorScheme.primary</span><br><span class="line">        )</span><br><span class="line">        Spacer(modifier = Modifier.width(<span class="number">16.</span>dp))</span><br><span class="line">        Column &#123;</span><br><span class="line">            Text(text = file.nameWithoutExtension, style = MaterialTheme.typography.titleLarge)</span><br><span class="line">            Text(text = file.path, style = MaterialTheme.typography.bodyMedium.copy(color = LocalContentColor.current.copy(<span class="number">0.38f</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="載入插件"><a href="#載入插件" class="headerlink" title="載入插件"></a>載入插件</h1><h2 id="載入插件安裝檔"><a href="#載入插件安裝檔" class="headerlink" title="載入插件安裝檔"></a>載入插件安裝檔</h2><p>我們會透過用 Java 類加載器 (<code>DexClassLoader</code>) 動態載入要使用的插件 APK。另外，我們會為插件存放 Dex 檔案，用於存儲編譯後的 Java 程式碼和資源。當加載插件時，<code>DexClassLoader</code> 會需要在指定的路徑中尋找並加載 Dex 檔案。如果不創建 Dex 目錄，或會導致應用程式在執行時出現錯誤或異常情況。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> PluginManager &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pluginClassLoader: DexClassLoader? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadPluginFromFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        file: <span class="type">File</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: DexClassLoader? &#123;</span><br><span class="line">        <span class="keyword">val</span> filesDir = context.externalCacheDir</span><br><span class="line">        <span class="keyword">val</span> apkFile = File(filesDir?.absolutePath, file.name)</span><br><span class="line">        file.copyTo(apkFile, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> dexFile = File(filesDir, <span class="string">&quot;dex&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (!dexFile.exists()) &#123;</span><br><span class="line">            dexFile.mkdirs()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pluginClassLoader = DexClassLoader(</span><br><span class="line">            apkFile.absolutePath,</span><br><span class="line">            apkFile.absolutePath,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            context.classLoader</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> pluginClassLoader</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="載入插件的程式"><a href="#載入插件的程式" class="headerlink" title="載入插件的程式"></a>載入插件的程式</h2><p>在這個範例中，我們會透過點擊一個按鈕來載入插件提供的漸變色按鈕。</p>
<p>我們可以宣告兩個狀態：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pluginApplySuccess <span class="keyword">by</span> mutableStateOf(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">var</span> pluginCompose <span class="keyword">by</span> mutableStateOf&lt;<span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span>&gt;(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pluginApplySuccess</code>: 用來更新插件成功載入與否的狀態</li>
<li><code>pluginCompose</code>: 用來顯示載入插件後的可組合項</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadAmazingButton</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pluginApplySuccess) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> pluginsDir = Environment.getExternalStorageDirectory().absolutePath + <span class="string">&quot;/PluginSystemTest/plugins/&quot;</span></span><br><span class="line">    <span class="keyword">val</span> pluginFile = PluginManager.loadPluginFromFile(context, File(<span class="string">&quot;<span class="variable">$pluginsDir</span>/plugin-amazingbutton.apk&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> plugin = pluginFile?.loadClass(<span class="string">&quot;com.bluewhaleyt.plugin.amazingbutton.AmazingButton&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    plugin?.let &#123;</span><br><span class="line">        <span class="keyword">val</span> method = plugin.getDeclaredMethod(<span class="string">&quot;getAmazingButton&quot;</span>)</span><br><span class="line">        method.isAccessible = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">val</span> obj = plugin.getDeclaredConstructor().newInstance()</span><br><span class="line">        pluginCompose = method.invoke(obj) <span class="keyword">as</span> (<span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span>)</span><br><span class="line">        pluginApplySuccess = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>經過 JVM 編譯後的 <code>AmazingButton</code> Lambda <code>get()</code> 屬性會變成 Java 的 <code>getAmazingButton()</code> 方法。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MainScreen</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">    Container &#123; permissionGranted, pluginsDir -&gt;</span><br><span class="line">        <span class="keyword">if</span> (permissionGranted) &#123;</span><br><span class="line">            Button(</span><br><span class="line">                onClick = &#123;</span><br><span class="line">                    loadAmazingButton(context)</span><br><span class="line">                &#125;</span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(text = <span class="string">&quot;Load AmazingButton&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            AnimatedContent(</span><br><span class="line">                targetState = pluginCompose,</span><br><span class="line">                label = <span class="string">&quot;Plugin content&quot;</span></span><br><span class="line">            ) &#123; pluginContent -&gt;</span><br><span class="line">                Column(</span><br><span class="line">                    modifier = Modifier</span><br><span class="line">                        .fillMaxWidth()</span><br><span class="line">                        .clip(MaterialTheme.shapes.extraLarge)</span><br><span class="line">                        .background(color = MaterialTheme.colorScheme.primaryContainer)</span><br><span class="line">                        .padding(<span class="number">16.</span>dp)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    Text(text = <span class="string">&quot;Plugins loaded area&quot;</span>)</span><br><span class="line">                    pluginContent()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android 開發</category>
        <category>實驗內容</category>
        <category>學習筆記</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android | CICD 工作流程及報告測試</title>
    <url>/post/android-dev-android-ci-cd.html</url>
    <content><![CDATA[<p>編程及開發，有一個尤關重要的工序就是進行實作工作流程，例如把程式碼的測試報告交託到 Github 工作流程，供用戶或其他開發者使用。</p>
<div class="note warning simple"><p>工作流程應用及用途廣泛，不限於於 Android 程式開發的範疇，<strong>但不同的範疇如網頁編寫、軟件開發都有不同的工作流程的配置</strong>。</p>
</div>

<hr>
<h1 id="什麼是-CICD"><a href="#什麼是-CICD" class="headerlink" title="什麼是 CICD"></a>什麼是 CICD</h1><p>CICD 這個字其實要分拆出來兩個部分 CI 及 CD。CICD 代表<strong>持續整合和持續交付</strong> (Continuous Integration and Continuous Delivery)。它是一種軟體開發實踐方法，旨在自動化軟體的建置、測試和部署過程。</p>
<ul>
<li>CI (持續整合): 開發人員將他們的程式碼<strong>頻繁地整合到共享的版本控制庫</strong>中，以便及早發現和解決衝突或問題。這樣可以確保團隊成員的程式碼<strong>相互協調</strong>，並<strong>提高開發效率</strong>。</li>
<li>CD (持續交付): 在程式碼經過持續整合後，<strong>自動進行測試和部署</strong>，以便快速且可靠地將軟體交付到生產環境中。這種<strong>自動化過程可以減少人為錯誤並提高交付速度</strong>。</li>
</ul>
<p>而通常要流程自動化，就會用到 Github 提供的一個功能：Github Workflow</p>
<hr>
<h1 id="建立一個工作流程執行檔"><a href="#建立一個工作流程執行檔" class="headerlink" title="建立一個工作流程執行檔"></a>建立一個工作流程執行檔</h1><p>有兩種方法</p>
<ol>
<li>利用 Github 平台，你可以按 setup a workflow yourself 由零開始建立，或者找到 Android CI 按 Configure 使用 Android 程式流程配置執行模版檔案<br><img src="/post/android-dev-android-ci-cd/img1.png" alt="使用 Github 建立流程執行檔"></li>
<li>直接在 IDE (整合開發環境) 軟件，如 Android Studio 建立，你可以在項目的根位置新增 <code>.github/workflows/android.yml</code>，例如 <code>android.yml</code>，或者任意檔案名稱，但是資料夾結構和名稱就要一樣。</li>
</ol>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>工作流程有五大部分：</p>
<ol>
<li>Event（事件）：事件是觸發 Workflow 執行的觸發器。常見的事件包括 push（推送程式碼到版本控制庫）、pull_request（發起拉取請求）、schedule（定期觸發）等。當發生指定的事件時，Workflow 就會開始執行。</li>
<li>Jobs（工作）：工作是 Workflow 中的單個單元，用於執行特定的任務。一個 Workflow 可以包含一個或多個工作。每個工作通常都是並行執行的，並且可以在不同的運行環境（如不同的作業系統、不同的容器等）中執行。</li>
<li>Steps（步驟）：步驟是工作中的具體操作步驟，用於定義需要執行的指令和命令。每個步驟都是獨立的，可以在同一工作中按順序執行，也可以在不同工作之間共享資源和數據。</li>
<li>Actions（動作）：動作是事先定義好的可重複使用的操作，用於執行特定的任務。GitHub 提供了許多內建的動作，如建置應用程式、執行測試、部署到雲端等。您也可以自定義自己的動作，或使用其他人分享的動作。</li>
<li>Runners（執行者）是 GitHub Workflow 中用於執行工作的運行環境。它們可以理解為虛擬或實體的主機或容器，用於運行工作中的步驟和動作。<br>GitHub 提供了兩種類型的 Runners：<ul>
<li>Self-hosted Runners（自託管執行者）：這種執行者是由您自己託管的運行環境，可以是實體主機、虛擬機器或容器。您可以在自己的環境中設定和管理這些執行者，以滿足特定的需求和限制。自託管執行者可以與您的內部系統和資源進行交互，並提供更大的靈活性和控制權。</li>
<li>GitHub-hosted Runners（GitHub 托管執行者）：這種執行者是由 GitHub 托管的運行環境，提供了預先配置和管理的虛擬機器或容器。您可以選擇使用這些執行者，並無需擔心配置和管理的細節。GitHub 托管執行者具有多個運行環境選項，包括不同的作業系統（如 Ubuntu、Windows、macOS）和硬體配置（如不同的處理器和內存）。</li>
</ul>
</li>
</ol>
<ul>
<li>使用執行者，您可以在 Workflow 中指定運行環境，並在這些環境中執行步驟和動作。這使您能夠控制和配置工作的運行環境，以確保應用程式在所需的平台上正確運行和測試。另外，執行者還可以與其他 GitHub 功能（如密鑰、存取權杖等）進行集成，以實現更安全的執行環境。</li>
</ul>
<p>在檔案表頭，需要先定義工作流程的名稱，例如是 Android CI</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Android</span> <span class="string">CI</span></span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>CICD 工作流程的 yml 配置執行檔<strong>需要嚴謹的語法及縮排</strong>。</p>
</div>

<h3 id="定義事件"><a href="#定義事件" class="headerlink" title="定義事件"></a>定義事件</h3><p>接下來就要定義事件，我們可以用 <code>on</code> 定義事件，例如最常用的是 <code>pull_request</code> 和 <code>push</code> 事件。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span> </span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="定義工作"><a href="#定義工作" class="headerlink" title="定義工作"></a>定義工作</h3><p>你需要選擇要使用的操作系統進行構建，這裏可以直接選用 <code>ubuntu-latest</code>，這樣接下來要執行的工作都會使用 Ubuntu 最新版本的操作系統運行。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br></pre></td></tr></table></figure>

<h4 id="定義步驟"><a href="#定義步驟" class="headerlink" title="定義步驟"></a>定義步驟</h4><p>接下來你可以使用 Github Workflow 編輯器旁邊的 Marketplace 提供的擬定步驟</p>
<p><img src="/post/android-dev-android-ci-cd/img2.png" alt="Github Workflow 的 Marketplace"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4.1.0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Java</span> <span class="string">JDK</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3.13.0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">a</span> <span class="string">Build</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3.1.3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">app-debug.apk</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">app/build/outputs/apk/debug/app-debug.apk</span></span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>如果你的項目使用更高的 JDK 版本，如 JDK 11 或 JDK 17，需要手動修改 JDK 配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Java</span> <span class="string">JDK</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-java@v3.13.0</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">    <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span> <span class="comment"># JDK，如 oracle, temurin 等</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="string">gradle</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android 開發</category>
        <category>實驗內容</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 版本控制及操作 - JGit 筆記</title>
    <url>/post/dev-jgit-notes.html</url>
    <content><![CDATA[<p>在現代軟體開發中，版本控制是一個不可或缺的工具，它可以幫助我們追蹤和管理程式碼的變化。而 Git 是目前最受歡迎的版本控制系統之一。相信編寫員及開發者對它絕對不陌生，甚至耳熟能詳。</p>
<p>不過這裏最主要，並不是講解 Git 版本控制的操作，而是透過 Java 語言使用 JGit 函式庫進行版本控制的處理。</p>
<h1 id="開始前注意事項"><a href="#開始前注意事項" class="headerlink" title="開始前注意事項"></a>開始前注意事項</h1><ol>
<li>Kotlin 開發者亦可使用 <a href="https://github.com/sya-ri/KGit">KGit</a> 函式庫，該函式庫以 JGit 為基礎，但保留 Kotlin 語法的程式編寫方式</li>
<li>Android 開發在使用 JGit 時，需要注意以下幾點：</li>
</ol>
<ul>
<li>確保 <code>AndroidManifest.xml</code> 聲明權限許可，以及<strong>允許所有檔案權限</strong> (All File Access)，否則報錯 Operation Not Permitted<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>進行指令操作，如克隆遠端存儲庫至本機，需要使用<strong>異步執行緒或 <code>Executor</code> 等相關處理方式</strong>，(Kotlin 則可使用協程)，否則會在執行指令時報錯 <code>NetworkOnMainThreadException</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">executor.execute(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h1 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h1><p>匯入依附元件至 <code>build.gradle</code></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.eclipse.jgit:org.eclipse.jgit:6.8.0.202311291450-r&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="產生本機存儲庫及-git-檔案"><a href="#產生本機存儲庫及-git-檔案" class="headerlink" title="產生本機存儲庫及 .git 檔案"></a>產生本機存儲庫及 <code>.git</code> 檔案</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localRepo = <span class="keyword">new</span> <span class="title class_">FileRepository</span>(localPath + <span class="string">&quot;/.git&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">git = <span class="keyword">new</span> <span class="title class_">Git</span>(localRepo);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="版本控制及操作"><a href="#版本控制及操作" class="headerlink" title="版本控制及操作"></a>版本控制及操作</h1><h2 id="克隆遠端存儲庫至本機"><a href="#克隆遠端存儲庫至本機" class="headerlink" title="克隆遠端存儲庫至本機"></a>克隆遠端存儲庫至本機</h2><div class="note warning simple"><p>要克隆的目錄或資料夾<strong>需要被建立及清空</strong>才能順利克隆遠端存儲庫，不清空則報 Directory XXX is not empty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localPath)</span><br><span class="line"><span class="keyword">if</span> (!dir.exists()) folder.mkdirs();</span><br></pre></td></tr></table></figure></div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Git.cloneRepository()</span><br><span class="line">    .setURI(remotePath)</span><br><span class="line">    .setDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(localPath))</span><br><span class="line">    .call();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>實驗內容</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android | 多功能的 sora-editor 函式庫綜合使用筆記</title>
    <url>/post/android-dev-sora-editor-library-notes.html</url>
    <content><![CDATA[<div class="note warning simple"><p>這篇筆記是純粹為個人而寫的筆記，因為 sora-editor 函式庫太多 API，然而目前為止還沒有正式的 API 文檔，所以唯有自己記下。如果內容有用，我會考慮加上英文翻譯，但我的英文很爛，謝謝。</p>
</div>

<p>sora-editor 是一個多功能的 Android 代碼編輯器庫，這個庫提供了許多功能，包括語法高亮、自動完成等編輯器常用的特性。</p>
<h1 id="基礎入門"><a href="#基礎入門" class="headerlink" title="基礎入門"></a>基礎入門</h1><h2 id="匯入依附元件"><a href="#匯入依附元件" class="headerlink" title="匯入依附元件"></a>匯入依附元件</h2><p>基本上這個函式庫的核心是 <code>editor</code> 模組，它是負責編輯器組件的實現功能。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(platform(<span class="string">&quot;io.github.Rosemoe.sora-editor:bom:0.22.2&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 啟用 Editor 基本模組庫</span></span><br><span class="line">    implementation(<span class="string">&quot;io.github.Rosemoe.sora-editor:editor&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 啟用 Java 語言模組庫</span></span><br><span class="line">    implementation(<span class="string">&quot;io.github.Rosemoe.sora-editor:language-java&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 啟用 TextMate 語法高亮模組庫</span></span><br><span class="line">    implementation(<span class="string">&quot;io.github.Rosemoe.sora-editor:language-textmate&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他處於開發階段的試驗性模組庫，有興趣可以使用</span></span><br><span class="line">    <span class="comment">// 啟用語言伺服器協定 (LSP) 的 Editor 模組庫</span></span><br><span class="line">    implementation(<span class="string">&quot;io.github.Rosemoe.sora-editor:editor-lsp&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 啟用 Tree-Sitter 語法高亮模組庫</span></span><br><span class="line">    implementation(<span class="string">&quot;io.github.Rosemoe.sora-editor:language-treesitter&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定義基本組件至佈局"><a href="#定義基本組件至佈局" class="headerlink" title="定義基本組件至佈局"></a>定義基本組件至佈局</h2><ol>
<li>編輯器<div class="note info simple"><p><code>CodeEditor</code> 視圖通常只會用於「全螢幕」，只可以把 <code>layout_width</code> 和 <code>layout_height</code> 設為絕對值或 <code>match_parent</code>。</p>
</div>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">io.github.rosemoe.sora.widget.CodeEditor</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/editor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>符號插入工具項<br>另外，為了用戶方便使用你的編輯器程式，你可以在 <code>CodeEditor</code> 下方新增一個符號插入工具項，要注意的是，需要加上 <code>HorizontalScrollView</code> 來對工具項進行水平捲動。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">io.github.rosemoe.sora.widget.SymbolInputView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/symbol_input_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
預設的 <code>SymbolInputView</code> 是沒有任何符號提供的，需要手動加入<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> displayText = listOf(<span class="string">&quot;→&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;=&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> insertText  = listOf(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;&#123;&#125;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;()&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;[]&quot;</span>, <span class="string">&quot;]&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line">symbolInputView.apply &#123;</span><br><span class="line">    bindEditor(codeEditor)</span><br><span class="line">    addSymbols(displayText, insertText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p><code>displayText</code> 用來顯示的符號，而 <code>insertText</code> 用來插入的符號</p>
</div></li>
</ol>
<h2 id="設置字體"><a href="#設置字體" class="headerlink" title="設置字體"></a>設置字體</h2><p>在 <code>app/src/main</code> 新建一個 <code>assets</code> 資料夾，再在裏面新建一個 <code>fonts</code> 資料夾，自己把要用的字體檔案放進去。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> font = Typeface.createFromAsset(context.assets, <span class="string">&quot;fonts/JetBrainsMono.ttf&quot;</span>)</span><br><span class="line">editor.apply &#123;</span><br><span class="line">    typefaceText = font</span><br><span class="line">    typefaceLineNumber = font</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p><code>CodeEditor</code> 內建的 <code>isLigatureEnabled</code> <strong>只支援字體連字特性</strong>，如常見的 JetBrains Mono 字型 (別下載 NL (No-ligatures) 是沒有連字特性)</p>
</div>

<h2 id="獲取游標點選的文字"><a href="#獲取游標點選的文字" class="headerlink" title="獲取游標點選的文字"></a>獲取游標點選的文字</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> CodeEditor.<span class="title">getSelectedText</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> cursor = <span class="keyword">this</span>.cursor</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.text.subContent(</span><br><span class="line">        cursor.leftLine,</span><br><span class="line">        cursor.leftColumn,</span><br><span class="line">        cursor.rightLine,</span><br><span class="line">        cursor.rightColumn</span><br><span class="line">    ).toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>例如把點選文字轉成大寫：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">editor.apply &#123;</span><br><span class="line">    commitText(getSelectedText().uppercase())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="獲取目前行的文字"><a href="#獲取目前行的文字" class="headerlink" title="獲取目前行的文字"></a>獲取目前行的文字</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> CodeEditor.<span class="title">getLineNumber</span><span class="params">()</span></span> = <span class="keyword">this</span>.cursor.leftLine</span><br><span class="line"><span class="function"><span class="keyword">fun</span> CodeEditor.<span class="title">getLineNumberText</span><span class="params">(line: <span class="type">Int</span> = <span class="number">0</span>)</span></span> = <span class="keyword">this</span>.text.getLineString(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> currentLineText = editor.getLineNumberText(editor.getLineNumber())</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="進階特性"><a href="#進階特性" class="headerlink" title="進階特性"></a>進階特性</h1><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><code>CodeEditor</code> 提供了許多對於編輯器的行為及事件，當要註冊一個事件，就要用 <code>subscribeEvent()</code> 函數。</p>
<h3 id="內容變動事件"><a href="#內容變動事件" class="headerlink" title="內容變動事件"></a>內容變動事件</h3><p>我們可以使用 <code>ContentChangeEvent</code> 監聽編輯器的文本內容變動</p>
<div class="tabs" id="code_contentchangeevent_kotlin"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_contentchangeevent_kotlin-1">Kotlin</button><button type="button" class="tab " data-href="code_contentchangeevent_kotlin-2">Java</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_contentchangeevent_kotlin-1"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">editor.subscribeEvent(ContentChangeEvent::<span class="keyword">class</span>.java) &#123; _, _ -&gt;</span><br><span class="line">    <span class="comment">// ...      </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_contentchangeevent_kotlin-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">editor.subscribeEvent(ContentChangeEvent.class, <span class="keyword">new</span> <span class="title class_">EventReceiver</span>&lt;ContentChangeEvent&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(<span class="meta">@NonNull</span> ContentChangeEvent event, <span class="meta">@NonNull</span> Unsubscribe unsubscribe)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h3 id="實體鍵盤鍵綁定事件"><a href="#實體鍵盤鍵綁定事件" class="headerlink" title="實體鍵盤鍵綁定事件"></a>實體鍵盤鍵綁定事件</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">editor.subscribeEvent(KeyBindingEvent::<span class="keyword">class</span>.java) &#123; event, _ -&gt;</span><br><span class="line">    <span class="keyword">if</span> ((event.keyCode == KeyEvent.KEYCODE_P) &amp;&amp; event.isShiftPressed) &#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;Shift + P action&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文本搜尋與取代"><a href="#文本搜尋與取代" class="headerlink" title="文本搜尋與取代"></a>文本搜尋與取代</h2><p><code>CodeEditor</code> 內建一個 <code>Searcher</code> 進行文本搜尋，你有兩個方法把搜尋器加入到程式：</p>
<ol>
<li>把搜尋元件加入到懸浮動作頂部列 (<code>ActionBar</code>)，這點 <code>CodeEditor</code> 的 <code>beginSearchMode()</code> 已經會做這件事<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">editor.beginSearchMode()</span><br></pre></td></tr></table></figure></li>
<li>直接用輸入組件 e.g. <code>EditText</code><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">searchInput.addTextChangedListener(<span class="keyword">object</span> : TextWatcher) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeTextChanged</span><span class="params">(charSequence: <span class="type">CharSequence</span>, i: <span class="type">Int</span>, i1: <span class="type">Int</span>, i2: <span class="type">Int</span>)</span></span> &#123;&#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTextChanged</span><span class="params">(charSequence: <span class="type">CharSequence</span>, i: <span class="type">Int</span>, i1: <span class="type">Int</span>, i2: <span class="type">Int</span>)</span></span> &#123;&#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterTextChanged</span><span class="params">(editable: <span class="type">Editable</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (editable.isNotEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                editor.searcher.search(</span><br><span class="line">                    editable.toString, EditorSearcher.SearchOptions(<span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">                )</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: PatternSyntaxException) &#123;</span><br><span class="line">                e.printStacktrace()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> editor.searcher.stopSearch()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p><code>EditorSearcher.SearchOptions()</code> 有兩個重載，</p>
<ol>
<li>這個情況下的接受兩個 <code>boolean</code> 參數，<code>EditorSearcher.SearchOptions(false, false)</code> 必須接受兩個參數，第一個是 <code>ignoreCase</code>，即判斷大小寫須相符的準則，第二個是 <code>useRegex</code>，即使用正則表示式與否。</li>
<li>如果想實現啟用或不啟用全字拼寫須相符、大小寫須相符之類的，這個重載是接受 <code>@IntRange(from = 1, to = 3) int type, boolean ignoreCase</code> 可考慮以下代碼：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> type = <span class="keyword">when</span> &#123;</span><br><span class="line">    regex -&gt; SearchOptions.TYPE_REGULAR_EXPRESSION</span><br><span class="line">    wholeWord -&gt; SearchOptions.TYPE_WHOLE_WORD</span><br><span class="line">    <span class="keyword">else</span> -&gt; SearchOptions.TYPE_NORMAL</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> searchOptions = EditorSearcher.SearchOptions(type, ignoreCase)</span><br></pre></td></tr></table></figure></li>
</ol>
</div></li>
</ol>
<p>至於取代的實現方式，會用到 <code>replaceThis()</code> 或 <code>replaceAll()</code></p>
<ul>
<li><code>replaceThis()</code>: 取代當前所輸入的字符至編輯器</li>
<li><code>replaceAll()</code>: 一併取代所輸入的字符至編輯器</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">editor.searcher.apply &#123;</span><br><span class="line">    replaceThis(replaceInput.text.toString())</span><br><span class="line">    replaceAll(replaceInput.text.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="診斷程序"><a href="#診斷程序" class="headerlink" title="診斷程序"></a>診斷程序</h2><p><code>CodeEditor</code> 並沒有提供診斷程式程序，這個功能你要自行編寫代碼實現，但提供了設置診斷程序的提示和指標器。</p>
<p>支援的嚴重程度 (Severity) 如下：</p>
<ul>
<li><code>SEVERITY_ERROR</code> ：紅色，代表錯誤</li>
<li><code>SEVERITY_WARNING</code>：黃色，代表警告</li>
<li><code>SEVERITY_TYPO</code>：綠色，代表錯別字</li>
</ul>
<div class="tabs" id="code_diagnostics_kotlin"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_diagnostics_kotlin-1">Kotlin</button><button type="button" class="tab " data-href="code_diagnostics_kotlin-2">Java</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_diagnostics_kotlin-1"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">editor.apply &#123;</span><br><span class="line">    diagnostics = DiagnosticsContainer()</span><br><span class="line">    setDiagnostic(<span class="number">36</span>, <span class="number">44</span>, DiagnosticRegion.SEVERITY_ERROR, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Message&quot;</span>,</span><br><span class="line">        listOf(</span><br><span class="line">            Quickfix(<span class="string">&quot;Fix&quot;</span>, <span class="number">0L</span>, <span class="literal">null</span>),</span><br><span class="line">            Quickfix(<span class="string">&quot;Other&quot;</span>, <span class="number">0L</span>, <span class="literal">null</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CodeEditor.<span class="title">setDiagnostic</span><span class="params">(startIndex: <span class="type">Int</span>, endIndex: <span class="type">Int</span>, type: <span class="type">Short</span>, briefMessage: <span class="type">String</span>, detailedMessage: <span class="type">String</span>, list: <span class="type">List</span>&lt;<span class="type">Quickfix</span>&gt;)</span></span> &#123;</span><br><span class="line">    diagnostics?.addDiagnostic(</span><br><span class="line">        DiagnosticRegion(startIndex, endIndex, type, <span class="number">0L</span>,</span><br><span class="line">            DiagnosticDetail(briefMessage, detailedMessage, list, <span class="literal">null</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_diagnostics_kotlin-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">editor.setDiagnostics(<span class="keyword">new</span> <span class="title class_">DiagnosticsContainer</span>());</span><br><span class="line"></span><br><span class="line">setDiagnostic(<span class="number">36</span>, <span class="number">44</span>, DiagnosticRegion.SEVERITY_ERROR, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Message&quot;</span>, List.of(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Quickfix</span>(<span class="string">&quot;Fix&quot;</span>, <span class="number">0L</span>, <span class="literal">null</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Quickfix</span>(<span class="string">&quot;Other&quot;</span>, <span class="number">0L</span>, <span class="literal">null</span>)</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setDiagnostic</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> endIndex, <span class="type">short</span> type, String briefMessage, String detailedMessage, List&lt;Quickfix&gt; list)</span> &#123;</span><br><span class="line">    getDiagnostics().addDiagnostic(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DiagnosticRegion</span>(startIndex, endIndex, type, <span class="number">0L</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DiagnosticDetail</span>(briefMessage, detailedMessage, list, <span class="literal">null</span>)</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p><code>QuickFix</code> 的點擊事件是 <code>Runnable</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Quickfix</span>(<span class="string">&quot;Fix&quot;</span>, <span class="number">0L</span>, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h2 id="Textmate-語法高亮模組庫"><a href="#Textmate-語法高亮模組庫" class="headerlink" title="Textmate 語法高亮模組庫"></a>Textmate 語法高亮模組庫</h2><div class="note info simple"><p>有關主題檔案及語法檔案可在<a href="https://github.com/BlueWhaleYT/TextMate-Resources">我的 Github 資源下載</a>。</p>
</div>

<p>假如配置如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> settings: TextmateSettings = TextmateSettings(</span><br><span class="line">    themesDirectory = <span class="string">&quot;textmate/themes/&quot;</span>,</span><br><span class="line">    languageDirectory = <span class="string">&quot;textmate/languages/&quot;</span>,</span><br><span class="line">    languageGrammarBaseFile = <span class="string">&quot;textmate/languages/languages.json&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="載入可應用主題檔案"><a href="#載入可應用主題檔案" class="headerlink" title="載入可應用主題檔案"></a>載入可應用主題檔案</h3><div class="note danger simple"><p>如果一併把所有主題檔案都載入到 <code>ThemeRegistry</code>，可能會影響效能，較好的做法應該是有需要載入時才載入。</p>
</div>

<div class="tabs" id="textmate_load_themes"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="textmate_load_themes-1">載入單個主題檔案</button><button type="button" class="tab " data-href="textmate_load_themes-2">載入所有主題檔案</button></ul><div class="tab-contents"><div class="tab-item-content active" id="textmate_load_themes-1"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadTheme</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    filePath: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    charset: <span class="type">Charset</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    fileProviderRegistry.addFileProvider(AssetsFileResolver(context.assets))</span><br><span class="line">    themeRegistry.loadTheme(</span><br><span class="line">        ThemeModel(</span><br><span class="line">            IThemeSource.fromInputStream(</span><br><span class="line">                fileProviderRegistry.tryGetInputStream(filePath), filePath, charset</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="textmate_load_themes-2"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadThemes</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    filePaths: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    charset: <span class="type">Charset</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; filePaths.size) &#123;</span><br><span class="line">        <span class="keyword">val</span> filePath = settings.themesDirectory + filePaths[i]</span><br><span class="line">        loadTheme(filePath, charset)</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h3 id="載入可應用語法檔案"><a href="#載入可應用語法檔案" class="headerlink" title="載入可應用語法檔案"></a>載入可應用語法檔案</h3><div class="tabs" id="textmate_load_languages"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="textmate_load_languages-1">載入語法分析庫修錄的語法</button><button type="button" class="tab " data-href="textmate_load_languages-2">以 DSL 載入多個語法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="textmate_load_languages-1"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadLanguages</span><span class="params">()</span></span> = grammarRegistry.loadGrammars(settings.languageGrammarBaseFile)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="textmate_load_languages-2"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadLanguageWithDSL</span><span class="params">(languageDefinitionListBuilder: <span class="type">LanguageDefinitionListBuilder</span>)</span></span> = grammarRegistry.loadGrammars(languageDefinitionListBuilder)</span><br><span class="line"></span><br><span class="line"><span class="comment">// example</span></span><br><span class="line">loadLanguageWithDSL(languages &#123;</span><br><span class="line">    language(<span class="string">&quot;java&quot;</span>) &#123;</span><br><span class="line">        grammar = <span class="string">&quot;<span class="subst">$&#123;settings.languageDirectory&#125;</span>/java/syntaxes/java.tmLanguage.json&quot;</span></span><br><span class="line">        defaultScopeName()</span><br><span class="line">        languageConfiguration = <span class="string">&quot;<span class="subst">$&#123;settings.languageDirectory&#125;</span>/java/language-configuration.json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    language(<span class="string">&quot;python&quot;</span>) &#123;</span><br><span class="line">        grammar = <span class="string">&quot;<span class="subst">$&#123;settings.languageDirectory&#125;</span>/python/syntaxes/python.tmLanguage.json&quot;</span></span><br><span class="line">        defaultScopeName()</span><br><span class="line">        languageConfiguration = <span class="string">&quot;<span class="subst">$&#123;settings.languageDirectory&#125;</span>/python/language-configuration.json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h3 id="應用已載入主題"><a href="#應用已載入主題" class="headerlink" title="應用已載入主題"></a>應用已載入主題</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">applyTheme</span><span class="params">(filePath: <span class="type">String</span>)</span></span> = themeRegistry.setTheme(settings.themesDirectory + filePath)</span><br></pre></td></tr></table></figure>

<h3 id="應用已載入語法"><a href="#應用已載入語法" class="headerlink" title="應用已載入語法"></a>應用已載入語法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">applyLanguage</span><span class="params">(filePath: <span class="type">String</span>, source: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    ensureTextMateTheme()</span><br><span class="line">    <span class="keyword">val</span> language: TextMateLanguage</span><br><span class="line">    <span class="keyword">val</span> editorLanguage = editor.editorLanguage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (editorLanguage <span class="keyword">is</span> TextMateLanguage) &#123;</span><br><span class="line">        language = editorLanguage</span><br><span class="line">        language.updateLanguage(source)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        language = TextMateLanguage.create(source, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    editor.setEditorLanguage(language)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>這裏的 <code>ensureTextMateTheme()</code> 純粹是用作確保這個調用 <code>applyLanguage()</code> 當前所用的主題配置是屬於 TextMate 主題的，因為 <strong><code>TextMateLanguage</code> 所實現的語法高亮只能與相應的 <code>TextMateColorScheme</code> 使用</strong>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ensureTextMateTheme</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> editorColorScheme: EditorColorScheme? = editor.colorScheme</span><br><span class="line">    <span class="keyword">if</span> (editorColorScheme !<span class="keyword">is</span> TextMateColorScheme) &#123;</span><br><span class="line">        editorColorScheme = TextMateColorScheme.create(themeRegistry)</span><br><span class="line">        editor.colorScheme = editorColorScheme</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>用法如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> themeDark = <span class="string">&quot;dark/material-palenight.json&quot;</span></span><br><span class="line"><span class="keyword">val</span> themeLight = <span class="string">&quot;light/material-lighter.json&quot;</span></span><br><span class="line"><span class="keyword">val</span> themes = arrayOf(themeDark, themeLight)</span><br><span class="line"><span class="keyword">val</span> theme = <span class="keyword">if</span> (isDarkMode) themeDark <span class="keyword">else</span> themeLight</span><br><span class="line"></span><br><span class="line">loadThemes(themes)</span><br><span class="line">loadLanguages()</span><br><span class="line">applyTheme(theme)</span><br><span class="line">applyLanguage(theme, <span class="string">&quot;source.java&quot;</span>)</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p><code>source.java</code> 是一個 <code>scopeName</code> 的值，代表現在應用的是 Java 語法。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/atom/language-java/commit/29f977dc42a7e2568b39bb6fb34c4ef108eb59b3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scopeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.java&quot;</span><span class="punctuation">,</span>       <span class="comment">// 想要應用的程式語言，留意 scopeName 值</span></span><br><span class="line">  <span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="Compose-使用方式"><a href="#Compose-使用方式" class="headerlink" title="Compose 使用方式"></a>Compose 使用方式</h1><p>sora-editor 目前暫時還沒支援 Compose 架構的可組合項函式，但是我們可以使用 <code>AndroidView</code> 把 <code>CodeEditor</code> 視圖嵌入至可組合函式內，有兩種方法：</p>
<ol>
<li>直接定義一個新的 <code>CodeEditor</code><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CodeEditor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    properties: ((<span class="type">CodeEditor</span>) -&gt; <span class="type">Unit</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">    <span class="keyword">val</span> editor = remember &#123;</span><br><span class="line">        CodeEditor(context)</span><br><span class="line">            .also &#123;</span><br><span class="line">                properties?.invoke(it)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    AndroidView(</span><br><span class="line">        factory = &#123; editor &#125;,</span><br><span class="line">        modifier = modifier.fillMaxSize(),</span><br><span class="line">        onRelease = &#123; it.release() &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果你已經有一個編輯器的佈局，可以考慮用 <code>inflate</code> 方式<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CodeEditor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    properties: ((<span class="type">CodeEditor</span>) -&gt; <span class="type">Unit</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    AndroidView(</span><br><span class="line">        factory = &#123; View.inflate(it, R.layout.layout_editor_view, <span class="literal">null</span>) &#125;</span><br><span class="line">        modifier = modifier.fillMaxSize()</span><br><span class="line">    ) &#123; view -&gt;</span><br><span class="line">        <span class="keyword">val</span> editor = view.findViewById&lt;CodeEditor&gt;(R.id.editor)</span><br><span class="line">        properties?.invoke(editor)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Android 開發</category>
        <category>實驗內容</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android | NDK 及 C++ Native 程式開發筆記</title>
    <url>/post/android-dev-ndk-cpp-project-notes.html</url>
    <content><![CDATA[<p>C++ 是一種中階程式語言，主要用於遊戲和視覺開發。它也是眾所周知的難以理解的程式語法之一。對於初學者來說，C++ 可以這樣開始：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這種語言與 Android 開發密切相關，因為大多數手機遊戲都是用 C++ 進行編寫和開發的。作為開發 Android 程式的我們，也可以使用 Android Studio 來寫 C++ Native 程式，就像跨領域使用 Java 和 C++ 一樣。</p>
<hr>
<h1 id="初建-C-Native-項目"><a href="#初建-C-Native-項目" class="headerlink" title="初建 C++ Native 項目"></a>初建 C++ Native 項目</h1><p>基本上，如果你是用 Android Studio，可以使用 C++ Native 項目模板建立 C++ Native 程式。</p>
<p><img src="/post/android-dev-ndk-cpp-project-notes/img1.png" alt="C++ 項目模板"></p>
<p>這裏它會要你選擇使用什麼 C++ 版本，通常選擇 Toolchain Default 便可。</p>
<p><img src="/post/android-dev-ndk-cpp-project-notes/img2.png" alt="選擇 C++ 版本"></p>
<h2 id="項目-app-模塊-build-gradle"><a href="#項目-app-模塊-build-gradle" class="headerlink" title="項目 app 模塊 build.gradle"></a>項目 <code>app</code> 模塊 <code>build.gradle</code></h2><p>在 <code>app</code> 模塊的 <code>build.gradle</code> 內的 <code>android</code> 區塊多定義了使用 C++ 函式庫的配置：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;</span><br><span class="line">        path <span class="keyword">file</span>(<span class="string">&#x27;src/main/cpp/CMakeLists.txt&#x27;</span>)</span><br><span class="line">        version <span class="string">&#x27;3.22.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="項目樹狀結構變更"><a href="#項目樹狀結構變更" class="headerlink" title="項目樹狀結構變更"></a>項目樹狀結構變更</h2><p>因為這是一個 C++ Native 項目，所以它會較一般的 Android 項目多附加了一些預設元素，如果你沒有 C++ Native 模板或 Android Studio，可考慮以下樹狀結構變更。</p>
<p><img src="/post/android-dev-ndk-cpp-project-notes/img3.png" alt="樹狀結構變更"></p>
<p>在 app 目錄會多新增了一個 <code>cpp</code> 資料夾，顧名思義，這個資料夾是用來管理及編寫 C++ 語言。</p>
<h3 id="CMake-建構指令碼"><a href="#CMake-建構指令碼" class="headerlink" title="CMake 建構指令碼"></a>CMake 建構指令碼</h3><p>CMake 建構指令碼是一個純文字檔案，檔案名必須為 <code>CMakeLists.txt</code>。就是負責為 C 或 C++ 程式定義要用的函式庫，相當於 Java 的 <code>build.gradle</code>。</p>
<p>根據這個模板，預設的 <code>CMakeLists.txt</code> 內容是這樣的：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information about using CMake with Android Studio, read the</span></span><br><span class="line"><span class="comment"># documentation: https://d.android.com/studio/projects/add-native-code.html.</span></span><br><span class="line"><span class="comment"># For more examples on how to use CMake, see https://github.com/android/ndk-samples.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets the minimum CMake version required for this project.</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declares the project name. The project name can be accessed via $&#123; PROJECT_NAME&#125;,</span></span><br><span class="line"><span class="comment"># Since this is the top level CMakeLists.txt, the project name is also accessible</span></span><br><span class="line"><span class="comment"># with $&#123;CMAKE_PROJECT_NAME&#125; (both CMake variables are in-sync within the top level</span></span><br><span class="line"><span class="comment"># build script scope).</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">&quot;cppapptest&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates and names a library, sets it as either STATIC</span></span><br><span class="line"><span class="comment"># or SHARED, and provides the relative paths to its source code.</span></span><br><span class="line"><span class="comment"># You can define multiple libraries, and CMake builds them for you.</span></span><br><span class="line"><span class="comment"># Gradle automatically packages shared libraries with your APK.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In this top level CMakeLists.txt, $&#123;CMAKE_PROJECT_NAME&#125; is used to define</span></span><br><span class="line"><span class="comment"># the target library name; in the sub-module&#x27;s CMakeLists.txt, $&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment"># is preferred for the same purpose.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to load a library into your app from Java/Kotlin, you must call</span></span><br><span class="line"><span class="comment"># System.loadLibrary() and pass the name of the library defined here;</span></span><br><span class="line"><span class="comment"># for GameActivity/NativeActivity derived applications, the same library name must be</span></span><br><span class="line"><span class="comment"># used in the AndroidManifest.xml file.</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span> SHARED</span><br><span class="line">        <span class="comment"># List C/C++ source files with relative paths to this CMakeLists.txt.</span></span><br><span class="line">        native-lib.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies libraries CMake should link to your target library. You</span></span><br><span class="line"><span class="comment"># can link libraries from various origins, such as libraries defined in this</span></span><br><span class="line"><span class="comment"># build script, prebuilt third-party libraries, or Android system libraries.</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;CMAKE_PROJECT_NAME&#125;</span></span><br><span class="line">        <span class="comment"># List libraries link to the target library</span></span><br><span class="line">        android</span><br><span class="line">        log)</span><br></pre></td></tr></table></figure>

<h3 id="Java-與-C-鏈結產生"><a href="#Java-與-C-鏈結產生" class="headerlink" title="Java 與 C++ 鏈結產生"></a>Java 與 C++ 鏈結產生</h3><p>這個模板預設提供了一個 <code>native-lib.cpp</code> 檔案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_bluewhaleyt_cppapptest_MainActivity_stringFromJNI</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject <span class="comment">/* this */</span>)</span> </span>&#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在 <code>MainActivity.java</code> 多新增了一個載入 <code>native-lib</code> C++ 本機函式庫的程式碼，而及一個 <code>native</code> 關鍵字而成的 C++ 調用函數：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">&quot;cppapptest&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Java-本機介面-JNI"><a href="#Java-本機介面-JNI" class="headerlink" title="Java 本機介面 (JNI)"></a>Java 本機介面 (JNI)</h1><p>JNI 是一個編程框架，透過 Java 虛擬機 (JVM) 調用函式庫，或其他本機程序，本機程序一般使用 C、C++ 或匯編語言 (Assembly) 編寫，從而被編譯為爾件及系統操作的程序。</p>
<p>在以上模板，你可以看到，定義一個 JNI 方法，需要這麼長的程式碼：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_ClassName_functionName</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">    jobject <span class="comment">/* this */</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>在這個範例中，<code>ClassName</code> 是項目的 Java <code>MainActivity</code> 類別 <code>com_bluewhaleyt_cppapptest_MainActivity</code></p>
</div>

<p>而在 Java 程式調用 C++ 函數 <code>functionName()</code>，就要另外定義一個附有 <code>native</code> 關鍵字的相應函數：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">functionName</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>特別要說說 C++ 程式碼：</p>
<ul>
<li><code>extern &quot;C&quot;</code>: 是一個限制使用 C 語言作為命名規則，即該函數將會採用 C 語言進行定義。</li>
<li><code>JNIEXPORT</code> 及 <code>JNICALL</code>: 是定義 JNI 函數的修飾詞。</li>
<li><code>jstring</code>: 是指明函數傳回類型是 Java 的 <code>String</code> 型別</li>
<li><code>JNIEnv</code>: 是一個指向 JNI 環境的指標，提供了在本地程式碼中調用 Java 方法、訪問 Java 對象等操作的方法。</li>
<li><code>jobject</code>: 是一個代表 Java 對象的類型。它可以是任何 Java 對象的參考，並且可以在本地程式碼中用於訪問該對象的屬性和方法。</li>
</ul>
<div class="note info simple"><p>基本上這個 JNI 定義方法不用手動敲的，可以直接用 Android Studio 的自動完成方案：</p>
<p>只要在 Java 定義一個 <code>native</code> 方法：</p>
<p><img src="/post/android-dev-ndk-cpp-project-notes/img4.png" alt="C++ 自動完成方案"></p>
<p>然後就會在 C++ 檔案生成了程式碼：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_bluewhaleyt_cppapptest_MainActivity_myTestFunc</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement myTestFunc()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以你大可以不用學會怎樣寫 JNI 方法，只要理解便可。</p>
</div>

<hr>
<h1 id="動態鏈接庫-so"><a href="#動態鏈接庫-so" class="headerlink" title="動態鏈接庫 (.so)"></a>動態鏈接庫 (<code>.so</code>)</h1><p>把編譯並匯出後的 <code>.apk</code> 檔案修改為 <code>.zip</code> 檔案解壓縮，開啟 lib 資料夾就可以看到 <code>.so</code> 檔案。</p>
<p>Android Studio 的 C++ Native 模板預設支援及提供以下 NDK 架構:</p>
<p><img src="/post/android-dev-ndk-cpp-project-notes/img5.png" alt="NDK .so"></p>
]]></content>
      <categories>
        <category>Android 開發</category>
        <category>實驗內容</category>
        <category>學習筆記</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>C++</tag>
        <tag>NDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose | 導航的基本應用</title>
    <url>/post/jetpack-compose-dev-navigation.html</url>
    <content><![CDATA[<p>在編寫 Jetpack Compose 程式的我們，不再像以前使用 XML 的傳統架構方式來設計程式的不同介面，而是透過編寫多個可組合函式來實現介面的設計。然而，這樣一來就帶出了一個問題，既然在 Compose 中不再使用 <code>Activity</code>，也不能使用 <code>Intent</code> 來切換介面了，那要怎麼做呢？</p>
<p>答案就是使用 Navigation。雖然 Navigation 在傳統的 XML 架構中也有使用，例如在 Fragment 中會用到 <code>NavController</code>，但在 Compose 中也存在並且非常有用。</p>
<p>Navigation 的作用是<strong>持續追蹤應用程式畫面的可組合項返回堆疊</strong>以及各個畫面的狀態。簡單來說，它就是用來切換不同頁面的工具。使用 Navigation 可以輕鬆地定義和管理應用程式的畫面流程，讓我們能夠更方便地控制和切換介面。</p>
<hr>
<h1 id="定義介面的路由"><a href="#定義介面的路由" class="headerlink" title="定義介面的路由"></a>定義介面的路由</h1><p>在開始使用之前，我們可以先定義一下介面路由，定義路由通常有兩種方法：</p>
<ol>
<li>使用 <code>enum class</code> 列舉類：<strong>適合不需要用上參數</strong>的路由，簡單明暸<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">ScreenRoute</span> &#123;</span><br><span class="line">    Main, Second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
你亦可以用這個方式：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">ScreenRoute</span>(</span><br><span class="line">    <span class="keyword">val</span> route: String</span><br><span class="line">) &#123;</span><br><span class="line">    Main(<span class="string">&quot;screen_main&quot;</span>), Second(<span class="string">&quot;screen_second&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用 <code>sealed class</code> 封裝類別：多元化管理不同路由的適用參數<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Screen</span>(</span><br><span class="line">    <span class="keyword">val</span> route: String</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">object</span> MainScreen: Screen(<span class="string">&quot;screen_main&quot;</span>)</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">object</span> SecondScreen: Screen(<span class="string">&quot;screen_second&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<div class="note info simple"><p>建議用 <code>sealed class</code> 來定義介面路由，因為這樣可以<strong>更具彈性處理</strong>。</p>
</div>

<hr>
<h1 id="建立一個導航操作器"><a href="#建立一個導航操作器" class="headerlink" title="建立一個導航操作器"></a>建立一個導航操作器</h1><p>你可以先加入一個可組合函式，例如名為 <code>ScreenNavController()</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScreenNavController</span><span class="params">()</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>修改程式起始的核心部分，如 <code>setContent &#123; ... &#125;</code> 內容內，或 <code>App()</code> 可組合函式，總知你就要把這個 <code>ScreenNavController()</code> 放在程式顯示的開端。</p>
<p>在這個 <code>ScreenNavController()</code> 定義一個 <code>NavHost()</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScreenNavController</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> navController = rememberNavController()</span><br><span class="line">    NavHost(</span><br><span class="line">        navController = navController,</span><br><span class="line">        startDestination = Screen.MainScreen.route</span><br><span class="line">    ) &#123;</span><br><span class="line">        composable(route = Screen.MainScreen.route) &#123;</span><br><span class="line">            MainScreen(navController = navController)</span><br><span class="line">        &#125;</span><br><span class="line">        composable(route = Screen.SecondScreen.route) &#123;</span><br><span class="line">            SecondScreen(navController = navController)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning simple"><p>建議如果這個介面函式 (<code>*Screen</code>) 是會被應用到 <code>NavHost</code>，請加上 <code>navController</code> 參數至可組合函式</p>
</div>

<p>當中：</p>
<ul>
<li><code>rememberNavController()</code>: 一個存取及提升導航的狀態</li>
<li><code>startDestination</code>: 宣告導航首個介面，通常就是 <code>MainScreen</code></li>
<li><code>composable()</code>: 為這個 <code>NavHost</code> 定義所用的介面路由，為相應的介面路由定義所用的可組合函式。</li>
</ul>
<hr>
<h1 id="切換介面的操作"><a href="#切換介面的操作" class="headerlink" title="切換介面的操作"></a>切換介面的操作</h1><h2 id="簡單・純粹切換介面"><a href="#簡單・純粹切換介面" class="headerlink" title="簡單・純粹切換介面"></a>簡單・純粹切換介面</h2><p>例如在 <code>MainScreen</code> 你有一個按鈕，當點擊這個按鈕，就會切換到 <code>SecondScreen</code> 介面。我們可以用 <code>navigate()</code> 函數導航到指定的路由</p>
<div class="note info simple"><p>如果你是使用 <code>enum class</code> 方式，導向路由的方法例如是 <code>route = ScreenRoute.Second.name</code>，要注意因為 <code>Second</code> 是一個列舉，要獲取為字串要附上 <code>name</code> 屬性，變成 <code>&quot;Second&quot;</code></p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MainScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navController: <span class="type">NavController</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Main screen&quot;</span>)</span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123;</span><br><span class="line">                navController.navigate(route = Screen.SecondScreen.route)</span><br><span class="line">            &#125;</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = <span class="string">&quot;Navigate to Second screen&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想返回上一頁，例如在 <code>SecondScreen</code> 可組合函式有一個按鈕，點擊後返回到上一頁，可以用 <code>popBackStack()</code>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SecondScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navController: <span class="type">NavController</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Second screen&quot;</span>)</span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123;</span><br><span class="line">                navController.popBackStack()</span><br><span class="line">            &#125;</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = <span class="string">&quot;Back to Main screen&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="傳入參數的切換介面"><a href="#傳入參數的切換介面" class="headerlink" title="傳入參數的切換介面"></a>傳入參數的切換介面</h2><p>有時候可能你想在切換介面的同時，傳入參數，為接下來的介面得到資料變化，這個時候可以在 <code>composable()</code> 可組合函式定義 <code>arguments</code> 參數。</p>
<p>假如在 <code>MainScreen</code> 現在新增一個輸入框，用來輸入不同值作為參數，切換介面時得到不同的數值變化。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MainScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navController: <span class="type">NavController</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    Column &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Main screen&quot;</span>)</span><br><span class="line"></span><br><span class="line">        TextField(</span><br><span class="line">            value = value,</span><br><span class="line">            onValueChange = &#123; value = it &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123;</span><br><span class="line">                navController.navigate(route = Screen.SecondScreen.route)</span><br><span class="line">            &#125;</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = <span class="string">&quot;Navigate to Second screen&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後當切換到 <code>SecondScreen</code> 介面時，顯示路由所得的參數項，這裏會先給可組合函式多定義 <code>name</code> 參數，這個 <code>Text</code> 是用來顯示參數所傳的值。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SecondScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navController: <span class="type">NavController</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Second screen, hello <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123;</span><br><span class="line">                navController.popBackStack()</span><br><span class="line">            &#125;</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = <span class="string">&quot;Back to Main screen&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在負責 <code>SecondScreen</code> 的 <code>composable()</code> 需要設置 <code>arguments</code>，假定現在這個參數值的類型是 <code>String</code>，而參數名跟 <code>SecondScreen</code> 的參數一樣都是 <code>name</code>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">composable(</span><br><span class="line">    route = Screen.SecondScreen.route + <span class="string">&quot;/&#123;name&#125;&quot;</span>,</span><br><span class="line">    arguments = listOf(</span><br><span class="line">        navArgument(<span class="string">&quot;name&quot;</span>) &#123;</span><br><span class="line">            type = NavType.StringType</span><br><span class="line">            defaultValue = <span class="string">&quot;&quot;</span></span><br><span class="line">            nullable = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">) &#123; entry -&gt;</span><br><span class="line">    SecondScreen(</span><br><span class="line">        navController = navController,</span><br><span class="line">        name = entry.arguments?.getString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意的是 <code>route</code> 因為要傳入參數 <code>name</code>，所以要像一般 URL 或 URI 掛上參數項，<strong>要用一對 <code>&#123;&#125;</code> 把參數括住</strong>。</p>
<p>可以在 <code>Screen.kt</code> 寫一個新的函數 <code>withArgs()</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">withArgs</span><span class="params">(<span class="keyword">vararg</span> args: <span class="type">String</span>)</span></span> = buildString &#123;</span><br><span class="line">    append(route)</span><br><span class="line">    args.forEach &#123; append(<span class="string">&quot;/<span class="variable">$it</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後，在 <code>MainScreen</code> 剛才所寫的 <code>value</code> 輸入狀態中傳入為參數</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var value by remember &#123; mutableStateOf(&quot;&quot;) &#125;</span></span><br><span class="line">onClick = &#123;</span><br><span class="line">    navController.navigate(route = Screen.SecondScreen.withArgs(value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="切換介面的過渡動畫"><a href="#切換介面的過渡動畫" class="headerlink" title="切換介面的過渡動畫"></a>切換介面的過渡動畫</h1><p>以前需要用上 Accompanist 的 <code>AnimatedHost</code>，但現在 Navigation API 更新了，<code>NavHost</code> 支援切換介面的動畫了，而且預設已經設定了淡入淡出動畫：</p>
<div class="note danger simple"><p>目前 <code>NavHost</code> 的過渡動畫特性 API 尚未穩定。</p>
</div>

<p><img src="/post/jetpack-compose-dev-navigation/img1.png" alt="NavHost default animation"></p>
<p>可見設置自訂的過渡動畫需要理解 4 個參數：</p>
<ul>
<li><code>enterTransition</code>：進入目的地時的過渡效果，可以設置目的地進入畫面的動畫效果。</li>
<li><code>exitTransition</code>：離開目的地時的過渡效果，可以設置目的地離開畫面的動畫效果。</li>
<li><code>popEnterTransition</code>：返回上一個目的地時的過渡效果，可以設置返回時目的地進入畫面的動畫效果。</li>
<li><code>popExitTransition</code>：返回上一個目的地時的過渡效果，可以設置返回時目的地離開畫面的動畫效果。</li>
</ul>
<p>例子如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">enterTransition = &#123;</span><br><span class="line">    slideIntoContainer(</span><br><span class="line">        towards = AnimatedContentTransitionScope.SlideDirection.Companion.Left,</span><br><span class="line">        animationSpec = tween(<span class="number">700</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br><span class="line">exitTransition = &#123;</span><br><span class="line">    slideOutOfContainer(</span><br><span class="line">        towards = AnimatedContentTransitionScope.SlideDirection.Companion.Left,</span><br><span class="line">        animationSpec = tween(<span class="number">700</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br><span class="line">popEnterTransition = &#123;</span><br><span class="line">    slideIntoContainer(</span><br><span class="line">        towards = AnimatedContentTransitionScope.SlideDirection.Companion.Right,</span><br><span class="line">        animationSpec = tween(<span class="number">700</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br><span class="line">popExitTransition = &#123;</span><br><span class="line">    slideOutOfContainer(</span><br><span class="line">        towards = AnimatedContentTransitionScope.SlideDirection.Companion.Right,</span><br><span class="line">        animationSpec = tween(<span class="number">700</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>實驗內容</category>
        <category>學習筆記</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Roblox 體驗開發 | 入手編寫筆記</title>
    <url>/post/roblox-dev-get-started-notes.html</url>
    <content><![CDATA[<div class="note info simple"><p>這篇基本上是我入手編寫 Roblox 體驗手稿的筆記，這裏公開出來，給大家可以一起參透一下。<br>更何況，我在這個範疇 (Roblox 體驗手稿開發) 單純是「業餘」意思，只是輕輕接觸一下而已，順便嘗一嘗我未曾接觸過的 Luau （又稱 Lua，Roblox 官方稱其為 Luau）手稿語言。</p>
</div>

<hr>
<h1 id="Lua，對我而言，是新的程式語言"><a href="#Lua，對我而言，是新的程式語言" class="headerlink" title="Lua，對我而言，是新的程式語言"></a>Lua，對我而言，是新的程式語言</h1><p>在 Roblox 體驗開發中，無論是編寫客戶端（即是玩家自己），或是伺服器端，都要用到 Lua 手稿語言編寫。</p>
<p>Roblox 使用 Lua 的原因：</p>
<ol>
<li>一個仿似 C、C# 或 C++ 的程式語言，但省略繁瑣的工序，例如毋須起始定義 <code>Main</code>，而是可以直接在手稿程式中立即編寫。</li>
<li>Roblox 認受性以及對象絕大多數都是來自較年輕的玩家，所以以這種<strong>高階程式語言</strong>編寫，有助輕鬆處理遊戲邏輯。</li>
</ol>
<p>Lua 不只應用於編寫 Roblox 體驗及遊戲，還可以進行：</p>
<ul>
<li>網頁開發：因為 Lua 能與伺服器端溝通，所以可以建置及編寫網上應用程式以及開發人員工具。</li>
<li>數據分析：常應用於<strong>機器學習</strong>，建構數據預測的模型及算法。</li>
<li>軟件開發：編寫邏輯複雜的遊戲之餘，亦可以為手機應用程序編寫伺服器端的邏輯。</li>
<li>學術研究：<strong>原型開發</strong>及<strong>概念驗證</strong>實作，如<strong>領域特定語言</strong> (DSL) 就是其中一項成功的試驗。</li>
</ul>
<hr>
<h1 id="萬變不離其宗：界面與編程"><a href="#萬變不離其宗：界面與編程" class="headerlink" title="萬變不離其宗：界面與編程"></a>萬變不離其宗：界面與編程</h1><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>在 Roblox Studio 中，我們可以在總管內的 <code>StarterGui</code> 新建一個新的 <code>ScreenGui</code>，來設計界面。</p>
<p>常用組件：</p>
<ul>
<li><code>Frame</code>：一個仿似容器的框，用來顯示特定的 UI 元素，亦可使用框來分類，如： <code>MainFrame</code>、<code>TopBarFrame</code>、<code>ContentFrame</code>。</li>
<li><code>TextLabel</code>：顯示文字的基本元素。</li>
<li><code>TextButton</code>：與 <code>TextLabel</code> 一樣，不過增設了點擊事件等的附加操作。</li>
<li><code>TextBox</code>：輸入文本的框。</li>
<li><code>ImageLabel</code>：顯示圖像的基本元素。</li>
<li><code>ImageButton</code>：<code>ImageLabel</code> 及 <code>TextButton</code> 的結合品。</li>
</ul>
<p>設計界面時要注意的要點：</p>
<ol>
<li>因為 Roblox 是跨平台的，所以要同時考慮其他裝置的屏幕顯示界面的結果。</li>
<li>拖曳 UI 元素的時候，預設更改的值是 <code>Offset</code> (偏移量)，要同時兼顧所有屏幕，需要改用 <code>Scale</code> 比例 (<code>0</code> 至 <code>1</code>)。</li>
</ol>
<h2 id="編程"><a href="#編程" class="headerlink" title="編程"></a>編程</h2><h3 id="界面編程"><a href="#界面編程" class="headerlink" title="界面編程"></a>界面編程</h3><p>剛剛才說完界面拖曳 UI 元素，其實都可以編寫客戶端手稿來構建界面。</p>
<div class="note info simple"><p>在 Lua 的單行註釋 (comment) 中，因為用的語法符是 <code>--</code>，不太輕易閱讀，所以我會以 <code>--&gt;</code> 樣式進行註解（某些開發者的偏好以 <code>--//</code> 樣式），用哪個都沒差，看個人偏好而已。</p>
</div>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--&gt; 服務 (Services)</span></span><br><span class="line"><span class="keyword">local</span> Players = game:GetService(<span class="string">&quot;Players&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 獲取目前的玩家 (玩家自己)</span></span><br><span class="line"><span class="keyword">local</span> Player = Players.LocalPlayer</span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt; 從玩家自己中獲取 PlayerGui</span></span><br><span class="line"><span class="keyword">local</span> PlayerGui = Players.LocalPlayer:WaitForChild(<span class="string">&quot;PlayerGui&quot;</span>)</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>常見的通病：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-local StarterGui = game:GetService(&quot;StarterGui&quot;)</span></span><br><span class="line"><span class="addition">+local PlayerGui = Players.LocalPlayer:WaitForChild(&quot;PlayerGui&quot;)</span></span><br></pre></td></tr></table></figure>

<p>用了 <code>StarterGui</code> 而不是 <code>PlayerGui</code>，所以<strong>寫完出來的界面依舊沒有顯示</strong>，因為 <code>StarterGui</code> 在運行遊戲時是不存在的，如果在 <code>StarterGui</code> <strong>利用拖曳 UI 元素方式構建界面，最終是會被遷移到玩家的 <code>PlayerGui</code> 的</strong>，所以要用的是 <code>PlayerGui</code>。</p>
<p>至於為什麼要 <code>WaitForChild(&quot;PlayerGui&quot;)</code> 呢？因為這個 <code>PlayerGui</code> 不是即時出來的，需要等待玩家加入遊戲了，然後玩家的角色模型加載好了，才有 <code>PlayerGui</code>。</p>
</div>

<h2 id="客戶端與伺服器端"><a href="#客戶端與伺服器端" class="headerlink" title="客戶端與伺服器端"></a>客戶端與伺服器端</h2><p>剛剛都講到。寫這門程式是分客戶端和伺服器端，官方提供了 3 類 Scripts：</p>
<ol>
<li><code>LocalScript</code> 客戶端</li>
<li><code>Script</code> 伺服器端</li>
<li><code>ModuleScript</code>：如果在客戶端執行模塊內函數程式，就是客戶端，反之就是伺服器端</li>
</ol>
<h3 id="客戶端"><a href="#客戶端" class="headerlink" title="客戶端"></a>客戶端</h3><p>客戶端寫的程式就是只會對玩家自己，不會對所有玩家造成影響，例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">setSkinHeadColor</span><span class="params">(player, brickColor)</span></span></span><br><span class="line">    <span class="keyword">local</span> Character = player.Character</span><br><span class="line">    <span class="keyword">for</span> _, _ <span class="keyword">in</span> <span class="built_in">pairs</span>(Character:GetChildren()) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> bodyColors = Character:FindFirstChild(<span class="string">&quot;Body Colors&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> bodyColors <span class="keyword">then</span></span><br><span class="line">            bodyColors.HeadColor = brickColor</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">setSkinHeadColor(Players.LocalPlayer, BrickColor.Red())</span><br></pre></td></tr></table></figure>

<p>改變了的頭部顏色，只有你看到，其他玩家看不到你有這個外觀改變。如果你想其他玩家都看到，就要學會寫伺服器端和遠端事件。</p>
<h3 id="伺服器端-遠端事件"><a href="#伺服器端-遠端事件" class="headerlink" title="伺服器端 - 遠端事件"></a>伺服器端 - 遠端事件</h3><p>遠端事件是伺服器端最常用的一個東西，就是當某些官方提供的 API，例如你在客戶端執行它創，可能會報錯：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx can only be called from the Server</span><br></pre></td></tr></table></figure>

<p>這個時候，遠端事件就大派用場了。</p>
<p>你可以直接在工作區總管在 <code>ReplicatedStorage</code> 加入 <code>RemoteEvent</code> 或者直接用程式新增一個：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> MyRemoteEvent = Instance.new(<span class="string">&quot;RemoteEvent&quot;</span>, ReplicatedStorage)</span><br><span class="line">MyRemoteEvent.Name = <span class="string">&quot;MyRemoteEvent&quot;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">客戶端 → 伺服器端</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">客戶端</td>
<td><code>RemoteEvent:FireServer(args)</code></td>
</tr>
<tr>
<td align="center">伺服器端</td>
<td><code>RemoteEvent.OnServerEvent:Connect(function(player, args))</code></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">伺服器端 → 客戶端</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">伺服器端</td>
<td><code>RemoteEvent:FireClient(player, args)</code></td>
</tr>
<tr>
<td align="center">客戶端</td>
<td><code>RemoteEvent.OnClientEvent:Connect(function(args))</code></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">伺服器端 → 所有客戶端（所有玩家）</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">伺服器端</td>
<td><code>RemoteEvent:FireAllClients(args)</code></td>
</tr>
<tr>
<td align="center">客戶端</td>
<td><code>RemoteEvent.OnClientEvent:Connect(function(args))</code></td>
</tr>
</tbody></table>
<h4 id="客戶端-→-伺服器端"><a href="#客戶端-→-伺服器端" class="headerlink" title="客戶端 → 伺服器端"></a>客戶端 → 伺服器端</h4><p>在 <code>LocalScript</code> 用 <code>FireServer()</code> 觸發在伺服器端的遠端事件所寫程式</p>
<div class="note warning simple"><p><code>OnServerEvent:Connect()</code> 接受的參數首先一定要是 <code>Player</code> 類型的參數。</p>
</div>

<div class="tabs" id="c2s_code"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="c2s_code-1">伺服器端</button><button type="button" class="tab " data-href="c2s_code-2">客戶端</button></ul><div class="tab-contents"><div class="tab-item-content active" id="c2s_code-1"><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ReplicatedStorage.MyRemoteEvent:Connect(<span class="function"><span class="keyword">function</span><span class="params">(player, brickColor)</span></span></span><br><span class="line">    setSkinHeadColor(player, brickColor)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="c2s_code-2"><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ReplicatedStorage.MyRemoteEvent:FireServer(BrickColor.Red())</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      <categories>
        <category>實驗內容</category>
        <category>Roblox 體驗開發</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>Roblox</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose | 客製化主題實作筆記</title>
    <url>/post/jetpack-compose-dev-custom-theme-implementation-notes.html</url>
    <content><![CDATA[<p>在編寫 Jetpack Compose 程式時，常常會使用到質感設計 2 或質感設計 3 的設計框架，作為應用程式的基本設計風格。這是因為質感設計 2 和質感設計 3 提供了許多簡潔明瞭的組件，官方建議在構建 Jetpack Compose 程式時，盡量使用這些框架進行開發。</p>
<p>然而，一些知名的大型公司可能會選擇採用與質感設計不同的設計風格，來<strong>展現他們自家應用程式的獨特性</strong>。這也反映了應用程式的多樣性，避免出現與其他應用程式相似的情況。有些公司會<strong>在質感設計的框架基礎上進行改革</strong>，有些則會<strong>從頭開始自己撰寫設計框架</strong>。</p>
<p>不可否認的是，官方為 Jetpack Compose 所撰寫的質感設計主題都是使用他們自家開發的 API。因此，我們可以<strong>參考原始的質感設計實現程式碼，來撰寫自己的設計主題</strong>。這樣我們就可以擁有自己定制的設計風格了。</p>
<p>這裏有官方教學，不過是以質感設計 2 為基礎的，有興趣看可按此：<a href="https://developer.android.com/jetpack/compose/designsystems/custom?hl=zh-tw#implementing-fully-custom">官方教學文案</a>，這裏會著重於使用質感設計 3 的實作方式。</p>
<hr>
<table>
<thead>
<tr>
<th>明亮主題</th>
<th>黑暗主題</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/post/jetpack-compose-dev-custom-theme-implementation-notes/img1.png" alt="Showcase = Light mode"></td>
<td><img src="/post/jetpack-compose-dev-custom-theme-implementation-notes/img2.png" alt="Showcase = Dark mode"></td>
</tr>
</tbody></table>
<p>以上是製成品，這篇筆記會記下有關自訂主題的實現方式。</p>
<hr>
<h1 id="參照-MaterialTheme-程式碼"><a href="#參照-MaterialTheme-程式碼" class="headerlink" title="參照 MaterialTheme 程式碼"></a>參照 <code>MaterialTheme</code> 程式碼</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> MaterialTheme &#123;</span><br><span class="line">    <span class="keyword">val</span> colorScheme: ColorScheme</span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalColorScheme.current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> typography: Typography</span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalTypography.current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> shapes: Shapes</span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalShapes.current</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>預設的質感設計 3 提供了三個設計指標</p>
<ul>
<li><code>colorScheme</code>: 要應用的色彩配置</li>
<li><code>typography</code>: 要應用的字型及字體</li>
<li><code>shapes</code>: 要應用的形狀，如形狀的弧度</li>
</ul>
<p>然後你會發現。。。<strong>其實沒有內置像素密度、尺寸 (dimension)、間距 (spacing) 等常用指標</strong>，有見及此，我們可以自己參照原型，寫一個更好用的主題。</p>
<hr>
<h1 id="導入自訂主題"><a href="#導入自訂主題" class="headerlink" title="導入自訂主題"></a>導入自訂主題</h1><p>姑且命名新主題為 <strong>「BabyWhale」</strong>。</p>
<h2 id="多範疇指標建立"><a href="#多範疇指標建立" class="headerlink" title="多範疇指標建立"></a>多範疇指標建立</h2><h3 id="色彩調色指標"><a href="#色彩調色指標" class="headerlink" title="色彩調色指標"></a>色彩調色指標</h3><p>建立一個 <code>BabyWhaleColor.kt</code>，這個檔案是定義不同主題的顏色配置，例如是淺色和深色主題。</p>
<p>這裏是一個簡單的顏色色板，作用大概是</p>
<ul>
<li><code>Blue</code>: Primary 主色</li>
<li><code>Cyan</code>: Info 提示色</li>
<li><code>Green</code>: Success 成功色</li>
<li><code>Orange</code>: Warning 警告色</li>
<li><code>Red</code>: Error 錯誤&#x2F;危險色</li>
</ul>
<p><code>500</code> 是供淺色主題用的，而 <code>300</code> 則是深色主題。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> Blue_500 = Color(<span class="number">0xFF3366FF</span>)</span><br><span class="line"><span class="keyword">val</span> Blue_300 = Color(<span class="number">0xFF84A9FF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Cyan_500 = Color(<span class="number">0xFF3CC6FC</span>)</span><br><span class="line"><span class="keyword">val</span> Cyan_300 = Color(<span class="number">0xFF89EDFE</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Green_500 = Color(<span class="number">0xFF98E01D</span>)</span><br><span class="line"><span class="keyword">val</span> Green_300 = Color(<span class="number">0xFFCFF575</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Orange_500 = Color(<span class="number">0xFFFFAF3F</span>)</span><br><span class="line"><span class="keyword">val</span> Orange_300 = Color(<span class="number">0xFFFFD88B</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Red_500 = Color(<span class="number">0xFFFF4130</span>)</span><br><span class="line"><span class="keyword">val</span> Red_300 = Color(<span class="number">0xFFFFA182</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> White = Color.White</span><br><span class="line"><span class="keyword">val</span> Black = Color.Black</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>我是使用 <a href="https://colors.eva.design/">Eva Design System</a> 來生成以上的調色，為了較簡單，這裏只採用 <code>500</code> 和 <code>300</code> 色調碼，如果想要再完整的，基本上就是 <code>100</code> 至 <code>900</code> 全都使用。</p>
<p><img src="/post/jetpack-compose-dev-custom-theme-implementation-notes/img3.png" alt="Eva Design System"></p>
</div>

<p>寫一個數據類定義要用的顏色指標，然後把顏色向分予不同的主題模式。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Immutable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">BabyWhaleColors</span>(</span><br><span class="line">    <span class="keyword">val</span> primary: Color,</span><br><span class="line">    <span class="keyword">val</span> info: Color,</span><br><span class="line">    <span class="keyword">val</span> success: Color,</span><br><span class="line">    <span class="keyword">val</span> warning: Color,</span><br><span class="line">    <span class="keyword">val</span> error: Color,</span><br><span class="line">    <span class="keyword">val</span> background: Color,</span><br><span class="line">    <span class="keyword">val</span> onBackground: Color,</span><br><span class="line">    <span class="keyword">val</span> onPrimary: Color</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> LightColorScheme = BabyWhaleColors(</span><br><span class="line">    primary = Blue_500,</span><br><span class="line">    info = Cyan_500,</span><br><span class="line">    success = Green_500,</span><br><span class="line">    warning = Orange_500,</span><br><span class="line">    error = Red_500,</span><br><span class="line">    background = White,</span><br><span class="line">    onBackground = Black,</span><br><span class="line">    onPrimary = White</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> DarkColorScheme = BabyWhaleColors(</span><br><span class="line">    primary = Blue_300,</span><br><span class="line">    info = Cyan_300,</span><br><span class="line">    success = Green_300,</span><br><span class="line">    warning = Orange_300,</span><br><span class="line">    error = Red_300,</span><br><span class="line">    background = Black,</span><br><span class="line">    onBackground = White,</span><br><span class="line">    onPrimary = Black</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> LocalBabyWhaleColors = staticCompositionLocalOf &#123; LightColorScheme &#125;</span><br></pre></td></tr></table></figure>

<h3 id="字型指標"><a href="#字型指標" class="headerlink" title="字型指標"></a>字型指標</h3><p>建立一個 <code>BabyWhaleTypography.kt</code>，用來管理主題的應用字型</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Immutable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">BabyWhaleTypography</span>(</span><br><span class="line">    <span class="keyword">val</span> headline: TextStyle,</span><br><span class="line">    <span class="keyword">val</span> title: TextStyle,</span><br><span class="line">    <span class="keyword">val</span> subtitle: TextStyle,</span><br><span class="line">    <span class="keyword">val</span> body: TextStyle,</span><br><span class="line">    <span class="keyword">val</span> label: TextStyle</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> babyWhaleTypography = BabyWhaleTypography(</span><br><span class="line">    headline = TextStyle(</span><br><span class="line">        fontSize = <span class="number">27.</span>sp,</span><br><span class="line">        fontFamily = FontFamily.SansSerif,</span><br><span class="line">        fontWeight = FontWeight.Black,</span><br><span class="line">    ),</span><br><span class="line">    title = TextStyle(</span><br><span class="line">        fontSize = <span class="number">21.</span>sp,</span><br><span class="line">        fontFamily = FontFamily.SansSerif,</span><br><span class="line">        fontWeight = FontWeight.Bold,</span><br><span class="line">    ),</span><br><span class="line">    subtitle = TextStyle(</span><br><span class="line">        fontSize = <span class="number">19.</span>sp,</span><br><span class="line">        fontFamily = FontFamily.SansSerif,</span><br><span class="line">        fontWeight = FontWeight.Normal,</span><br><span class="line">    ),</span><br><span class="line">    body = TextStyle(</span><br><span class="line">        fontSize = <span class="number">18.</span>sp,</span><br><span class="line">        fontFamily = FontFamily.SansSerif,</span><br><span class="line">        fontWeight = FontWeight.Normal,</span><br><span class="line">    ),</span><br><span class="line">    label = TextStyle(</span><br><span class="line">        fontSize = <span class="number">16.</span>sp,</span><br><span class="line">        fontFamily = FontFamily.SansSerif,</span><br><span class="line">        fontWeight = FontWeight.Bold,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> LocalBabyWhaleTypography = staticCompositionLocalOf &#123; babyWhaleTypography &#125;</span><br></pre></td></tr></table></figure>

<h3 id="形狀指標"><a href="#形狀指標" class="headerlink" title="形狀指標"></a>形狀指標</h3><p>建立一個 <code>BabyWhaleShape.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Immutable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">BabyWhaleShape</span>(</span><br><span class="line">    <span class="keyword">val</span> extraSmall: RoundedCornerShape = RoundedCornerShape(<span class="number">4.</span>dp),</span><br><span class="line">    <span class="keyword">val</span> small: RoundedCornerShape = RoundedCornerShape(<span class="number">8.</span>dp),</span><br><span class="line">    <span class="keyword">val</span> medium: RoundedCornerShape = RoundedCornerShape(<span class="number">16.</span>dp),</span><br><span class="line">    <span class="keyword">val</span> large: RoundedCornerShape = RoundedCornerShape(<span class="number">24.</span>dp),</span><br><span class="line">    <span class="keyword">val</span> extraLarge: RoundedCornerShape = RoundedCornerShape(<span class="number">28.</span>dp)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> LocalBabyWhaleShape = staticCompositionLocalOf &#123; BabyWhaleShape() &#125;</span><br></pre></td></tr></table></figure>

<h3 id="自訂間距指標"><a href="#自訂間距指標" class="headerlink" title="自訂間距指標"></a>自訂間距指標</h3><p>新建 <code>BabyWhaleSpacing.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">BabyWhaleSpacing</span>(</span><br><span class="line">    <span class="keyword">val</span> small: Dp = <span class="number">8.</span>dp,</span><br><span class="line">    <span class="keyword">val</span> medium: Dp = <span class="number">16.</span>dp,</span><br><span class="line">    <span class="keyword">val</span> large: Dp = <span class="number">24.</span>dp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> LocalBabyWhaleSpacing = staticCompositionLocalOf &#123; BabyWhaleSpacing() &#125;</span><br></pre></td></tr></table></figure>

<h2 id="套用指標至主題"><a href="#套用指標至主題" class="headerlink" title="套用指標至主題"></a>套用指標至主題</h2><p>把指標全都寫好後，就可以新建 <code>BabyWhaleTheme.kt</code> ，把主題相關的邏輯通通寫進去。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> BabyWhaleTheme &#123;</span><br><span class="line">    <span class="keyword">val</span> colors: BabyWhaleColors</span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalBabyWhaleColors.current</span><br><span class="line">    <span class="keyword">val</span> typography: BabyWhaleTypography</span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalBabyWhaleTypography.current</span><br><span class="line">    <span class="keyword">val</span> shapes: BabyWhaleShape</span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalBabyWhaleShape.current</span><br><span class="line">    <span class="keyword">val</span> spacing: BabyWhaleSpacing</span><br><span class="line">        <span class="meta">@ReadOnlyComposable</span></span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalBabyWhaleSpacing.current</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後寫 <code>BabyWhaleTheme()</code> 主要用的主題應用函數</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BabyWhaleTheme</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    isDarkMode: <span class="type">Boolean</span> = isSystemInDarkTheme()</span></span>,</span><br><span class="line">    typography: BabyWhaleTypography = BabyWhaleTheme.typography,</span><br><span class="line">    shapes: BabyWhaleShape = BabyWhaleTheme.shapes,</span><br><span class="line">    spacing: BabyWhaleSpacing = BabyWhaleTheme.spacing,</span><br><span class="line">    content: <span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">val</span> colorScheme = <span class="keyword">if</span> (isDarkMode) DarkColorScheme <span class="keyword">else</span> LightColorScheme</span><br><span class="line">    CompositionLocalProvider(</span><br><span class="line">        LocalBabyWhaleColors provides colorScheme,</span><br><span class="line">        LocalBabyWhaleTypography provides typography,</span><br><span class="line">        LocalBabyWhaleShape provides shapes,</span><br><span class="line">        LocalBabyWhaleSpacing provides spacing</span><br><span class="line">    ) &#123;</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .background(colorScheme.background)</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">        ) &#123;</span><br><span class="line">            content()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<details class="folding-tag"><summary> 主題函式庫提供方法 </summary>
              <div class="content">
              <p>如果你是想將主題封裝成依附元件，供不同項目使用，用法其實就像 <code>MaterialTheme</code> 一樣。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AppTheme</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    isDarkMode: <span class="type">Boolean</span> = isSystemInDarkTheme,</span></span></span><br><span class="line"><span class="params"><span class="function">    content: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    BabyWhaleTheme(</span><br><span class="line">        isDarkMode = isDarkMode,</span><br><span class="line">        content = content</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>

<h2 id="自訂組件"><a href="#自訂組件" class="headerlink" title="自訂組件"></a>自訂組件</h2><p>因為 Jetpack Compose 內置提供的大部份組件都是使用質感設計為基礎的，所以如果你要寫一個與這個自訂主題相容的組件，就必須要自己另外再寫，這裏展示例如寫一個不同級別程度的按鈕</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">BabyWhaleButtonType</span> &#123;</span><br><span class="line">    Primary, Info, Success, Warning, Error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTypeColor</span><span class="params">(type: <span class="type">BabyWhaleButtonType</span>)</span></span> = <span class="keyword">when</span> (type) &#123;</span><br><span class="line">    BabyWhaleButtonType.Primary -&gt; BabyWhaleTheme.colors.primary</span><br><span class="line">    BabyWhaleButtonType.Info -&gt; BabyWhaleTheme.colors.info</span><br><span class="line">    BabyWhaleButtonType.Success -&gt; BabyWhaleTheme.colors.success</span><br><span class="line">    BabyWhaleButtonType.Warning -&gt; BabyWhaleTheme.colors.warning</span><br><span class="line">    BabyWhaleButtonType.Error -&gt; BabyWhaleTheme.colors.error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BabyWhaleButton</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    type: <span class="type">BabyWhaleButtonType</span> = BabyWhaleButtonType.Primary,</span></span></span><br><span class="line"><span class="params"><span class="function">    onClick: () -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    content: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Button(</span><br><span class="line">        modifier = modifier,</span><br><span class="line">        onClick = onClick,</span><br><span class="line">        colors = ButtonDefaults.buttonColors(</span><br><span class="line">            containerColor = getTypeColor(type = type),</span><br><span class="line">            contentColor = BabyWhaleTheme.colors.onPrimary</span><br><span class="line">        )</span><br><span class="line">    ) &#123;</span><br><span class="line">        content()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            BabyWhaleTheme &#123;</span><br><span class="line">                Column &#123;</span><br><span class="line">                    <span class="keyword">val</span> types = BabyWhaleButtonType.entries     <span class="comment">// 注意：需要 Kotlin 1.9.10 版本</span></span><br><span class="line">                    types.forEach &#123;</span><br><span class="line">                        BabyWhaleButton(</span><br><span class="line">                            type = it,</span><br><span class="line">                            onClick = &#123; <span class="comment">/*TODO*/</span> &#125;</span><br><span class="line">                        ) &#123;</span><br><span class="line">                            Text(text = <span class="string">&quot;<span class="subst">$&#123;it.name&#125;</span> Button&quot;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="擴充質感主題"><a href="#擴充質感主題" class="headerlink" title="擴充質感主題"></a>擴充質感主題</h1><p>或許你對質感主題仍然情有獨鍾，只是對部分的顏色或其他的指標有點執着。甚至是想另外新增一個第 N 個副色，這裏可考慮用擴充形式，一來不會影響整個主題，二來實現到你的目的，無傷大雅。</p>
<h2 id="擴充屬性"><a href="#擴充屬性" class="headerlink" title="擴充屬性"></a>擴充屬性</h2><p>說好是擴充了，所以就真的是單純用擴展函式來對指標物件進行擴充。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use with MaterialTheme.colorScheme.snackbarAction</span></span><br><span class="line"><span class="keyword">val</span> ColorScheme.snackbarAction: Color</span><br><span class="line">    <span class="keyword">get</span>() = <span class="keyword">if</span> (isLight) Red300 <span class="keyword">else</span> Red700</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use with MaterialTheme.typography.textFieldInput</span></span><br><span class="line"><span class="keyword">val</span> Typography.textFieldInput: TextStyle</span><br><span class="line">    <span class="keyword">get</span>() = TextStyle(<span class="comment">/* ... */</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use with MaterialTheme.shapes.card</span></span><br><span class="line"><span class="keyword">val</span> Shapes.card: Shape</span><br><span class="line">    <span class="keyword">get</span>() = RoundedCornerShape(size = <span class="number">20.</span>dp)</span><br></pre></td></tr></table></figure>

<h2 id="擴充質感主題-1"><a href="#擴充質感主題-1" class="headerlink" title="擴充質感主題"></a>擴充質感主題</h2><p>這個會用到 <code>CompositionLocalProvider</code> 把定義好的擴充顏色作為本機資料。再把這些顏色「包裝」到現有的 <code>MaterialTheme</code>。</p>
<p>假如現在質感設計 3 有 <code>error</code>, <code>onError</code>, <code>errorContainer</code>, <code>onErrorContainer</code>，你覺得不夠，你想看到「成功」，就可以寫一個數據類再加以把顏色定義。</p>
<p>預設會先用 <code>Color.Unspecified</code> (未下定義的顏色值)。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Immutable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">ExtendedColorScheme</span>(</span><br><span class="line">    <span class="keyword">val</span> success: Color,</span><br><span class="line">    <span class="keyword">val</span> onSuccess: Color,</span><br><span class="line">    <span class="keyword">val</span> successContainer: Color,</span><br><span class="line">    <span class="keyword">val</span> onSuccessContainer: Color</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> LocalExtendedColorScheme = staticCompositionLocalOf &#123;</span><br><span class="line">    ExtendedColorScheme(</span><br><span class="line">        success = Color.Unspecified,</span><br><span class="line">        onSuccess = Color.Unspecified,</span><br><span class="line">        successContainer = Color.Unspecified,</span><br><span class="line">        onSuccessContainer = Color.Unspecified,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後像 <code>MaterialTheme</code> 一樣寫一個 <code>object</code> 和可組合函式，但不同的是，我們仍然會用到 <code>MaterialTheme</code>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> ExtendedTheme &#123;</span><br><span class="line">    <span class="keyword">val</span> colorScheme: ExtendedColorScheme</span><br><span class="line">        <span class="meta">@Composable</span></span><br><span class="line">        <span class="keyword">get</span>() = LocalExtendedColorScheme.current</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ExtendedTheme</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">/* 這裏如常處理其他參數 */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    content: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 這裏的顏色值沒有進行特別測試</span></span><br><span class="line">    <span class="keyword">val</span> extendedColors = ExtendedColorScheme(</span><br><span class="line">        success = Color(<span class="number">0xFF98e01d</span>),</span><br><span class="line">        onSuccess = Color(<span class="number">0xFF366B05</span>),</span><br><span class="line">        successContainer = Color(<span class="number">0xFF366B05</span>),</span><br><span class="line">        onSuccessContainer = Color(<span class="number">0xFF7AC015</span>),</span><br><span class="line">    )</span><br><span class="line">    CompositionLocalProvider(LocalExtendedColorScheme provides extendedColors) &#123;</span><br><span class="line">        MaterialTheme(</span><br><span class="line">            <span class="comment">/* 這裏如常處理其他參數 */</span></span><br><span class="line">            content = content</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>學習筆記</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>輕鬆架設免費且有 HTTPS 安全認證網站的多種方案</title>
    <url>/post/web-dev-build-and-host-website-notes.html</url>
    <content><![CDATA[<p>當你完成網站內容的編寫後，想要預覽並準備將網站上傳至網路時，這裡提供了幾種免費且有 HTTPS 安全認證的網站寄存平台供你選擇。</p>
<hr>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="建立-Github-存儲庫項目"><a href="#建立-Github-存儲庫項目" class="headerlink" title="建立 Github 存儲庫項目"></a>建立 Github 存儲庫項目</h2><div class="note info simple"><p>存儲庫名稱會影響 Github Page 寄存網頁的 URL，這點要注意。另外，如果你想寄存非特定存儲庫網頁的鏈結，就要把存儲庫命名為 <code>&lt;Github 用戶名稱&gt;.github.io</code>。</p>
<p>例如：<br><a href="https://username.github.io/blog">https://username.github.io/blog</a> 這裏的 <code>blog</code> 就是一個特定存儲庫，意味著首頁就應該是 <a href="https://username.github.io./">https://username.github.io。</a></p>
</div>

<p>例如在這個範例中，建立一個名為 TestWeb 的存儲庫，並把 .git 鏈結複製到剪貼簿。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img1.png" alt="建立存儲庫"></p>
<p>這裏會使用 VSCode 展示，開啟 VSCode，把複製了的鏈結貼上，然後選擇要把所克隆的項目存放到的檔案路徑。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img2.png" alt="貼上存儲庫 URL 克隆項目"></p>
<h2 id="編寫網頁程式碼"><a href="#編寫網頁程式碼" class="headerlink" title="編寫網頁程式碼"></a>編寫網頁程式碼</h2><p>假設現在我有這樣的網頁程式碼：</p>
<div class="tabs" id="code_site"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_site-1">HTML</button><button type="button" class="tab " data-href="code_site-2">CSS</button><button type="button" class="tab " data-href="code_site-3">JavaScript</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_site-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;assets/style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    This is a test website.</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;assets/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_site-2"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Courier New&#x27;</span>, Courier, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_site-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<h2 id="發佈及變更程式碼"><a href="#發佈及變更程式碼" class="headerlink" title="發佈及變更程式碼"></a>發佈及變更程式碼</h2><p>當你把程式碼檔案寫好後，你會發現左方工作板的「原始檔控制」有更新檔案的變更，這個時候，就可以提交並推送變更，例如輸入 Initial commit 作為初始提交訊息。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img3.png" alt="提交程式碼"></p>
<p>如果成功提交並推送變更，就會在 Github 存儲庫中看到檔案更新。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img4.png" alt="成功提交並推送變更"></p>
<hr>
<h1 id="使用-Github-Page-寄存"><a href="#使用-Github-Page-寄存" class="headerlink" title="使用 Github Page 寄存"></a>使用 Github Page 寄存</h1><p>開啟存儲庫的 Settings，導向左側選單的 Pages 頁面。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img5.png" alt="建置設定"></p>
<p>選擇 <code>main</code> 分支 (或你所命名的其他分支 e.g. <code>master</code>) 作為網頁寄存源,然後點擊 <code>Save</code> 按鈕即可。</p>
<p>完成後，就可以在 Deployment 看到部署結果，如果沒有發生錯誤，就可以開啟網頁了！</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img6.png" alt="部署結果"></p>
<hr>
<h1 id="使用-Netlify-寄存"><a href="#使用-Netlify-寄存" class="headerlink" title="使用 Netlify 寄存"></a>使用 Netlify 寄存</h1><p><a href="https://www.netlify.com/">Netlify</a> 亦是一個免費，架設靜態網頁的寄存服務</p>
<h2 id="建立新的網站"><a href="#建立新的網站" class="headerlink" title="建立新的網站"></a>建立新的網站</h2><p>同樣都會使用 Github 存儲庫作為網頁程式碼的存儲。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img7.png" alt="使用 Github 部署"></p>
<p>點擊 Deploy with Github 部署網站。</p>
<h2 id="選擇使用的存儲庫"><a href="#選擇使用的存儲庫" class="headerlink" title="選擇使用的存儲庫"></a>選擇使用的存儲庫</h2><p>完成好驗證後，就選擇要使用的存儲庫。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img8.png" alt="選擇使用的存儲庫"></p>
<h2 id="完成部署設定"><a href="#完成部署設定" class="headerlink" title="完成部署設定"></a>完成部署設定</h2><p>同樣選擇分支，如果沒有特別的構建及部署設定，就按 Depoly 按鈕。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img9.png" alt="完成部署設定"></p>
<p>部署成功後，就可以開啟網頁。</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img10.png" alt="部署成功結果"></p>
<p>如果想修改網頁 URL，可按 Site configuration &gt; Change site name</p>
<p><img src="/post/web-dev-build-and-host-website-notes/img11.png" alt="修改網頁 URL"></p>
]]></content>
      <categories>
        <category>網頁開發</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Express 框架構建 RESTful API 客戶端</title>
    <url>/post/web-dev-express-restful-api-notes.html</url>
    <content><![CDATA[<p>這裏會簡單記錄一個 RESTful API 對用戶進行增刪查改的操作及處理的客戶端。建議先看了怎樣編寫 Node.js 及 Express 再回來寫 RESTful API:</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="/post/web-dev-nodejs-express-notes">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Node.js 及 Express 框架建置伺服器及動態網頁編寫</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<hr>
<h1 id="JSON-數據庫建立"><a href="#JSON-數據庫建立" class="headerlink" title="JSON 數據庫建立"></a>JSON 數據庫建立</h1><p>基於一個 JSON 數據庫的 <code>data.json</code> 作為 API 獲取的資料來源。</p>
<div class="note info simple"><p>這個 <code>data.json</code> 的內容會經過<strong>增刪查改而有所變更</strong>。</p>
</div>

<p>例如現在預設有 3 個用戶：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Steve&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Heidi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alex&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">67</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我們會根據這個 <code>data.json</code> 而提供的 API:</p>
<table>
<thead>
<tr>
<th>API</th>
<th>HTTP 方法</th>
<th>請求主體</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>listUsers</code></td>
<td>GET</td>
<td>空</td>
<td>獲取所有用戶</td>
</tr>
<tr>
<td><code>getUser</code></td>
<td>GET</td>
<td>JSON 字串</td>
<td>獲取指定用戶</td>
</tr>
<tr>
<td><code>addUser</code></td>
<td>POST</td>
<td>JSON 字串</td>
<td>新增用戶</td>
</tr>
<tr>
<td><code>deleteUser</code></td>
<td>DELETE</td>
<td>空</td>
<td>刪除指定用戶</td>
</tr>
</tbody></table>
<p>本地測試或部署後，可以使用 Postman 或其他工具來測試 API。這裏推薦使用 <a href="https://www.postman.com/downloads/">Postman</a> 軟件。</p>
<hr>
<h1 id="初始-Express-程序"><a href="#初始-Express-程序" class="headerlink" title="初始 Express 程序"></a>初始 Express 程序</h1><p>這個是一個簡單的 Express 程序，我們將會在其中加上對應的 API 路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/data.json`</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`API server listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="listUsers-獲取所有用戶"><a href="#listUsers-獲取所有用戶" class="headerlink" title="listUsers - 獲取所有用戶"></a><code>listUsers</code> - 獲取所有用戶</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/listUsers&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">error</span>: <span class="string">&#x27;Unable to load data&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">end</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img1.png" alt="獲取所有用戶"></p>
<h2 id="getUser-獲取指定用戶"><a href="#getUser-獲取指定用戶" class="headerlink" title="getUser - 獲取指定用戶"></a><code>getUser</code> - 獲取指定用戶</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUser/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">error</span>: <span class="string">&#x27;Unable to load data&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">            <span class="keyword">const</span> user = jsonData.<span class="property">users</span>[<span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>];</span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                res.<span class="title function_">json</span>(user);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                    <span class="attr">error</span>: <span class="string">&#x27;Invalid user&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img2.png" alt="獲取指定用戶"></p>
<h2 id="addUser-新增用戶"><a href="#addUser-新增用戶" class="headerlink" title="addUser - 新增用戶"></a><code>addUser</code> - 新增用戶</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/addUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = req.<span class="property">body</span>;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">error</span>: <span class="string">&#x27;Unable to load data&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">            <span class="keyword">const</span> id = <span class="title class_">Object</span>.<span class="title function_">keys</span>(jsonData.<span class="property">users</span>).<span class="property">length</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">const</span> newUserId = <span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">            jsonData.<span class="property">users</span>[newUserId] = newUser;</span><br><span class="line">            <span class="keyword">const</span> newData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonData, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">            fs.<span class="title function_">writeFile</span>(file, newData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                        <span class="attr">error</span>: <span class="string">&#x27;Unable to write data&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="title function_">json</span>(jsonData.<span class="property">users</span>[newUserId]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>例如，在 Postman 的請求主體中加入以下的 JSON:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img3.png" alt="新增用戶"></p>
<p>現在再嘗試獲取所有用戶：</p>
<p><img src="/post/web-dev-express-restful-api-notes/img4.png" alt="再次獲取所有用戶"></p>
<h2 id="deleteUser-刪除指定用戶"><a href="#deleteUser-刪除指定用戶" class="headerlink" title="deleteUser - 刪除指定用戶"></a><code>deleteUser</code> - 刪除指定用戶</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/deleteUser/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">error</span>: <span class="string">&#x27;Unable to load data&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">            <span class="keyword">const</span> user = jsonData.<span class="property">users</span>[<span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>];</span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                <span class="keyword">delete</span> jsonData.<span class="property">users</span>[<span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>];</span><br><span class="line">                <span class="keyword">const</span> newData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonData, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">                fs.<span class="title function_">writeFile</span>(file, newData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                            <span class="attr">error</span>: <span class="string">&#x27;Unable to write data&#x27;</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                            <span class="attr">message</span>: <span class="string">&#x27;This user is now deleted&#x27;</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">                    <span class="attr">error</span>: <span class="string">&#x27;Invalid user&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img5.png" alt="刪除指定用戶"></p>
<p>現在再嘗試獲取所有用戶：</p>
<p><img src="/post/web-dev-express-restful-api-notes/img6.png" alt="再次獲取所有用戶"></p>
<p>ID <code>3</code> 的用戶已成功刪除。</p>
]]></content>
      <categories>
        <category>網頁開發</category>
        <category>後端技術</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 及 Express 框架建置伺服器及動態網頁編寫</title>
    <url>/post/web-dev-nodejs-express-notes.html</url>
    <content><![CDATA[<p>除了廣為人知使用 HTML5 的靜態網頁編寫，有些時候，可能會需要借助伺服器進行動態網頁編寫，在這篇筆記，將會記錄一下使用 Node.js 及 Express 框架的過程。</p>
<hr>
<h1 id="Node-js-環境以及項目配置"><a href="#Node-js-環境以及項目配置" class="headerlink" title="Node.js 環境以及項目配置"></a>Node.js 環境以及項目配置</h1><p>首先，未安裝 Node.js 的話就要在<a href="https://nodejs.org/en">官網</a>安裝。</p>
<h2 id="初始化軟件套件管理器-NPM"><a href="#初始化軟件套件管理器-NPM" class="headerlink" title="初始化軟件套件管理器 (NPM)"></a>初始化軟件套件管理器 (NPM)</h2><p>在終端機輸入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>輸入完之後，它會一步一步詢問你設定的資料，比如專案名稱、描述、作者等等，如果對某資料不需要現在設定，可按 Enter 直接跳過即可。</p>
<div class="note info simple"><p><code>()</code> 內的資料即是如果跳過，就會用預設 <code>()</code> 內的資料。</p>
</div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package name: (&lt;你的項目名稱&gt;) </span><br><span class="line">version: (1.0.0) </span><br><span class="line">description: </span><br><span class="line">entry point: (index.js) </span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>: </span><br><span class="line">git repository: </span><br><span class="line">keywords: </span><br><span class="line">author:</span><br><span class="line">license: (ISC) </span><br></pre></td></tr></table></figure>

<p>完成後，就會生成一個 <code>package.json</code> 的檔案。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodejs-express-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BlueWhaleYT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="建立起始-JavaScript-檔案"><a href="#建立起始-JavaScript-檔案" class="headerlink" title="建立起始 JavaScript 檔案"></a>建立起始 JavaScript 檔案</h2><p>我們需要建立一個 <code>script.js</code> 檔案進行伺服器端編寫。</p>
<div class="note warning simple"><p>如果不喜歡以 <code>script.js</code> 檔案為名稱，如 <code>app.js</code> 或其他都可以。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>運行 JavaScript 檔案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>因為 Node.js 知道你如果使用 <code>node</code> 指令執行伺服器，檔案必定為 JavaScript，所以副檔名可不寫，這裏等同於：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure></div>

<p>然後你會在終端機看到輸出 Hello World。</p>
<hr>
<h1 id="Node-js-環境與瀏覽器環境的-JavaScript-差異"><a href="#Node-js-環境與瀏覽器環境的-JavaScript-差異" class="headerlink" title="Node.js 環境與瀏覽器環境的 JavaScript 差異"></a>Node.js 環境與瀏覽器環境的 JavaScript 差異</h1><p>編寫 Node.js 雖然都是以 JavaScript 語言編寫，但因為 Node.js 屬於後端 (伺服器端) 編寫，所以是與一般瀏覽器的靜態網頁的 JavaScript 有所不同的。</p>
<p>比如，它們的預設物件是不同的：</p>
<ul>
<li>靜態網頁的 JavaScript: 是以 <code>window</code> 為預設的物件，如 <code>window.alert()</code> 等。</li>
<li>Node.js 環境的 JavaScript: 是以 <code>global</code> 為預設的物件。</li>
</ul>
<div class="note info simple"><p>小知識：因為 <code>console.log()</code> 是一個全域方法，所以姑勿論是靜態網頁或是 Node.js 環境，如果是前者運行，就是 <code>window.console.log()</code>，如後者則 <code>global.console.log()</code>。</p>
</div>

<hr>
<h1 id="建立網站伺服器"><a href="#建立網站伺服器" class="headerlink" title="建立網站伺服器"></a>建立網站伺服器</h1><div class="note info simple"><p>一般而言，如果是處理伺服器的檔案，可選擇使用 <code>server.js</code> 作檔案名稱。</p>
</div>

<p>在 <code>server.js</code> 建立一個伺服器需要用到 <code>http</code> 物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request received&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>createServer()</code> 所傳的參數 <code>req</code> 或 <code>res</code> 分別是 request (請求) 及 response (回應) 的縮寫。</li>
<li><code>listen()</code> 第一個參數是設置伺服器端口 (port)，通常都會用 <code>3000</code>，第二個參數預設是 <code>localhost</code>，這裏省略了：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;localhost&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>現在啟動伺服器:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure>

<p>會輸出 <code>Server listening on port 3000</code>。</p>
<p>打開網頁瀏覽器，在網址輸入 <code>localhost:3000</code>，你發現網頁載入不到，不過你再看終端機，會輸出了 <code>Request received</code>。網頁無法載入是因為我們還沒把 HTML 內容加入到網頁。</p>
<h2 id="加入網頁內容"><a href="#加入網頁內容" class="headerlink" title="加入網頁內容"></a>加入網頁內容</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;meta charset=&quot;UTF-8&quot;&gt;&#x27;</span>)</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">res.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>Node.js 會自動把 <code>res.write(&#39;&lt;meta charset=&quot;UTF-8&quot;&gt;&#39;)</code> 寫在 HTML 的 <code>&lt;head&gt;</code>。</p>
<p><img src="/post/web-dev-nodejs-express-notes/img1.png" alt="Node.js 自動寫在 head"></p>
</div>

<h2 id="回應及顯示不同-HTML-頁面"><a href="#回應及顯示不同-HTML-頁面" class="headerlink" title="回應及顯示不同 HTML 頁面"></a>回應及顯示不同 HTML 頁面</h2><p>有時候你是想顯示整個 HTML 頁面，而不是想手動輸入多行 <code>res.write()</code> 寫 HTML 程式碼，這個時候可以用 <code>fs</code> 物件獲取檔案。</p>
<p>假如現在新增一個名為 pages 資料套，用於存放不同 HTML 頁面檔案：</p>
<div class="tabs" id="code_different_pages_html"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_different_pages_html-1">index.html</button><button type="button" class="tab " data-href="code_different_pages_html-2">about.html</button><button type="button" class="tab " data-href="code_different_pages_html-3">404.html</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_different_pages_html-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_different_pages_html-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>About<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_different_pages_html-3"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="note info simple"><p>404 頁面是用於不存在或無效的頁面所顯示的頁面。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request received&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">&#x27;./pages/&#x27;</span></span><br><span class="line">    <span class="keyword">switch</span>(req.<span class="property">url</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            path += <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/about&#x27;</span>:</span><br><span class="line">            path += <span class="string">&#x27;about.html&#x27;</span></span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            path += <span class="string">&#x27;404.html&#x27;</span></span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">write</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="利用-Express-框架"><a href="#利用-Express-框架" class="headerlink" title="利用 Express 框架"></a>利用 Express 框架</h1><p>Express 框架是一個精簡 Node.js 程式碼的快捷框架，提升編程效率。以上的程式碼都可以使用 Express 框架簡化。</p>
<p>安裝 express 框架：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g express</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>如果你只想 express 框架只用於現在這個項目，就把 <code>-g</code> 刪掉，<code>-g</code> 是 global 全域的意思，即是把 express 框架安裝到你的電腦。另外，<code>i</code> 是 <code>install</code> 是縮寫。</p>
</div>

<p>簡化以上所寫的 Node.js 程式碼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./pages/index.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">root</span>: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./pages/about.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">root</span>: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">sendFile</span>(<span class="string">&#x27;./pages/404.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">root</span>: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="使用範本引擎"><a href="#使用範本引擎" class="headerlink" title="使用範本引擎"></a>使用範本引擎</h2><p>使用 Express 框架取替 Node.js 其中一個原因，就是 Express 支援範本引擎，什麼是範本引擎？它可以讓我們將動態內容與靜態內容分開，讓程式碼更加整潔。</p>
<p>安裝範本引擎 (View engine):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i ejs</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>使用範本引擎的檔案會使用 <code>.ejs</code> 副檔名，而不會用 <code>.html</code> 或 <code>.htm</code> 。</p>
</div>

<h2 id="載入不同-HTML-頁面"><a href="#載入不同-HTML-頁面" class="headerlink" title="載入不同 HTML 頁面"></a>載入不同 HTML 頁面</h2><p>把所有 HTML 頁面檔案副檔名改為 <code>.ejs</code>，然後在 <code>server.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./pages&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;about&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">render</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="建立-Header-及-Footer-範本"><a href="#建立-Header-及-Footer-範本" class="headerlink" title="建立 Header 及 Footer 範本"></a>建立 Header 及 Footer 範本</h2><p>新增檔案 <code>header.ejs</code> 及 <code>footer.ejs</code>。</p>
<div class="tabs" id="code_ejs_header_footer"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_ejs_header_footer-1">header.ejs</button><button type="button" class="tab " data-href="code_ejs_header_footer-2">footer.ejs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_ejs_header_footer-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_ejs_header_footer-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Footer content here</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p><code>server.js</code> 的 <code>render()</code> 加入要傳入的 <code>title</code> 參數，這個 <code>title</code> 參數是來自 <code>header.ejs</code> 的 <code>&lt;%=title%&gt;</code> 取出顯示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Home&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;about&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;About&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">render</span>(<span class="string">&#x27;404&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;404&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然後在不同頁面都可以嵌入 Header 及 Footer，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;header.ejs&#x27;</span>) %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;footer.ejs&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="ES6-模組化"><a href="#ES6-模組化" class="headerlink" title="ES6 模組化"></a>ES6 模組化</h1><p>在 <code>package.json</code> 加上: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>預設的 <code>type</code> 是 CommonJS 模組。</p>
</div>

<p>匯入方式變更，比如：</p>
<div class="tabs" id="code_es6_import"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_es6_import-1">ES6 模組</button><button type="button" class="tab " data-href="code_es6_import-2">CommonJs 模組</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_es6_import-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_es6_import-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      <categories>
        <category>網頁開發</category>
        <category>後端技術</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express</tag>
        <tag>EJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose | 有效管理 UI 介面的狀態</title>
    <url>/post/jetpack-compose-ui-state-sealed-class-notes.html</url>
    <content><![CDATA[<p>在 Jetpack Compose 中，官方強調的是狀態管理的重要性。一般情況下，我們使用 ViewModel 將商業邏輯放在其中，以減少組合函式中的邏輯程式碼，從而提供更好的使用者體驗。</p>
<p>然而，有時我們需要處理一些進階的管理程式，例如 API 請求、檔案讀取等，這時候可能會用到以下三個基本狀態：</p>
<ul>
<li><code>Loading</code>（載入中）：表示資料正在載入的過程中，可以顯示一個載入中的動畫或提示訊息。</li>
<li><code>Success</code>（成功）：表示資料載入成功，可以將資料顯示在介面上或執行相應的操作。</li>
<li><code>Error</code>（錯誤）：表示資料載入過程中發生錯誤，可以顯示錯誤訊息或提供用戶重新嘗試的選項。</li>
</ul>
<p>這三個狀態可以<strong>幫助我們更好地管理資料載入的過程</strong>，並提供更好的使用者反饋。在實作中，我們可以使用<strong>相應的狀態來更新介面</strong>，以反映當前的狀態。</p>
<p>接下來會以一個檔案文本編輯器作範例</p>
<hr>
<h1 id="定義封裝類狀態"><a href="#定義封裝類狀態" class="headerlink" title="定義封裝類狀態"></a>定義封裝類狀態</h1><div class="note warning simple"><p><code>UIState</code> 封裝類會因應程式的目的而有所不同，現在這個範例是檔案文本編輯器，所以稱作 <code>EditorUIState</code></p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">EditorUIState</span> &#123;</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">object</span> Loading : EditorUIState()</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Error</span>(<span class="keyword">val</span> message: String? = <span class="literal">null</span>) : EditorUIState()</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Success</span>(<span class="keyword">val</span> file: File? = <span class="literal">null</span>) : EditorUIState()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個 <code>EditorUIState</code>，其中 <code>Error</code> 及 <code>Success</code> 需要傳入參數，<code>Error</code> 是用來顯示錯誤訊息，而 <code>Success</code> 是只有傳入參數的物件是有效，才會執行，在這個範例中，唯獨只有 <code>Success</code> 這個狀態需要獲取要用的資料。</p>
<h2 id="不同狀態應用的介面"><a href="#不同狀態應用的介面" class="headerlink" title="不同狀態應用的介面"></a>不同狀態應用的介面</h2><p>在這個範例中，我們的 <code>Loading</code>, <code>Success</code> 及 <code>Error</code> 狀態會分別以以下方式顯示：</p>
<ul>
<li><code>Loading</code>: 會顯示一個載入對話框，當載入完成，對話框便會自動關閉</li>
<li><code>Error</code>: 把錯誤訊息顯示在 <code>Scaffold</code> 內的 <code>Snackbar</code>，當發生錯誤，<code>Snackbar</code> 便會彈出，同時會附加一個重試按鈕，重新再獲取資料</li>
<li><code>Success</code>: 成功獲取資料的內容就會在 <code>Scaffold</code> 的主佈局呈現</li>
</ul>
<hr>
<h1 id="編寫-ViewModel"><a href="#編寫-ViewModel" class="headerlink" title="編寫 ViewModel"></a>編寫 ViewModel</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EditorViewModel</span> : <span class="type">ViewModel</span>()</span><br></pre></td></tr></table></figure>

<p>在這個範例中，需要定義三個狀態，狀態分別需要可變及不可變型態。</p>
<div class="note info simple"><p>定義可變狀態時，一般我們在 ViewModel 定義可變 (mutable) 狀態都會在變量名稱加上 <code>_</code> 前綴，而定義不可變狀態會宣告 <code>State</code> 型別，即不可變狀態作賦值。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _file = mutableStateOf(File(<span class="string">&quot;&quot;</span>)) <span class="comment">// 無效檔案範例</span></span><br><span class="line"><span class="keyword">val</span> file: State&lt;File&gt; = _file</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _uiState = MutableStateFlow&lt;EditorUIState&gt;(EditorUIState.Loading)</span><br><span class="line"><span class="keyword">val</span> uiState = _uiState.asStateFlow()</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _editorText = mutableStateOf(_file.value.getFileContent())</span><br><span class="line"><span class="keyword">val</span> editorText: State&lt;String&gt; = _editorText</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> snackbarHostState = SnackbarHostState()</span><br></pre></td></tr></table></figure>

<p>正常情況下，都會以 <code>Loading</code> 狀態為初始 UI 狀態，<code>Success</code> 或 <code>Error</code> 狀態是待 <code>Loading</code> 完成才判斷的。</p>
<h2 id="初始化狀態程序"><a href="#初始化狀態程序" class="headerlink" title="初始化狀態程序"></a>初始化狀態程序</h2><div class="note info simple"><p>因為我們想確保 ViewModel 能夠順利被載入及執行，所以加上了 2 秒延遲 (<code>delay(2000L)</code>)。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">    <span class="keyword">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    viewModelScope.launch &#123;</span><br><span class="line">        delay(<span class="number">2000L</span>)</span><br><span class="line"></span><br><span class="line">        _uiState.value = <span class="keyword">if</span> (_file.value.exists()) &#123;</span><br><span class="line">            EditorUIState.Success(file = _file.value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            EditorUIState.Error(message = <span class="string">&quot;Invalid file&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在這個範例中，我們判斷如果所獲取的檔案是存在的，則視為成功，否則視為錯誤。</p>
<h2 id="顯示錯誤訊息的-Snackbar"><a href="#顯示錯誤訊息的-Snackbar" class="headerlink" title="顯示錯誤訊息的 Snackbar"></a>顯示錯誤訊息的 <code>Snackbar</code></h2><p>剛才都說過，當發生錯誤，就會彈出 <code>Snackbar</code> 訊息</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showErrorSnackbar</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    viewModelScope.launch &#123;</span><br><span class="line">        snackbarHostState.showSnackbar(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且有一個重試按鈕的點擊事件，重新再獲取資料，其實就是把狀態歸零，再初始化一遍。</p>
<div class="note info simple"><p>這裏的歸零是重置為 <code>Loading</code> 狀態。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">refresh</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _uiState.value = EditorUIState.Loading</span><br><span class="line">    <span class="keyword">init</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="編寫不同狀態的介面"><a href="#編寫不同狀態的介面" class="headerlink" title="編寫不同狀態的介面"></a>編寫不同狀態的介面</h1><p><code>Success</code> 的含義本來就是當資料獲取成功後就會導向該介面，意昧着你只要把主要的介面內容寫進 <code>Success</code> 介面便可，因為理論上<strong>用戶提供的檔案路徑均屬有效。只要檔案有效才可以繼續使用編輯器</strong>。</p>
<p>在這個範例中，<code>Loading</code> 及 <code>Error</code> 分別使用了對話框及 Snackbar 形式，其實這個可以很自由，你喜歡的話都可以都以介面形式處理：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span> (state) &#123;</span><br><span class="line">    <span class="keyword">is</span> EditorUIState.Loading -&gt; LoadingScreen()</span><br><span class="line">    <span class="keyword">is</span> EditorUIState.Error -&gt; ErrorScreen()</span><br><span class="line">    <span class="keyword">is</span> EditorUIState.Success -&gt; ReadyScreen()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning simple"><p>記得 <code>state</code> 參數要設置 <code>collectAsState()</code>，否則只會一直處於 <code>Loading</code> 狀態，一直顯示載入對話框。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">EditorScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    viewModel: <span class="type">EditorViewModel</span> = viewModel()</span></span>,</span><br><span class="line">    navController: NavController</span><br><span class="line">) &#123;</span><br><span class="line">    Content(</span><br><span class="line">        state = viewModel.uiState.collectAsState().value</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Content</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    viewModel: <span class="type">EditorViewModel</span> = viewModel()</span></span>,</span><br><span class="line">    state: EditorUIState,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">val</span> scope = rememberCoroutineScope()</span><br><span class="line"></span><br><span class="line">    Container(</span><br><span class="line">        onRetry = &#123;</span><br><span class="line">            viewModel.refresh()</span><br><span class="line">        &#125;</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">when</span> (state) &#123;</span><br><span class="line">            <span class="keyword">is</span> EditorUIState.Loading -&gt; &#123;</span><br><span class="line">                LoadingDialog()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">is</span> EditorUIState.Error -&gt; &#123;</span><br><span class="line">                scope.launch &#123;</span><br><span class="line">                    viewModel.showErrorSnackbar(state.message ?: <span class="string">&quot;Unexpected Error&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">is</span> EditorUIState.Success -&gt; &#123;</span><br><span class="line">                Text(text = state.file?.path.toString())</span><br><span class="line">                TextField(</span><br><span class="line">                    value = viewModel.editorText.value,</span><br><span class="line">                    onValueChange = &#123; viewModel.editorText.value = it &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="container_loadingdialog"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="container_loadingdialog-1">Container</button><button type="button" class="tab " data-href="container_loadingdialog-2">LoadingDialog</button></ul><div class="tab-contents"><div class="tab-item-content active" id="container_loadingdialog-1"><p><code>Container</code> 可組合函式主要是用來封裝整個 <code>Scaffold</code>，連同顯示錯誤訊息的 Snackbar。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Container</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    viewModel: <span class="type">EditorViewModel</span> = viewModel()</span></span>,</span><br><span class="line">    onRetry: () -&gt; <span class="built_in">Unit</span>,</span><br><span class="line">    content: <span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span></span><br><span class="line">) &#123;</span><br><span class="line">    Scaffold(</span><br><span class="line">        snackbarHost = &#123;</span><br><span class="line">            SnackbarHost(</span><br><span class="line">                hostState = viewModel.snackbarHostState,</span><br><span class="line">                snackbar = &#123; <span class="keyword">data</span> -&gt;</span><br><span class="line">                    Snackbar(</span><br><span class="line">                        modifier = Modifier.padding(<span class="number">16.</span>dp),</span><br><span class="line">                        action = &#123;</span><br><span class="line">                            TextButton(</span><br><span class="line">                                onClick = onRetry,</span><br><span class="line">                                colors = ButtonDefaults.textButtonColors(</span><br><span class="line">                                    contentColor = SnackbarDefaults.actionColor</span><br><span class="line">                                )</span><br><span class="line">                            ) &#123;</span><br><span class="line">                                Text(text = <span class="string">&quot;Retry&quot;</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ) &#123;</span><br><span class="line">                        Text(text = <span class="keyword">data</span>.visuals.message)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    ) &#123;</span><br><span class="line">        Column(</span><br><span class="line">            modifier = Modifier.padding(it)</span><br><span class="line">        ) &#123;</span><br><span class="line">            content()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="container_loadingdialog-2"><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LoadingDialog</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Dialog(</span><br><span class="line">        onDismissRequest = &#123;&#125;</span><br><span class="line">    ) &#123;</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .width(<span class="number">100.</span>dp)</span><br><span class="line">                .height(<span class="number">100.</span>dp)</span><br><span class="line">                .clip(MaterialTheme.shapes.extraLarge)</span><br><span class="line">                .background(MaterialTheme.colorScheme.surfaceContainer),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) &#123;</span><br><span class="line">            CircularProgressIndicator()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<hr>
<h1 id="實驗及預覽所有狀態介面"><a href="#實驗及預覽所有狀態介面" class="headerlink" title="實驗及預覽所有狀態介面"></a>實驗及預覽所有狀態介面</h1><p>在這個範例中，如果要實驗一個成功導向 <code>Success</code> 狀態的介面，就需要提供一個有效的檔案路徑：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _file = mutableStateOf(File(<span class="string">&quot;/storage/emulated/0/BlueWhaleYT/Hello.js&quot;</span>)) <span class="comment">// 有效檔案範例</span></span><br><span class="line"><span class="keyword">val</span> file: State&lt;File&gt; = _file</span><br></pre></td></tr></table></figure>

<p>如果要實驗導向 <code>Error</code> 狀態介面，則可以提供無效檔案：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _file = mutableStateOf(File(<span class="string">&quot;&quot;</span>)) <span class="comment">// 無效檔案範例</span></span><br><span class="line"><span class="keyword">val</span> file: State&lt;File&gt; = _file</span><br></pre></td></tr></table></figure>

<p>不過有時候，你可能會想借助 Compose Preview 功能來預覽不同狀態的介面，我們可以寫一個繼承 <code>PreviewParameterProvider</code> 介面，例如：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">EditorUIStateProvider</span> : <span class="type">PreviewParameterProvider</span>&lt;<span class="type">EditorUIState</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> values: Sequence&lt;EditorUIState&gt; = sequenceOf(</span><br><span class="line">        EditorUIState.Loading,</span><br><span class="line">        EditorUIState.Success(),</span><br><span class="line">        EditorUIState.Error()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後在你的預覽可組合函式中：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Preview(showSystemUi = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">EditorScreenPreview</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@PreviewParameter(EditorUIStateProvider::class)</span> state: <span class="type">EditorUIState</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    MyAppTheme &#123;</span><br><span class="line">        Content(state = state)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>實驗內容</category>
        <category>學習筆記</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose | 多樣化的動畫實現方式</title>
    <url>/post/jetpack-compose-dev-animation-in-compose.html</url>
    <content><![CDATA[<p>Jetpack Compose 是一個新興的 UI 構建技術框架，除了著重於 UI 靜態方面的實現，都有支援到輕鬆使用動畫的一環。</p>
<p>這個是大家初嘗 Jetpack Compose 時，想必會看過這個官方圖：</p>
<p><img src="/post/jetpack-compose-dev-animation-in-compose/img1.gif" alt="official showcase gif"></p>
<p>你會看到，只要執行了 <code>Column</code> 的點擊事件，就可以有一個展開的動畫。這個只是其中一種動畫實現方式，接下來會說說更多其他不同處理動畫的方式。</p>
<p>官方有一個建議，判斷用哪一種方式最為適合：</p>
<ul>
<li>如果要在版面配置中為內容變更建立動畫效果：<ul>
<li>如果要建立顯示與消失的動畫效果：<ul>
<li>使用 <code>AnimatedVisibility</code>。</li>
</ul>
</li>
<li>根據狀態替換內容：<ul>
<li>如果要為內容建立淡出淡入效果：<ul>
<li>使用 <code>Crossfade</code>。</li>
</ul>
</li>
<li>否則，請使用 <code>AnimatedContent</code>。</li>
</ul>
</li>
<li>否則，請使用 <code>Modifier.animateContentSize</code>。</li>
</ul>
</li>
<li>如果要依據狀態顯示動畫：<ul>
<li>如果要在組合期間顯示動畫：<ul>
<li>如要讓動畫持續顯示：<ul>
<li>使用 <code>rememberInfiniteTransition</code>。</li>
</ul>
</li>
<li>如果您同時為多個值建立動畫效果：<ul>
<li>使用 <code>updateTransition</code>。</li>
</ul>
</li>
<li>否則，請使用 <code>animate*AsState</code>。</li>
</ul>
</li>
</ul>
</li>
<li>如果要精確控制動畫時間：<ul>
<li>使用 <code>Animation</code>，例如 <code>TargetBasedAnimation</code> 或 <code>DecayAnimation</code>。</li>
</ul>
</li>
<li>如果動畫是事實的唯一來源：<ul>
<li>使用 <code>Animatable</code>。</li>
</ul>
</li>
<li>否則，請使用 <code>AnimationState</code> 或 <code>animate</code>。</li>
</ul>
<hr>
<h1 id="高階動畫-API"><a href="#高階動畫-API" class="headerlink" title="高階動畫 API"></a>高階動畫 API</h1><p>配合質感設計的簡易高階動畫</p>
<h2 id="AnimatedVisibility"><a href="#AnimatedVisibility" class="headerlink" title="AnimatedVisibility"></a><code>AnimatedVisibility</code></h2><p>主要是以動畫方式呈現內容的顯示與消失。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> visible <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line"></span><br><span class="line">Column &#123;</span><br><span class="line">    AnimatedVisibility(visible = visible) &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Button(onClick = &#123; visible = !visible &#125;) &#123;</span><br><span class="line">        Text(<span class="string">&quot;show text&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AnimatedContent-實驗功能"><a href="#AnimatedContent-實驗功能" class="headerlink" title="AnimatedContent (實驗功能)"></a><code>AnimatedContent</code> (實驗功能)</h2><div class="note danger simple"><p>實驗性 API 未來可能會變更，或完全移除。</p>
</div>

<div class="note info simple"><p><code>AnimatedContent</code> 與 <code>AnimatedVisibility</code> 有點相似，前者控制切換，後者則控制顯隱。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="keyword">by</span> remember &#123; mutableIntStateOf(<span class="number">0</span>) &#125;</span><br><span class="line"></span><br><span class="line">Column &#123;</span><br><span class="line">    AnimatedContent(targetState = count) &#123; targetCount -&gt;</span><br><span class="line">        Text(</span><br><span class="line">            text = &#123; Text(text = targetCount) &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    Button(onClick = &#123; count++ &#125; )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Text</code> 應用了隸屬於 <code>AnimatedContent</code> 的 <code>targetCount</code> 傳入參數，這個時候當內容更改時，就會有動畫的改變。</p>
<h2 id="animate-AsState"><a href="#animate-AsState" class="headerlink" title="animate*AsState"></a><code>animate*AsState</code></h2><p>可用於為單一值建立動畫效果。您只需提供結束值 (或目標值)，該 API 就會從現值開始播放動畫，直到達到指定值。</p>
<p>假如現在有一個小方塊 (預設的正常大小是 <code>70.dp</code>)，當按它就會長大一點，再按就長大多一點。</p>
<div class="note info simple"><p><code>animate*AsState</code> 這裏指的 <code>*</code> 是有許多不同的至別，如 <code>Dp</code>, <code>Int</code>, <code>Float</code>, <code>Color</code> 等。</p>
<p>因為現在是在用 <code>Dp</code> 值為狀態提升的基準，所以這裏會用的是 <code>animateDpAsState</code>，因此剛才所指的 <code>*</code> 是按情況而選擇用哪一個型別的。</p>
</div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> size <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="number">70.</span>dp) &#125;</span><br><span class="line"><span class="keyword">val</span> animatedSize <span class="keyword">by</span> animateDpAsState(                           <span class="comment">// 新增一個狀態動畫提升</span></span><br><span class="line">    targetValue = size,</span><br><span class="line">    animationSpec = tween(<span class="number">1000</span>)                                 <span class="comment">// 動畫執行時間</span></span><br><span class="line">)        </span><br><span class="line"></span><br><span class="line">Box(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">        .background(MaterialTheme.colorScheme.primary)</span><br><span class="line">        .size(animatedSize)                                     <span class="comment">// 使用狀態動畫提升值</span></span><br><span class="line">        .clickable &#123; size *= <span class="number">2</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<div class="note warning simple"><p>使用 <code>animate*AsState</code> 的變量一定只能是 <code>val</code> 唯讀變量，意味著<strong>這個變量不會進行任何計算</strong>，只會用作最後顯示到目標位置。</p>
</div>

<table>
<thead>
<tr>
<th>沒有動畫</th>
<th>有動畫</th>
</tr>
</thead>
<tbody><tr>
<td><img alt="without animation" src="https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExcXBlODFzcDZmNXZxM3kyaDN4a2dqdDNidzRmbWdjdTdtbXUyZmlnciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/GZ4XaWk930NDcq2ljI/giphy.gif"></td>
<td><img alt="with animation" src="https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExM3NoNGdieGN1dHN2engyZmZkZnFjbGwzbms2b3F4ZXpxZTFucWl6ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Gx3PbwaTAnU8L2T90E/giphy.gif"></td>
</tr>
</tbody></table>
<div class="note warning simple"><p><img src="/post/jetpack-compose-dev-animation-in-compose/img2.png" alt="label parameter warning"></p>
<p>這裏 Android Studio 會警告你在使用 <code>animate*AsState</code> 或其他關於動畫範疇的情況下沒有用 <code>label</code> 參數，這個 <code>label</code> 參數純粹是在 IDE 的動畫製作時候，方便辨認的，如果不是特別重要，可選擇忽略。</p>
</div>]]></content>
      <categories>
        <category>實驗內容</category>
        <category>Jetpack Compose</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
