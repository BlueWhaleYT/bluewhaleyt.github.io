<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【React】JSX 語言 | SPA 單頁應用 | React 前端網頁開發學習筆記</title>
    <url>/post/react-dev-spa-notes.html</url>
    <content><![CDATA[<div class="note info simple" data-content="React"></div>

<p>當你想編寫集中處理 UI 形式的介面設計及邏輯，你可以嘗嘗 React 這個框架，React 是一個編寫靜態網頁的前端框架，但有別於 HTML，React 可以<strong>單方面嵌入 React 元件到既有的 HTML 檔案</strong>，不影響整個網站之外，亦可以嘗試一下 React 元件的功能，當你慢慢熟練了 React 怎樣用，就可以開始「砍掉重練」，由零開始全面編寫一個使用 React 框架的前端靜態網頁。</p>
<p>React 的特點如下：</p>
<ol>
<li>使用<strong>單頁應用</strong>模式運行網頁，單頁應用 (Single Page Application，簡稱 SPA) 是一個不需要頻繁向伺服器獲取及載入網頁資源，因為單頁應用<strong>只會在第一次向伺服器請求獲取網頁資源</strong>，其後再次載入網頁就<strong>不會再向伺服器獲取，而是經過路由獲取資源</strong>，所以載入需時極短，有效提升用戶體驗。所以你在 React 網頁在導向不同頁面時，<strong>鮮少會看到會有瀏覽器的載入條顯示</strong>。<br>與它相反的就是絕大多數都使用的<strong>多頁應用</strong> (Multiple Page Application，簡稱 MPA) 模式，例如通用的 HTML 網頁開發，在導向不同頁面時，<strong>每次都需要向伺服器請求資源</strong>，重新加載。</li>
<li>不需要學習其他的程式語言，使用<strong>原生的 JavaScript</strong> 及額外增設的 <strong>JSX 語法</strong>編寫 React 網頁，使得熟悉 HTML 網頁前端編寫員可以輕易導入並初嘗 React 框架。</li>
<li>虛擬 DOM 處理，React 實際管理的是一個實際 DOM 的抽象物件，使用虛擬 DOM 來追蹤狀態變化，並在需要更新實際 DOM 時<strong>進行最小化的操作</strong>。當應用程序的狀態發生變化時，React 會在虛擬 DOM 中進行更新，然後計算出實際 DOM 中需要修改的部分，並<strong>只更新這些部分，而不是整個 DOM 樹</strong>。<strong>直接操作實際 DOM 是非常耗費資源</strong>的，所以虛擬 DOM 機制提高了應用程序的效能。</li>
<li>使用元件組合機制，每一個介面都擁有<strong>許多獨立編寫的元件</strong>，進而可以透過<strong>併併湊湊</strong>，隨時把適用的元件組合、嵌入到相應頁面，這點亦可提高程式碼複用率。另外：每個組件都該有以下特性：<ul>
<li>可重用：每個組件都具有獨立功能，可被應用於不同的 UI 介面</li>
<li>可組合：每個組件都可與其他組件一起使用，不會發生衝突，或是嵌入於其他組件之內</li>
<li>可維護：每個組件具有其邏輯，更容易理解、除錯及維護</li>
</ul>
</li>
</ol>
<hr>
<h1 id="嵌入-React-元件到既有-HTML-檔案"><a href="#嵌入-React-元件到既有-HTML-檔案" class="headerlink" title="嵌入 React 元件到既有 HTML 檔案"></a>嵌入 React 元件到既有 HTML 檔案</h1><p>React 是具有彈性的，為了能讓初學者可以慢慢學習 React，我們不需要因為網站是使用 HTML 編寫而重寫網站一遍，在這個方案下，我們會把<strong>網頁部分內容交託予 React 管理</strong>，簡單來說，就是像一些 React 元件嵌入至 HTML 網頁。</p>
<p>在 HTML 匯入 React 函式庫 <code>react</code> 及 <code>react-dom</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react-dom.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="note info simple"><p><code>react</code> 是整個 React 框架最核心的套件，不過，在使用 React 的時候，都需要把 <code>react-dom</code> 匯入，因為 <code>react-dom</code> 是負責瀏覽器及 DOM 渲染的操作，簡單來說， <strong><code>react-dom</code> 是針對編寫網頁 (Web) 而使用的</strong> 。 </p>
</div>

<blockquote>
<p>個人認為既然 <code>react</code> 是核心套件，應該名為類似 <code>react-core</code> 這些名稱會較為適合，至少不會把它們彼此混淆吧。</p>
</blockquote>
<p>另外，有一點在編寫 React 的時候要注意的，編寫 React <strong>雖然看似都是使用 JavaScript 語法</strong>，但實際上是一個 JSX (全稱為 JavaScript XML) 語法，這個語法是用來渲染 React 元件及其相關程式邏輯，而<strong>一般的 JavaScript 是不支援 React 使用的語法的</strong>。</p>
<p>同時，<strong>瀏覽器只懂得 JavaScript 語言</strong>，所以在這一方面我們需要把 JavaScript 轉譯為 JSX 語法，我們可以使用 <a href="https://babeljs.io/setup#installation">Babel</a> 函式庫進行轉譯。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="編寫-JSX-語法至-HTML-網頁-lt-script-gt-標記"><a href="#編寫-JSX-語法至-HTML-網頁-lt-script-gt-標記" class="headerlink" title="編寫 JSX 語法至 HTML 網頁 &lt;script&gt; 標記"></a>編寫 JSX 語法至 HTML 網頁 <code>&lt;script&gt;</code> 標記</h2><p>預設的 <code>&lt;script&gt;</code> 是註明以一般的 JavaScript 語言來編寫，但現在要編寫 JSX 語法，我們就要<strong>特別註明手稿是將會被 Babel 轉譯</strong>，在 React，當然就是把編寫的 JavaScript 轉譯為 JSX 語法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦加上了 <code>text/babel</code> 語法註明，就可以開始寫 JSX，把 React 元件顯示到 HTML 網頁上。</p>
<p>首先，我們會在 HTML 定義一個作為 React 容器的 <code>&lt;div&gt;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;script&gt;</code> 裏，我們可以宣告一個名為 <code>Root</code> 的函式型元件 (純粹對應 HTML 的容器 ID 名稱)，這元件返回的就會是 JSX 語法的 React 佈局。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Root</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>/&gt;</span></span>,                            <span class="comment">// 要渲染的獨立元件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)     <span class="comment">// 獨立元件渲染的目標</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>然後使用 <code>ReactDOM</code> 把獨立元件 <code>Root</code> 渲染到指定 ID 為 <code>root</code> 的函式型元件。</p>
<hr>
<h1 id="編寫-JSX-語法要注意的要點"><a href="#編寫-JSX-語法要注意的要點" class="headerlink" title="編寫 JSX 語法要注意的要點"></a>編寫 JSX 語法要注意的要點</h1><p>因為這個是 JSX，<strong>不是普通 JavaScript，裏面寫的亦不完全是 HTML</strong>，所以你需要注意一下編寫 JSX 要注意的地方。</p>
<ol>
<li>返回的<strong>只能是單一的根元件</strong>，不能返回多個根元件，比如：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>                   &#123;/* 第一個根元件為 div */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am an error<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>    &#123;<span class="comment">/* 第二個根元件為 p */</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
這樣的方式是錯的，因為它返回了多個根元件。</li>
<li>加入 CSS 類別 <code>class</code> <strong>應使用 <code>className</code></strong> ，這個可以有點斟酌，因為單純嵌入 React 元件至 HTML 網頁的話，使用 <code>class</code> 是沒有問題的，但當你要全面使用 React 的時候，仍然使用 <code>class</code> 就會報錯，所以強烈建議養成習慣，在 React 改用 <code>className</code>。<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;p class=&quot;test&quot;&gt;Test&lt;/p&gt;</span></span><br><span class="line"><span class="addition">+ &lt;p className=&quot;test&quot;&gt;Test&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>React 的 JSX 語法作用區域，在 <strong><code>return</code> 之前的代碼會被視為 JavaScript 語法</strong>，<strong>其後則被視為 HTML 語法</strong>，如果要在元件內執行 JavaScript，就需要用 <code>&#123; &#125;</code> 直接執行，而定義註解 (comment)，可以用一組 <code>&#123;/* */&#125;</code> 定義註解<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 目前是 JavaScript 語法部分</span></span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123; /* 目前是 HTML 語法部分 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;str.toUpperCase()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果你只是想簡單把 React 元件嵌入至 HTML 網頁的話，你現在應該掌握這技巧了，現在就會記錄全面使用 React 框架。</p>
<hr>
<h1 id="配置-React-環境及項目"><a href="#配置-React-環境及項目" class="headerlink" title="配置 React 環境及項目"></a>配置 React 環境及項目</h1><p>當你決定好要把 <strong>網頁全部內容都交託予 React 管理</strong> 時，就可以安裝 React 了，不過，在配置 React 之前，<strong>你要確保已經安裝了 Node.js</strong>，因為 React 是屬於 Node.js 的 NPM 套件，所以你需要確保 Node.js 順利運行，才能夠安裝接下來的 React 框架。</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="/post/web-dev-nodejs-express-notes">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Node.js 環境配置</div>
            <div class="tag-link-sitename"> 可以看看這篇文章瞭解怎樣配置 Node.js 環境</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p><strong>我們不會匯入 HTML 形式的 JS 函式庫</strong>，而是直接安裝 NPM 相關套件，同樣都是 <code>react</code> 及 <code>react-dom</code> 套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure>

<p>因為全面的 React 項目需要一定的檔案和格式，而且人手創建 React 項目是很愚蠢的一件事，因為需要的檔案都蠻多的。。。反正你就不會想手動創建就是了。</p>
<p>我們會使用 <code>create-react-app</code> 套件快速建立 React 起始項目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app 項目名稱</span><br><span class="line"><span class="built_in">cd</span> 項目名稱</span><br></pre></td></tr></table></figure>

<p>想立即看看這個模板項目是怎麼的樣子，可以運行看看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p><img src="/post/react-dev-spa-notes/img1.png" alt="create-react-app 模板"></p>
<div class="note info simple"><p><code>public</code> 資料夾內的 <code>robots.txt</code> 是<strong>用來管理 SEO 搜尋</strong>，你可以在這檔案訂立規則。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://www.robotstxt.org/robotstxt.html</span></span><br><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Disallow:</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="深入編寫-JSX-及使用-React-框架"><a href="#深入編寫-JSX-及使用-React-框架" class="headerlink" title="深入編寫 JSX 及使用 React 框架"></a>深入編寫 JSX 及使用 React 框架</h1><p>現在就會深入編寫更多 JSX 及使用 React 框架不同工具。</p>
<h2 id="匯入-CSS-樣式"><a href="#匯入-CSS-樣式" class="headerlink" title="匯入 CSS 樣式"></a>匯入 CSS 樣式</h2><p>先來說說講求美觀的 CSS 要怎樣應用於 React，原來可以有幾種不同方式匯入 CSS 樣式的。</p>
<ol>
<li>單行 CSS：<strong>編寫的是 JavaScript 的 CSS 屬性</strong>，不能以原本的 CSS 語音編寫，在加入 JavaScript 的 CSS 屬性前，你需要加上一對 <code>&#123;&#123; &#125;&#125; </code>。<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;p style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;<span class="title class_">Hello</span> <span class="title class_">World</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure>
至於「轉換」方式不需要特別牢記，反正 <strong>大部分都是把蛇形表示式 (<code>snake-case</code>) 改成小駝峰型表示式 (<code>lowerCamelCase</code>)</strong> 比如 <code>background-color</code> -&gt; <code>backgroundColor</code>，只有少數不是這樣，有需要的就看總表參閱對照：<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="http://www.sitestepper.be/en/css-properties-to-javascript-properties-reference-list.htm">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">CSS 屬性與 JavaScript CSS 屬性對照</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div></li>
<li>匯入 CSS：匯入外部的 CSS 檔案，所以會以原來 CSS 語法編寫。<strong>不過這個做法不建議大型項目使用</strong>。首先匯入需要用的 CSS 檔案：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br></pre></td></tr></table></figure>
假如你有一個 <code>.container &#123; &#125;</code> 樣式，然後用的時候就，比如：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=&#123;container&#125;&gt;</span><br></pre></td></tr></table></figure></li>
<li>匯入 CSS Modules：同樣都是匯入外部 CSS 檔案，不過我們可以確保單個組件（元件）的所有樣式集中在同一個地方、<strong>確保元件樣式只應用於該組件</strong>以及解決 CSS 全局作用域的問題。剛剛說為什麼<strong>不建議第 2 種方法應用於大型項目</strong>，主要是<strong>因為較容易重複樣式 <code>className</code> 名稱</strong>。<br>假設你有一個獨立元件檔案 <code>Hello.js</code>，然後建立一個名為 <code>Hello.module.css</code> 檔案，匯入：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./Hello.module.css&#x27;</span></span><br></pre></td></tr></table></figure>
假如你有一個 <code>.container &#123; &#125;</code> 樣式：<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=&#123;styles.<span class="property">container</span>&#125;&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用路由導向不同頁面"><a href="#使用路由導向不同頁面" class="headerlink" title="使用路由導向不同頁面"></a>使用路由導向不同頁面</h2><p>一個多頁網站最基本能做到的就是有多個頁面，在 React，使用<strong>單頁應用模式建立多頁</strong>是很一件很簡單的事，與此同時都是<strong>很適合的事</strong>，因為剛才都說過單頁應用模式只會在第一次向伺服器獲取資源，所以在單頁模式下實現許多頁面，都不會影響對伺服器的負荷。</p>
<p>我們會使用 <a href="https://reactrouter.com/en/main">React Router</a> 工具建立頁面路由系統，需要安裝 <code>react-router-dom</code> 套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom</span><br></pre></td></tr></table></figure>

<p>現在就建立不同頁面的獨立元件檔案，例如：<code>Home.js</code>、<code>About.js</code>、<code>Contact.js</code> 及 <code>Error404.js</code>，<code>Error404.js</code> 的頁面是用來顯示「找不到網頁」的訊息的。</p>
<div class="tabs" id="code_router"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_router-1">Home.js</button><button type="button" class="tab " data-href="code_router-2">About.js</button><button type="button" class="tab " data-href="code_router-3">Contact.js</button><button type="button" class="tab " data-href="code_router-4">Error404.js</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_router-1"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello World</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_router-2"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_router-3"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Contact</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>聯絡我們<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_router-4"><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Error404</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404 錯誤 - 找不到頁面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p>例如在 <code>App.js</code> 匯入需要用到的常用物件 <code>BrowserRouter</code>、<code>Routes</code>、<code>Route</code> 及 <code>Link</code>，當然，還有要用的頁面：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Contact</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Contact&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Error404</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Error404&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>BrowserRouter</code>：<strong>通常都會被定義為根元素</strong>，是一個管理路由及 URL 變化的「容器」，裏面裝載的就<code>Routes</code> 容器。</li>
<li><code>Routes</code>：用於定義應用程序的路由配置，定義不同的 <code>Route</code> 元件，即<strong>定義不同路徑</strong>，繼而可以將 URL 和相應的組件進行映射。</li>
<li><code>Route</code>：定義單個路由，通常接受兩個參數，第一個參數是<strong>路徑</strong>，第二個參數是<strong>要渲染的元件</strong>。</li>
<li><code>Link</code>：用於生成應用程序中的連結。它接受一個 <code>to</code> 屬性，指定要<strong>導航到的 URL</strong>。當用戶點擊這個連結時，React 路由庫將處理 URL 的變化，並渲染相應的組件。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/contact&#x27;</span>&gt;</span>聯絡我們<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/contact&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Contact</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Error404</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p>React 原意是想使用 SPA 框架，所以提供了 <code>Link</code> 元件，如果不使用 <code>Link</code> 元件，<strong>使用了 HTML 的 <code>&lt;a&gt;</code> 標記的話</strong>，的確可以導向頁面，不過， <strong><code>&lt;a&gt;</code> 會向伺服器發出請求</strong>，而不是從路由獲取頁面資源，那就有違了 SPA 的原則，亦都導致你的網頁變得不倫不類。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- &lt;a href=&#x27;/about&#x27;&gt;Go to About&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+ &lt;Link to=&#x27;/about&#x27;&gt;Go to About&lt;/Link&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="賦予參數傳遞至路由"><a href="#賦予參數傳遞至路由" class="headerlink" title="賦予參數傳遞至路由"></a>賦予參數傳遞至路由</h3><p>當你想編寫不同的動態頁面內容，你可以試試傳遞參數，例如傳遞一個獨一無二的 ID 作為參數，再傳遞至路由，從而根據所獲取的 ID 而顯示相應的資料內容。</p>
<p>假如，現在有一個 <code>CountPage.js</code>，用來根據路由參數的輸入，來「觀察」所傳遞的參數。我們會使用到 <code>useParams</code> 工具把參數傳遞至路由。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">CountPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> params = <span class="title function_">useParams</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Number &#123;params.id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後在 <code>App.js</code> 作一些變更，假如現在我們想傳遞 <code>id</code> 為路由查詢參數，那就在子 <code>Route</code> 的 <code>path</code> 屬性設置為 <code>:id</code>，記住需要加上冒號 <code>:</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/countpage&#x27;</span>&gt;</span>CountPage<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/countpage&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">CountPage</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">CountPage</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>當你在瀏覽器點擊 <code>CountPage</code> 的 <code>Link</code> 導向 CountPage 頁面後，再加上參數，如 <code>/100</code>：<code>localhost:3000/countpage/100</code>，網頁內容會顯示「Number 100」。</p>
<h2 id="可重複使用的元件"><a href="#可重複使用的元件" class="headerlink" title="可重複使用的元件"></a>可重複使用的元件</h2><p>我們可以編寫可重複使用的元件，例如使用一致樣式的元件，但不同文本內容及顏色，可以使用 <code>props</code> 來把屬性設定。</p>
<p>為了方便管理可重用元件，可以建立一個名為 <code>component</code> 資料夾，新建 <code>Title.js</code>，<code>Title()</code> 要傳一個 <code>props</code> 參數。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Title</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color:</span> <span class="attr">props.color</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;&gt;</span>&#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要使用的時候，就像一個「自訂屬性」的形式定義：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Title</span> text=<span class="string">&quot;首頁&quot;</span> color=<span class="string">&quot;green&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>這個 <code>text</code> 及 <code>color</code> 屬性均會被傳入到 <code>Title()</code> 元件的 <code>props</code> 參數，就可以利用 <code>props.text</code> 及 <code>props.color</code> 獲取對應的值。</p>
<div class="note info simple"><p>你亦可選擇把 <code>props</code> 參數解構賦值 (destructuring)，那就不需要用 <code>props.</code> 作前綴：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Title</span>(<span class="params">&#123;text, color&#125;</span>) &#123; <span class="comment">// 解構賦值</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color:</span> <span class="attr">color</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;&gt;</span>&#123;text&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p class="p center logo large">以下筆記內容尚未完成整理</p>

<p class="p center logo small">這個部分的內容暫時略寫，待有空再處理。</p>

<details class="folding-tag"><summary> 瀏覽未完成內容 </summary>
              <div class="content">
              <h2 id="元件類別"><a href="#元件類別" class="headerlink" title="元件類別"></a>元件類別</h2><p>類別式元件 (Class-based)：咸豐年代時 React 定義元件的方式，需要另外 <code>extends</code> 一個 <code>React.Component</code>，然後要用 <code>render()</code> 方法把元件渲染出來。現在幾乎一一都取代為使用函式型元件。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函式型元件 (Functional)：</p><div class="tabs" id="code_func_comp"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_func_comp-1">獨立元件檔案</button><button type="button" class="tab " data-href="code_func_comp-2">簡短簡易</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_func_comp-1"><p>通常獨立元件檔案 e.g. <code>Greeting.js</code> 就會用這種。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_func_comp-2"><p>如果這些獨立元件是比較簡短的，不需要太多程式碼，可使用 ES6 箭頭函式。</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="使用鉤子-Hooks"><a href="#使用鉤子-Hooks" class="headerlink" title="使用鉤子 (Hooks)"></a>使用鉤子 (Hooks)</h2><p>React 基本的鉤子有 3 個：</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a><code>useState</code></h3><p>…</p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><code>useEffect</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;, []) <span class="comment">// [] 是空的依賴陣列</span></span><br></pre></td></tr></table></figure><ol><li><strong>沒有提供</strong>第二個參數，這個參數是一個依賴陣列 (Dependency Array)，該元件會在網頁<strong>每次渲染時都會觸發</strong></li><li>當依賴陣列是<strong>空陣列</strong>，只會在網頁<strong>第一次渲染時觸發</strong></li><li>當依賴陣列 <strong>存有變量</strong>，會在<strong>網頁第一次渲染</strong>時，而且當<strong>指定變量有改變的時候會觸發</strong></li></ol><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a><code>useContext</code></h3><p>…</p><hr><h1 id="編寫-TypeScript-使用-React-框架"><a href="#編寫-TypeScript-使用-React-框架" class="headerlink" title="編寫 TypeScript 使用 React 框架"></a>編寫 TypeScript 使用 React 框架</h1><div class="note danger simple"><p>其實可能這部分內容會太長，會考慮以個別形式，另建新筆記文章集中記錄 React 在 JavaScript 遷移至 TypeScript 部分。</p></div><p>如果你不是編寫 JavaScript 或者已經改用了 TypeScript 的話，這裏都簡單記錄了怎樣編寫 TypeScript 使用 React 框架。</p><div class="note info simple"><p>使用 TypeScript 來寫 React 是更勝一籌的，因為 <strong>TypeScript 是有類型檢查功能</strong>，更容易處理類型相關的錯誤，而 JavaScript 是「後知後覺」的。</p></div><p>同樣都會使用 <code>create-react-app</code> 工具創建 React 項目，不過<strong>註明使用 TypeScript 模板</strong> (<code>--template typescript</code>)。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app 項目名稱 --template typescript</span><br><span class="line"><span class="built_in">cd</span> 項目名稱</span><br></pre></td></tr></table></figure><div class="note info simple"><p><strong>TypeScript 模板會自動安裝了以下套件</strong>，如果你想在既有項目加入 TypeScript 就要手動安裝：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save typescript @types/node @types/react @types/react-dom @types/jest</span><br></pre></td></tr></table></figure></div><div class="tabs" id="react_ts"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="react_ts-1">App.tsx</button><button type="button" class="tab " data-href="react_ts-2">MyComponent.tsx</button></ul><div class="tab-contents"><div class="tab-item-content active" id="react_ts-1"><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, TypeScript with React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">name</span>=<span class="string">&quot;John&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="react_ts-2"><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyComponentProps</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MyComponentProps</span>&gt; = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyComponent</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>
              </div>
            </details>]]></content>
      <categories>
        <category>React</category>
        <category>網頁開發</category>
        <category>前端開發</category>
        <category>詳細筆記</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>JSX</tag>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>靜態網頁 | 動態網頁 | 輕鬆寄存免費且有 HTTPS 安全認證網站的多種方案集錄筆記</title>
    <url>/post/web-dev-build-and-host-website-notes.html</url>
    <content><![CDATA[<p>假設你現在完成好你的網頁編寫，無論你是編寫怎樣的網頁，都可以在這篇筆記找到寄存網頁的方案。</p>
<div class="note warning simple"><p>目前筆記集錄暫時僅收錄 HTML 及 React 方案，使用其他框架可作參考。如你知道其他框架寄存方式，可於下方留言，或會被取錄為筆記部分。</p>
</div>

<hr>
<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>這裏<strong>不會說關於編寫網頁的程式碼</strong>，因為理論上你只會想知道怎樣寄存網頁。你需要建立一個 Github 存儲庫，這裏可以稍為記錄一下。</p>
<details class="folding-tag"><summary> Github 存儲庫配置 </summary>
              <div class="content">
              <div class="note info simple"><p>存儲庫名稱會影響 Github Page 寄存網頁的 URL，這點要注意。另外，如果你想寄存非特定存儲庫網頁的鏈結，就要把存儲庫命名為 <code>&lt;Github 用戶名稱&gt;.github.io</code>。</p><p>例如：<br><a href="https://username.github.io/blog">https://username.github.io/blog</a> 這裏的 <code>blog</code> 就是一個特定存儲庫，意味著首頁就應該是 <a href="https://username.github.io./">https://username.github.io。</a></p></div><p>例如在這個範例中，建立一個名為 TestWeb 的存儲庫，並把 .git 鏈結複製到剪貼簿。</p><p><img src="/post/web-dev-build-and-host-website-notes/img1.png" alt="建立存儲庫"></p><p>這裏會使用 VSCode 展示，開啟 VSCode，把複製了的鏈結貼上，然後選擇要把所克隆的項目存放到的檔案路徑。</p><p><img src="/post/web-dev-build-and-host-website-notes/img2.png" alt="貼上存儲庫 URL 克隆項目"></p><p>當你把程式碼檔案寫好後，你會發現左方工作板的「原始檔控制」有更新檔案的變更，這個時候，就可以提交並推送變更，例如輸入 Initial commit 作為初始提交訊息。</p><p><img src="/post/web-dev-build-and-host-website-notes/img3.png" alt="提交程式碼"></p><p>如果成功提交並推送變更，就會在 Github 存儲庫中看到檔案更新。</p><p><img src="/post/web-dev-build-and-host-website-notes/img4.png" alt="成功提交並推送變更"></p>
              </div>
            </details>

<hr>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>因為編寫 HTML 大部分都是初學網頁編寫的用戶，這部分會盡量提供更多圖片。</p>
<h2 id="Github-Page"><a href="#Github-Page" class="headerlink" title="Github Page"></a>Github Page</h2><ol>
<li>開啟存儲庫的 Settings，導向左側選單的 Pages 頁面。<br><img src="/post/web-dev-build-and-host-website-notes/img5.png" alt="建置設定"></li>
<li>選擇 <code>main</code> 分支 (或你所命名的其他分支 e.g. <code>master</code>) 作為網頁寄存源,然後點擊 <code>Save</code> 按鈕即可。<br>完成後，就可以在 Deployment 看到部署結果，如果沒有發生錯誤，就可以開啟網頁了！<br><img src="/post/web-dev-build-and-host-website-notes/img6.png" alt="部署結果"></li>
</ol>
<h2 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h2><ol>
<li>點擊 Deploy with Github 部署網站。<br><img src="/post/web-dev-build-and-host-website-notes/img7.png" alt="使用 Github 部署"></li>
<li>完成好驗證後，就選擇要使用的存儲庫。<br><img src="/post/web-dev-build-and-host-website-notes/img8.png" alt="選擇使用的存儲庫"></li>
<li>同樣選擇分支，如果沒有特別的構建及部署設定，就按 Depoly 按鈕。<br><img src="/post/web-dev-build-and-host-website-notes/img9.png" alt="完成部署設定"><br>部署成功後，就可以開啟網頁。<br><img src="/post/web-dev-build-and-host-website-notes/img10.png" alt="部署成功結果"></li>
<li>如果想修改網頁 URL，可按 Site configuration &gt; Change site name<br><img src="/post/web-dev-build-and-host-website-notes/img11.png" alt="修改網頁 URL"></li>
</ol>
<hr>
<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="Github-Page-1"><a href="#Github-Page-1" class="headerlink" title="Github Page"></a>Github Page</h2><ol>
<li>優化程式碼，bundle size 變小、移掉不必要的 CSS、React 也會拿掉一些開發才需要用到的資訊。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li>
<li>執行 Static server：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g serve</span><br><span class="line">serve -s build</span><br></pre></td></tr></table></figure></li>
<li>在 <code>package.json</code> 新增 <code>homepage</code> 設定：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://用戶名字.github.io/項目名稱&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>安裝 <code>gh-pages</code> 工具<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install - save gh-pages</span><br></pre></td></tr></table></figure></li>
<li><code>package.json</code> 新增 <code>predeploy</code> 及 <code>deploy</code> 設定：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;predeploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gh-pages -d build&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>執行部署指令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure></li>
<li>在 Github Settings &gt; Pages 的 source 選擇 <code>gh-pages</code> 分支。</li>
</ol>
]]></content>
      <categories>
        <category>網頁開發</category>
        <category>前端開發</category>
        <category>後端開發</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js | Express | JSON 數據庫 | 構建 RESTful API 筆記</title>
    <url>/post/web-dev-express-restful-api-notes.html</url>
    <content><![CDATA[<div class="note info simple" data-content="RESTful API"></div>

<p>這裏會簡單記錄一個 RESTful API 對用戶進行增刪查改的操作及處理的客戶端。建議先看了怎樣編寫 Node.js 及 Express 再回來寫 RESTful API:</p>
<div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="/post/web-dev-nodejs-express-notes">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">Node.js 及 Express 框架建置伺服器及動態網頁編寫</div>
            <div class="tag-link-sitename"> </div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>因為 Express 就是以路由構建的形式編寫的，所以當要實作一個 RESTful API，使用 Express 是較 Node.js 為簡單的。</p>
<hr>
<h1 id="JSON-數據庫建立"><a href="#JSON-數據庫建立" class="headerlink" title="JSON 數據庫建立"></a>JSON 數據庫建立</h1><p>基於一個 JSON 數據庫的 <code>data.json</code> 作為 API 獲取的資料來源。</p>
<div class="note info simple"><p>這個 <code>data.json</code> 的內容會經過<strong>增刪查改而有所變更</strong>。</p>
</div>

<p>例如現在預設有 3 個用戶：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Steve&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Heidi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alex&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">67</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我們會根據這個 <code>data.json</code> 而提供的 API:</p>
<table>
<thead>
<tr>
<th>API</th>
<th>HTTP 方法</th>
<th>請求主體</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>listUsers</code></td>
<td>GET</td>
<td>空</td>
<td>獲取所有用戶</td>
</tr>
<tr>
<td><code>getUser</code></td>
<td>GET</td>
<td>JSON 字串</td>
<td>獲取指定用戶</td>
</tr>
<tr>
<td><code>addUser</code></td>
<td>POST</td>
<td>JSON 字串</td>
<td>新增用戶</td>
</tr>
<tr>
<td><code>deleteUser</code></td>
<td>DELETE</td>
<td>空</td>
<td>刪除指定用戶</td>
</tr>
</tbody></table>
<p>本地測試或部署後，可以使用 Postman 或其他工具來測試 API。這裏推薦使用 <a href="https://www.postman.com/downloads/">Postman</a> 軟件。</p>
<hr>
<h1 id="初始-Express-程序"><a href="#初始-Express-程序" class="headerlink" title="初始 Express 程序"></a>初始 Express 程序</h1><p>這個是一個簡單的 Express 程序，我們將會在其中加上對應的 API 路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/data.json`</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span> , <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`API server listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="重用函數"><a href="#重用函數" class="headerlink" title="重用函數"></a>重用函數</h2><p>為了能集中處理增刪查改的程式實現，這裏會編寫幾個重用函數，方便處理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showError</span>(<span class="params">status, res, err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    res.<span class="title function_">status</span>(status).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">error</span>: err</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">file, callback</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">callback</span>(err);</span><br><span class="line">        <span class="keyword">else</span> <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeFile</span>(<span class="params">file, data, callback</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(file, data, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">callback</span>(err)</span><br><span class="line">        <span class="keyword">else</span> <span class="title function_">callback</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="listUsers-獲取所有用戶"><a href="#listUsers-獲取所有用戶" class="headerlink" title="listUsers - 獲取所有用戶"></a><code>listUsers</code> - 獲取所有用戶</h2><p>這個 API 會獲取所有用戶資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/listUsers&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">showError</span>(<span class="number">500</span>, res, <span class="string">&#x27;Unable to load data&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span> res.<span class="title function_">send</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img1.png" alt="獲取所有用戶"></p>
<h2 id="getUser-獲取指定用戶"><a href="#getUser-獲取指定用戶" class="headerlink" title="getUser - 獲取指定用戶"></a><code>getUser</code> - 獲取指定用戶</h2><p>這個 API 會根據在查詢參數 (query parameter) 所提供的用戶 ID 來獲取該用戶的個別資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUser/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    <span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">showError</span>(<span class="number">500</span>, res, <span class="string">&#x27;Unable to load data&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> user = data.<span class="property">users</span>[<span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>]</span><br><span class="line">            <span class="keyword">if</span> (user) res.<span class="title function_">json</span>(user)</span><br><span class="line">            <span class="keyword">else</span> <span class="title function_">showError</span>(<span class="number">404</span>, res, <span class="string">&#x27;Invalid user&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在調用 <code>getUser</code> API 時要提供用戶 ID 作為查詢參數。例如這裏獲取用戶 ID 為 <code>2</code> 的資料：</p>
<p><img src="/post/web-dev-express-restful-api-notes/img2.png" alt="獲取指定用戶"></p>
<h2 id="addUser-新增用戶"><a href="#addUser-新增用戶" class="headerlink" title="addUser - 新增用戶"></a><code>addUser</code> - 新增用戶</h2><p>這個 API 會根據請求主體 (request body) 中的新用戶資料進行新增</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/addUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = req.<span class="property">body</span></span><br><span class="line">    <span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">showError</span>(<span class="number">500</span>, res, <span class="string">&#x27;Unable to load data&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> id = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data.<span class="property">users</span>).<span class="property">length</span> + <span class="number">1</span></span><br><span class="line">            <span class="keyword">const</span> newUserId = <span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">            data.<span class="property">users</span>[newUserId] = newUser</span><br><span class="line">            <span class="keyword">const</span> newData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">            <span class="title function_">writeFile</span>(file, newData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="title function_">showError</span>(<span class="number">500</span>, res, <span class="string">&#x27;Unable to write data&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span> res.<span class="title function_">json</span>(data.<span class="property">users</span>[newUserId])</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例如，在 Postman 的請求主體中加入以下的 JSON:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img3.png" alt="新增用戶"></p>
<p>現在再嘗試獲取所有用戶，你會發現新的用戶 (ID 為 <code>4</code>) 已經被新增至用戶列表中，因為原本的 <code>data.json</code> 內容已經被更新。</p>
<p><img src="/post/web-dev-express-restful-api-notes/img4.png" alt="再次獲取所有用戶"></p>
<h2 id="deleteUser-刪除指定用戶"><a href="#deleteUser-刪除指定用戶" class="headerlink" title="deleteUser - 刪除指定用戶"></a><code>deleteUser</code> - 刪除指定用戶</h2><p>這個 API 跟 <code>getUser</code> 實際用法差不多，都是需要提供查詢參數來指定用戶 ID，不過這回是刪除指定用戶的資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/deleteUser/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    <span class="title function_">readFile</span>(file, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">showError</span>(<span class="number">500</span>, res, <span class="string">&#x27;Unable to load data&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> user = data.<span class="property">users</span>[<span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>]</span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                <span class="keyword">delete</span> data.<span class="property">users</span>[<span class="string">`user<span class="subst">$&#123;id&#125;</span>`</span>]</span><br><span class="line">                <span class="keyword">const</span> newData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">                <span class="title function_">writeFile</span>(file, newData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) <span class="title function_">showError</span>(<span class="number">500</span>, res, <span class="string">&#x27;Unable to write data&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;This user is now deleted&#x27;</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="title function_">showError</span>(<span class="number">404</span>, res, <span class="string">&#x27;Invalid user&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/post/web-dev-express-restful-api-notes/img5.png" alt="刪除指定用戶"></p>
<p>現在再嘗試獲取所有用戶，ID 為 <code>3</code> 的用戶已被刪除：</p>
<p><img src="/post/web-dev-express-restful-api-notes/img6.png" alt="再次獲取所有用戶"></p>
]]></content>
      <categories>
        <category>網頁開發</category>
        <category>後端開發</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>JavaScript</tag>
        <tag>Bash</tag>
        <tag>Express</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js | Express | 伺服器及後端建置 | 動態網頁編寫筆記</title>
    <url>/post/web-dev-nodejs-express-notes.html</url>
    <content><![CDATA[<div class="note info simple" data-content="Node.js 及 Express"></div>

<p>Node.js 是一個基於 Chrome V8 的 JavaScript 引擎強大的後端開發工具、跨平台的 JavaScript 執行環境，允許開發者<strong>使用 JavaScript 來編寫伺服器端應用程式</strong>，並且具有非常高效能的特點。</p>
<p>Node.js 亦都打破了 JavaScript 對瀏覽器及伺服器之間的隔閡，在 Node.js 出現之前，JavaScript 只能在瀏覽器上運作，無法與伺服器進行溝通及數據傳輸，但自從 Node.js 出現之後，它打破了這個限制，使開發者只需要使用 JavaScript 就可以同時作為前端及後端的編寫。</p>
<div class="note info simple"><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://www.cloudflare.com/zh-tw/learning/serverless/glossary/client-side-vs-server-side/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style>
          <i class="anzhiyufont anzhiyu-icon-link" style></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">參考 Cloudflare</div>
            <div class="tag-link-sitename"> 用戶端及伺服器端</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>

<p>客戶端</p>
<p>在 Web 開發中，「用戶端」是指 Web 應用程式中在用戶端（終端使用者裝置）上顯示或進行的所有內容。這包括使用者看到的內容，例如文字、影像和 UI 的其餘部分，以及應用程式在使用者瀏覽器中執行的任何動作。用戶端也稱為前端，但這兩個詞彙的<strong>含義並不完全相同</strong>。<strong>用戶端僅指處理序執行的位置</strong>，而<strong>前端指的是執行用戶端的處理序的類型</strong>。</p>
<p>伺服器端</p>
<p>與用戶端類似，「伺服器端」表示發生在伺服器而不是用戶端上的所有事件。在過去，幾乎所有業務邏輯都在伺服器端執行，這包括提供動態網頁、與資料庫互動、身分驗證和推播通知。後端也指伺服器上發生的處理序，但<strong>後端僅指代處理序的類型</strong>，而<strong>伺服器端還指代處理序執行的位置</strong>。</p>
<p>簡而言之，客戶端和伺服器端分別指的是在用戶端和伺服器端上執行的部分 (程式碼)，而前端和後端則是分別指代客戶端和伺服器端上的處理程序類型 (程式語言和框架)。</p>
</div>

<hr>
<h1 id="安裝-Node-js-及其環境配置"><a href="#安裝-Node-js-及其環境配置" class="headerlink" title="安裝 Node.js 及其環境配置"></a>安裝 Node.js 及其環境配置</h1><p>首先，你要到 Node.js 官網下載並安裝 Node.js 軟件包到你的電腦。</p>
<p><img src="/post/web-dev-nodejs-express-notes/img2.png" alt="安裝 Node.js"></p>
<p>點擊左方 (LTS) 版本下載，這個版本是適合大部分用戶使用的。</p>
<div class="note info simple"><p>LTS 是一個簡稱，意思是長期支援 (Long Time Support)，是一個比較穩定的版本，而 Current 是最新版。</p>
</div>

<h2 id="初始化軟件套件管理器-NPM"><a href="#初始化軟件套件管理器-NPM" class="headerlink" title="初始化軟件套件管理器 (NPM)"></a>初始化軟件套件管理器 (NPM)</h2><p>軟件套件管理器 (Node Package Manager，簡稱 NPM) 是一個使用 JavaScript 編寫的管理 node 的工具，提供開發者用來分享、發布和管理 Node.js 模組的平台和工具。</p>
<p>當我們成功安裝了 Node.js 軟件包，這個 NPM 亦會隨之連同下載了下來，你可以透過檢查 Node.js 及 NPM 的版本，來再三確認是否完成安裝：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果終端機能輸出它們的版本，那就證明已經成功安裝了。</p>
<p>一個通用使用 Node.js 環境的項目，都必定會使用 NPM 的，所以現在就來初始化 NPM 到你的項目中。預備一個空的資料夾，然後在終端機輸入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>輸入完之後，它會一步一步的詢問你設定的資料，比如專案名稱、描述、作者等等，如果對某資料不需要現在設定，可按 Enter 直接跳過即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package name: (&lt;你的項目名稱&gt;)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p><code>()</code> 內預設填寫了的資料即是如果跳過就會用預設 <code>()</code> 內填寫的資料。</p>
</div>

<p>完成了初始化過程後，你的資料夾便會自動增設了許多檔案，當中，你會看到有一個 <code>package.json</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodejs-express-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BlueWhaleYT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>這個檔案很重要，當你在合作共同開發項目時，開發者可以知道你的項目正在使用了哪些 NPM 套件，要安裝所有正在使用的套件，可以直接輸入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>不過，當然現在你尚未安裝任何套件。</p>
</div>

<hr>
<h1 id="瀏覽器與伺服器端的-JavaScript-差異"><a href="#瀏覽器與伺服器端的-JavaScript-差異" class="headerlink" title="瀏覽器與伺服器端的 JavaScript 差異"></a>瀏覽器與伺服器端的 JavaScript 差異</h1><p>剛才所說，JavaScript 只能在瀏覽器上運作，因為它是一個客戶端語言，而 Node.js 是一個雖然都是使用 JavaScript 來編寫，但是它會成為了伺服器端語言。</p>
<table>
<thead>
<tr>
<th>差異</th>
<th>瀏覽器 JavaScript</th>
<th>伺服器端 JavaScript</th>
</tr>
</thead>
<tbody><tr>
<td>預設物件 (<code>this</code>)</td>
<td>使用的預設物件是 <code>window</code>，如 <code>window.console.log()</code>、<code>window.alert()</code> 等</td>
<td>預設物件是 <code>global</code>，如 <code>global.console.log()</code></td>
</tr>
<tr>
<td>模組系統</td>
<td>只可以使用 ES 模組的 <code>import</code></td>
<td>Node.js 的 JavaScript 同時支援 ES 的 <code>import</code> 及 CommonJS 模組的 <code>require()</code></td>
</tr>
<tr>
<td>微任務 (Microtask)</td>
<td>微任務會在事件循環的微任務執行之後再執行</td>
<td>Node.js 的微任務會在事件循環的各個階段之間執行</td>
</tr>
</tbody></table>
<ul>
<li><code>console.log()</code> 是一個全域方法，所以姑勿論是靜態網頁或是 Node.js 環境，如果是前者運行，就是 <code>window.console.log()</code>，如後者則 <code>global.console.log()</code>。</li>
<li>常用的 <code>alert()</code> 方法是由瀏覽器 JavaScript 的 <code>window</code> 提供的，那都正常，因為這個警示框是屬於向用戶顯示的前端組件，所以伺服器是無法使用 <code>alert()</code>。</li>
</ul>
<hr>
<h1 id="建置伺服器"><a href="#建置伺服器" class="headerlink" title="建置伺服器"></a>建置伺服器</h1><p>當你完成了 Node.js 的安裝過程，準備好 NPM 要用的套件後，現在就可以利用 Node.js 編寫及建置伺服器端。</p>
<p>在你的項目新建一個 JavaScript 檔案，例如 <code>index.js</code>，然後簡單在終端機輸出一個 Hello World。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然後使用 <code>node</code> 指令運行伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index</span><br></pre></td></tr></table></figure>

<div class="note info simple"><p>因為 Node.js 知道你如果使用 <code>node</code> 指令執行伺服器，檔案必定為 JavaScript，所以<strong>副檔名可不寫</strong>，這裏等同於：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure></div>

<p>完成後你應該會看到終端機會有 Hello World 輸出出來。</p>
<h2 id="使用-Node-js-建立網站伺服器"><a href="#使用-Node-js-建立網站伺服器" class="headerlink" title="使用 Node.js 建立網站伺服器"></a>使用 Node.js 建立網站伺服器</h2><p>現在我們就會建立一個網站伺服器，目的就是能夠在網頁上顯示內容，而不是在終端機輸出內容。</p>
<div class="note info simple"><p>一般而言，如果是處理伺服器的檔案，可選擇使用 <code>server.js</code> 作檔案名稱。</p>
</div>

<p>在 <code>server.js</code> 建立一個伺服器需要用到 <code>http</code> 物件。我們會在兩個情況下輸出對應的訊息：</p>
<ul>
<li><code>Request received</code>：當伺服器開始運行，用戶嘗試加載網頁時，雖然網頁是無法加載，但是會在終端機表示了，成功獲取來自用戶的請求，無法加載網頁純粹是因為尚未為網頁加入任何內容。</li>
<li><code>Server listening on port 3000</code>：當伺服器運行後，便會在終端機告知這段訊息。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request received&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>createServer()</code> 所傳的參數 <code>req</code> 或 <code>res</code> 分別是 request (請求) 及 response (回應) 的縮寫。</li>
<li><code>listen()</code> 第一個參數是設置伺服器端口 (port)，通常都會用 <code>3000</code>，第二個參數預設是 <code>localhost</code>，這裏省略了：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&quot;localhost&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>現在啟動伺服器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server</span><br></pre></td></tr></table></figure>

<p>會輸出 <code>Server listening on port 3000</code>。你打開網頁瀏覽器，在網址輸入 <code>localhost:3000</code>，你發現網頁載入不到，不過你再看終端機，會輸出了 <code>Request received</code>。網頁無法載入是因為我們還沒把 HTML 內容加入到網頁。</p>
<h3 id="加入-HTML-網頁內容"><a href="#加入-HTML-網頁內容" class="headerlink" title="加入 HTML 網頁內容"></a>加入 HTML 網頁內容</h3><p>在 Node.js，我們需要彷效 HTML 源檔案並手動設置字符編碼及表頭。然後例如顯示 Hello World。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;meta charset=&quot;UTF-8&quot;&gt;&#x27;</span>)</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">res.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>

<div class="note danger simple"><p><code>UTF-8</code> 是屬於字符編碼系統的統一碼，統一碼支援繁體中文、簡體中文、英文、日文、韓文、符號等字符，如果不註明 HTML 網頁使用 <code>UTF-8</code> 編碼系統，當你想把中文字符加入到網頁時，就會顯示為亂碼，因為網頁預設使用的是 <code>ISO-8859-1</code> 編碼系統。</p>
</div>

<div class="note info simple"><p>Node.js 會自動把 <code>res.write(&#39;&lt;meta charset=&quot;UTF-8&quot;&gt;&#39;)</code> 寫在 HTML 的 <code>&lt;head&gt;</code>。</p>
<p><img src="/post/web-dev-nodejs-express-notes/img1.png" alt="Node.js 自動寫在 head"></p>
</div>

<h3 id="回應及顯示不同-HTML-頁面"><a href="#回應及顯示不同-HTML-頁面" class="headerlink" title="回應及顯示不同 HTML 頁面"></a>回應及顯示不同 HTML 頁面</h3><p>當然，我們不會重複一直使用 <code>res.write()</code> 來寫 HTML 程式碼到網頁，<strong>這樣你不瘋，我都會瘋</strong>。我們會做的是建立多個不同的 HTML 頁面檔案，為了方便管理頁面，可以新建一個 <code>pages</code> 資料夾存放它們。</p>
<div class="tabs" id="code_different_pages_html"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_different_pages_html-1">index.html</button><button type="button" class="tab " data-href="code_different_pages_html-2">about.html</button><button type="button" class="tab " data-href="code_different_pages_html-3">404.html</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_different_pages_html-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_different_pages_html-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>About<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_different_pages_html-3"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<div class="note info simple"><p>404 頁面是用於不存在或無效的頁面所顯示的頁面。</p>
</div>

<p>要獲取不同的頁面檔案，我們可以使用 <code>fs</code> 工具，這個工具是主要用來進行檔案管理的，如基本的檔案寫入及讀取，我們可以利用 <code>fs</code> 把 HTML 檔案讀取出來。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 Node.js，我們會使用 <code>switch</code> 進行多項條件判斷，路由可以透過 <code>req</code> 參數的 <code>url</code> 來獲取，然後手動配置狀態碼，<code>200</code> 為成功，<code>404</code> 為錯誤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request received&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">&#x27;./pages/&#x27;</span></span><br><span class="line">    <span class="keyword">switch</span>(req.<span class="property">url</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            path += <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/about&#x27;</span>:</span><br><span class="line">            path += <span class="string">&#x27;about.html&#x27;</span></span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            path += <span class="string">&#x27;404.html&#x27;</span></span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="keyword">else</span> res.<span class="title function_">write</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>現在，在瀏覽器的網址輸入不同的後綴，如 <code>/about</code>，就會顯示 About 頁面， <code>/hello</code> 是一個無效頁面，就會顯示 404 頁面。</p>
<p>好了，現在寫好了，你會發現寫的程式碼挺多的，如果你想提升編程效率，減少代碼量，可選擇使用 Express 框架。</p>
<h2 id="使用-Express-框架建立網站伺服器"><a href="#使用-Express-框架建立網站伺服器" class="headerlink" title="使用 Express 框架建立網站伺服器"></a>使用 Express 框架建立網站伺服器</h2><p>Express 框架是一個精簡 Node.js 程式碼而洐生的快捷框架，目的沒有兩樣，就是要減少程式碼，提升編程效率。</p>
<div class="note info simple"><p><strong>建議先學習基本的 Node.js 運行及程式編寫</strong>，再來學習使用 Express 框架。</p>
</div>

<p>首先，你需要安裝 <code>express</code> 套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure>

<p>Express 是很<strong>講求路由處理的操作</strong>的，一般來說，起始的 Express 程式碼是大概這個樣子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;HTML 內容&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<p>現在你運行伺服器，再進入網頁就可以看到內容了，是不是簡單多了！</p>
<div class="note info simple"><p>Express 會自動幫你設置了 <code>UTF-8</code> 字符編碼以及 <code>text/html</code> 表頭。</p>
</div>

<p>現在再來簡化顯示不同頁面的邏輯及程式碼：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./pages/index.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">root</span>: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./pages/about.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">root</span>: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">sendFile</span>(<span class="string">&#x27;./pages/404.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">root</span>: __dirname</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>app.get()</code>：需要指明路由來獲取相應資料</li>
<li><code>app.use()</code>：不需要指明路由，這個情況下，可用來重新導向的操作，如不符合以上條件的路由，都會導定向 404 頁面。</li>
</ul>
<p>因為程式是由上而下運行的，所以某程度上來說已經做了條件判斷的處理，不過要注意的是 404 頁面一定要放到最後 (<code>app.listen()</code> 之上)。</p>
<div class="note warning simple"><p><strong>Express 是不知道根目錄是在哪處的</strong>，所以在進行 <code>sendFile()</code> 的時候，要在<strong>第二個參數的物件 <code>root</code> 中註明使用的根目錄</strong>，在 CommonJS 模組（即是現在所用的），我們可以使用 <code>__dirname</code> 獲取現在的根目錄。</p>
<p><strong>Express 預設會為你判斷選用的狀態碼</strong>，你不需要手動設置，唯獨你需要在處理 404 頁面時手動設置為 <code>404</code> 狀態碼。</p>
</div>

<h3 id="使用範本引擎"><a href="#使用範本引擎" class="headerlink" title="使用範本引擎"></a>使用範本引擎</h3><p>你有沒有想過這個基本的多個 HTML 頁面修改頁首 (Header) 或 頁尾 (Footer) 會很麻煩嗎？因為你需要每一個 HTML 頁面檔案都要做相應修改，才可以有一致的效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Content here</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 Express 框架取替 Node.js 其中一個原因，就是 Express 支援範本引擎，它可以讓我們<strong>將動態內容與靜態內容分開</strong>，讓程式碼更加整潔。</p>
<p>比如，我們可以把 <code>&lt;title&gt;</code> 標記內的網頁標題設為動態頁面標題，<code>&lt;body&gt;</code> 部分的所有內容均為動態頁面內容！</p>
<p>首先，你需要安裝 <code>ejs</code> 套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i ejs</span><br></pre></td></tr></table></figure>

<div class="note warning simple"><p>使用範本引擎的檔案會使用 <code>.ejs</code> 副檔名，而不會用 <code>.html</code> 或 <code>.htm</code> 。如有既有 HTML 檔案，請修改副檔名為 <code>.ejs</code>。</p>
</div>

<p>然後設置 Express 程式使用範本引擎 (View Engine)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./pages&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="建立頁首及頁尾範本"><a href="#建立頁首及頁尾範本" class="headerlink" title="建立頁首及頁尾範本"></a>建立頁首及頁尾範本</h4><p>我們會新建兩個檔案，分別是 <code>header.ejs</code> 及 <code>footer.ejs</code> 作為頁首及頁尾的既定模板。</p>
<div class="tabs" id="code_ejs_header_footer"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_ejs_header_footer-1">header.ejs</button><button type="button" class="tab " data-href="code_ejs_header_footer-2">footer.ejs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_ejs_header_footer-1"><p>我們要把 <code>&lt;title&gt;</code> 的文本內容動態化，就要用 EJS 變量宣告內容為 <code>&lt;%= title %&gt;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_ejs_header_footer-2"><p>這裏你就可以加一些版權部分之類的內容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Footer content here</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p>你會看到，沒錯，它是一個不完整的 HTML 語法檔案，但沒問題的，因為最後是這樣的：</p>
<p>一個 <code>index.ejs</code> 檔案 &#x3D; <code>header.ejs</code> 內容 + 你的 body 內容 + <code>footer.ejs</code> 內容，最後始終運行的是 <code>index.ejs</code> 檔案，所以不會影響的。</p>
<div class="tabs" id="code_ejs_embed_header_footer"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="code_ejs_embed_header_footer-1">index.ejs</button><button type="button" class="tab " data-href="code_ejs_embed_header_footer-2">about.ejs</button><button type="button" class="tab " data-href="code_ejs_embed_header_footer-3">404.ejs</button></ul><div class="tab-contents"><div class="tab-item-content active" id="code_ejs_embed_header_footer-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;header.ejs&#x27;</span>) %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;footer.ejs&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_ejs_embed_header_footer-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;header.ejs&#x27;</span>) %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;footer.ejs&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="code_ejs_embed_header_footer-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;header.ejs&#x27;</span>) %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;%- <span class="title function_">include</span>(<span class="string">&#x27;footer.ejs&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>

<p>所有在 <code>pages</code> 資料夾內的頁面檔案都在受到範本引擎管理，現在就會用 <code>render()</code> 載入對應頁面：</p>
<div class="note info simple"><p><code>server.js</code> 的 <code>render()</code> 加入要傳入的 <code>title</code> 參數，這個 <code>title</code> 參數是來自 <code>header.ejs</code> 的 <code>&lt;%= title %&gt;</code> 取出顯示。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Home&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;about&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;About&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">render</span>(<span class="string">&#x27;404&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;404&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>網頁開發</category>
        <category>後端開發</category>
        <category>詳細筆記</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
        <tag>Bash</tag>
        <tag>Express</tag>
        <tag>EJS</tag>
      </tags>
  </entry>
</search>
